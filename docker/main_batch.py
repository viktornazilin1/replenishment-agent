from app.hana_data_loader import load_data_from_hana
from app.forecasting import run_forecast_logic
import pandas as pd
from hdbcli import dbapi
from datetime import datetime
import os
from dotenv import load_dotenv
from pathlib import Path

env_path = Path(__file__).resolve().parent.parent / ".env"
load_dotenv(dotenv_path=env_path)

analysis_types = [
    "–¢–æ–ª—å–∫–æ —Å–ø—Ä–æ—Å",
    "–°–ø—Ä–æ—Å + –ü–æ–≥–æ–¥–∞",
    "–°–ø—Ä–æ—Å + –ü–æ–≥–æ–¥–∞ + –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ + –ü—Ä–æ–º–æ"
]

def insert_to_hana(result, material_id, store_id, analysis_type):
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print("HANA_HOST:", os.getenv("HANA_HOST"))
    print("HANA_PORT:", os.getenv("HANA_PORT"))
    print("HANA_USER:", os.getenv("HANA_USER"))
    print("HANA_PASSWORD:", "*****" if os.getenv("HANA_PASSWORD") else None)
    conn = dbapi.connect(
        address=os.getenv("HANA_HOST"),
        port=int(os.getenv("HANA_PORT", 443)),
        user=os.getenv("HANA_USER"),
        password=os.getenv("HANA_PASSWORD")
    )
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO FORECAST_RESULTS (
            material_id, store_id, forecast_date,
            predicted_demand, current_stock, suggested_qty, run_timestamp
        )
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        material_id,
        store_id,
        datetime.today().date(),
        result.get("predicted_demand"),
        result.get("current_stock"),
        result.get("suggested_qty"),
        datetime.now()
    ))
    conn.commit()
    conn.close()

print(f"üöÄ –°—Ç–∞—Ä—Ç batch-–ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ SAP AI Core (–∞–Ω–∞–ª–∏–∑ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º)")

try:
    sales, inventory, materials, stores, holidays, promotions = load_data_from_hana()

    materials["material_id"] = materials["material_id"].astype(str)
    stores["store_id"] = stores["store_id"].astype(str)

    for analysis_type in analysis_types:
        print(f"‚ñ∂Ô∏è –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis_type}")

        for material_row in materials.to_dict(orient="records"):
            for store_row in stores.to_dict(orient="records"):
                material_id = material_row["material_id"]
                store_id = store_row["store_id"]

                print(f"\nüì¶ –ê–Ω–∞–ª–∏–∑: {material_row['description']} / {store_row['store_name']}")

                try:
                    result = run_forecast_logic(
                        material_id=material_id,
                        store_id=store_id,
                        analysis_type=analysis_type,
                        sales=sales,
                        inventory=inventory,
                        stores=stores,
                        holidays=holidays,
                        promotions=promotions
                    )

                    print(f"  üîÆ –ü—Ä–æ–≥–Ω–æ–∑: {result.get('predicted_demand')} | –û—Å—Ç–∞—Ç–æ–∫: {result.get('current_stock')} | –ü–æ–ø–æ–ª–Ω–∏—Ç—å: {result.get('suggested_qty')}")
                    data_used = result.get("data_used", {})
                    print(f"     üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: –ü–æ–≥–æ–¥–∞: {data_used.get("weather_used", False)}, –ü—Ä–∞–∑–¥–Ω–∏–∫–∏: {data_used.get("holidays_used", False)}, –ü—Ä–æ–º–æ: {data_used.get("promotions_used", False)}")

                    insert_to_hana(result, material_id, store_id, analysis_type)

                except Exception as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

except Exception as e:
    print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {e}")
