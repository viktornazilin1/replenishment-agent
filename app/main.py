from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from app.hana_data_loader import load_data_from_hana
from app.forecasting import run_forecast_logic
from app.training_data import build_training_dataset
import os

app = Flask(__name__, static_folder="../static", static_url_path="/")
CORS(app)

# üì¶ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (frontend)
@app.route("/")
def index():
    return send_from_directory(app.static_folder, "index.html")

# üì¶ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤
@app.route("/api/materials")
def api_materials():
    _, _, materials, _, _, _ = load_data_from_hana()
    materials["material_id"] = materials["material_id"].astype(str)
    return jsonify(materials.to_dict(orient="records"))

# üì¶ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@app.route("/api/stores")
def api_stores():
    _, _, _, stores, _, _ = load_data_from_hana()
    stores["store_id"] = stores["store_id"].astype(str)
    return jsonify(stores.to_dict(orient="records"))

# üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ XGBoost
@app.route("/api/forecast", methods=["POST"])
def forecast():
    try:
        data = request.json
        material_id = data.get("material_id")
        store_id = data.get("store_id")
        analysis_type = data.get("analysis_type", "XGBoost")  # —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ XGBoost

        sales, inventory, materials, stores, holidays, promotions = load_data_from_hana()

        result = run_forecast_logic(
            material_id=material_id,
            store_id=store_id,
            analysis_type=analysis_type,
            sales=sales,
            inventory=inventory,
            stores=stores,
            holidays=holidays,
            promotions=promotions
        )

        return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üß† –ü–æ–ª—É—á–∏—Ç—å –æ–±—É—á–∞—é—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@app.route("/api/training-data")
def training_data():
    try:
        df = build_training_dataset()
        return jsonify(df.to_dict(orient="records"))
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
