import {
  Button_default,
  toLowercaseEnumValue
} from "./chunk-4ZNTOWZD.js";
import {
  BusyIndicator_default
} from "./chunk-AR4V72RN.js";
import {
  deregisterUI5Element,
  getAllAccessibleDescriptionRefTexts,
  getAllAccessibleNameRefTexts,
  getEffectiveAriaDescriptionText,
  getEffectiveAriaLabelText,
  registerUI5Element
} from "./chunk-BW2OWWR5.js";
import {
  Label_default
} from "./chunk-ISJZLUXJ.js";
import {
  ARIA_LABEL_LIST_DELETABLE,
  ARIA_LABEL_LIST_MULTISELECTABLE,
  ARIA_LABEL_LIST_SELECTABLE,
  DIALOG_HEADER_ARIA_DESCRIBEDBY_DRAGGABLE,
  DIALOG_HEADER_ARIA_DESCRIBEDBY_DRAGGABLE_RESIZABLE,
  DIALOG_HEADER_ARIA_DESCRIBEDBY_RESIZABLE,
  DIALOG_HEADER_ARIA_ROLE_DESCRIPTION,
  FORM_SELECTABLE_REQUIRED,
  GROUP_HEADER_TEXT,
  INPUT_SUGGESTIONS_TITLE,
  LIST_ITEM_POSITION,
  LIST_ROLE_LISTBOX_GROUP_DESCRIPTION,
  LIST_ROLE_LIST_GROUP_DESCRIPTION,
  LOAD_MORE_TEXT,
  RESPONSIVE_POPOVER_CLOSE_DIALOG_BUTTON,
  SELECT_ROLE_DESCRIPTION,
  VALUE_STATE_ERROR,
  VALUE_STATE_INFORMATION,
  VALUE_STATE_SUCCESS,
  VALUE_STATE_TYPE_ERROR,
  VALUE_STATE_TYPE_INFORMATION,
  VALUE_STATE_TYPE_SUCCESS,
  VALUE_STATE_TYPE_WARNING,
  VALUE_STATE_WARNING,
  i18n_default
} from "./chunk-WZO5IFLR.js";
import {
  ListItemBase_default,
  getActiveElement_default,
  isElementHidden_default
} from "./chunk-KQHYQSG3.js";
import {
  Icon_default,
  event_strict_default,
  registerIcon
} from "./chunk-4CSORQWJ.js";
import {
  isCtrl,
  isDown,
  isDownShift,
  isEnd,
  isEnter,
  isEscape,
  isHome,
  isLeft,
  isLeftShift,
  isPageDown,
  isPageUp,
  isRight,
  isRightShift,
  isShow,
  isSpace,
  isTabNext,
  isTabPrevious,
  isUp,
  isUpShift,
  slot_default
} from "./chunk-ZXYB53A5.js";
import {
  Fragment,
  JsxRenderer_default,
  UI5Element_default,
  attachBoot,
  createStyle,
  customElement_default,
  getScopedVarName,
  getSharedResource_default,
  getSingletonElementInstance_default,
  hasStyle,
  instanceOfUI5Element,
  isChrome,
  isDesktop,
  isIOS,
  isPhone,
  isSafari,
  jsx,
  jsxs,
  parameters_bundle_css_default,
  parameters_bundle_css_default2,
  property_default,
  registerFeature,
  registerThemePropertiesLoader,
  renderFinished
} from "./chunk-NS46QOBH.js";

// node_modules/@ui5/webcomponents-base/dist/types/InvisibleMessageMode.js
var InvisibleMessageMode = {
  /**
   * Indicates that updates to the region should be presented at the next graceful opportunity,
   * such as at the end of reading the current sentence, or when the user pauses typing.
   * @public
   */
  Polite: "Polite",
  /**
   * Indicates that updates to the region have the highest priority and should be presented to the user immediately.
   * @public
   */
  Assertive: "Assertive"
};
var InvisibleMessageMode_default = InvisibleMessageMode;

// node_modules/@ui5/webcomponents-base/dist/util/InvisibleMessage.js
var politeSpan;
var assertiveSpan;
var setOutOfViewportStyles = (el) => {
  el.style.position = "absolute";
  el.style.clip = "rect(1px,1px,1px,1px)";
  el.style.userSelect = "none";
  el.style.left = "-1000px";
  el.style.top = "-1000px";
  el.style.pointerEvents = "none";
};
attachBoot(() => {
  if (politeSpan && assertiveSpan) {
    return;
  }
  politeSpan = document.createElement("span");
  assertiveSpan = document.createElement("span");
  politeSpan.classList.add("ui5-invisiblemessage-polite");
  assertiveSpan.classList.add("ui5-invisiblemessage-assertive");
  politeSpan.setAttribute("aria-live", "polite");
  assertiveSpan.setAttribute("aria-live", "assertive");
  politeSpan.setAttribute("role", "alert");
  assertiveSpan.setAttribute("role", "alert");
  setOutOfViewportStyles(politeSpan);
  setOutOfViewportStyles(assertiveSpan);
  getSingletonElementInstance_default("ui5-announcement-area").appendChild(politeSpan);
  getSingletonElementInstance_default("ui5-announcement-area").appendChild(assertiveSpan);
});
var announce = (message, mode) => {
  const span = mode === InvisibleMessageMode_default.Assertive ? assertiveSpan : politeSpan;
  span.textContent = "";
  span.textContent = message;
  if (mode !== InvisibleMessageMode_default.Assertive && mode !== InvisibleMessageMode_default.Polite) {
    console.warn(`You have entered an invalid mode. Valid values are: "Polite" and "Assertive". The framework will automatically set the mode to "Polite".`);
  }
  setTimeout(() => {
    if (span.textContent === message) {
      span.textContent = "";
    }
  }, 3e3);
};
var InvisibleMessage_default = announce;

// node_modules/@ui5/webcomponents-base/dist/types/ValueState.js
var ValueState;
(function(ValueState2) {
  ValueState2["None"] = "None";
  ValueState2["Positive"] = "Positive";
  ValueState2["Critical"] = "Critical";
  ValueState2["Negative"] = "Negative";
  ValueState2["Information"] = "Information";
})(ValueState || (ValueState = {}));
var ValueState_default = ValueState;

// node_modules/@ui5/webcomponents-icons/dist/generated/i18n/i18n-defaults.js
var ICON_DECLINE = { key: "ICON_DECLINE", defaultText: "Decline" };
var ICON_ERROR = { key: "ICON_ERROR", defaultText: "Error" };

// node_modules/@ui5/webcomponents-icons/dist/v4/error.js
var name = "error";
var pathData = "M512 256q0 53-20.5 100t-55 81.5-81 54.5-99.5 20-100-20.5-81.5-55T20 355 0 256q0-54 20-100.5t55-81T156.5 20 256 0t99.5 20T437 75t55 81.5 20 99.5zM399 364q6-6 0-12l-86-86q-6-6 0-12l81-81q6-6 0-12l-37-37q-2-2-6-2t-6 2l-83 82q-1 3-6 3-3 0-6-3l-84-83q-1-2-6-2-4 0-6 2l-37 37q-6 6 0 12l83 82q6 6 0 12l-83 82q-2 2-2.5 6t2.5 6l36 37q4 2 6 2 4 0 6-2l85-84q2-2 6-2t6 2l88 88q4 2 6 2t6-2z";
var ltr = false;
var accData = ICON_ERROR;
var collection = "SAP-icons-v4";
var packageName = "@ui5/webcomponents-icons";
registerIcon(name, { pathData, ltr, accData, collection, packageName });

// node_modules/@ui5/webcomponents-icons/dist/v5/error.js
var name2 = "error";
var pathData2 = "M256 0q53 0 99.5 20T437 75t55 81.5 20 99.5-20 99.5-55 81.5-81.5 55-99.5 20-99.5-20T75 437t-55-81.5T0 256t20-99.5T75 75t81.5-55T256 0zm45 256l74-73q9-11 9-23 0-13-9.5-22.5T352 128q-12 0-23 9l-73 74-73-74q-10-9-23-9t-22.5 9.5T128 160q0 12 9 23l74 73-74 73q-9 10-9 23t9.5 22.5T160 384t23-9l73-74 73 74q11 9 23 9 13 0 22.5-9.5T384 352t-9-23z";
var ltr2 = false;
var accData2 = ICON_ERROR;
var collection2 = "SAP-icons-v5";
var packageName2 = "@ui5/webcomponents-icons";
registerIcon(name2, { pathData: pathData2, ltr: ltr2, accData: accData2, collection: collection2, packageName: packageName2 });

// node_modules/@ui5/webcomponents-icons/dist/v4/alert.js
var name3 = "alert";
var pathData3 = "M501 374q5 10 7.5 19.5T512 412v5q0 31-23 47t-50 16H74q-13 0-26-4t-23.5-12-17-20T0 417q0-13 4-22.5t9-20.5L198 38q21-38 61-38 38 0 59 38zM257 127q-13 0-23.5 8T223 161q1 7 2 12 3 25 4.5 48t3.5 61q0 11 7.5 16t16.5 5q22 0 23-21l2-36 9-85q0-18-10.5-26t-23.5-8zm0 299q20 0 31.5-12t11.5-32q0-19-11.5-31T257 339t-31.5 12-11.5 31q0 20 11.5 32t31.5 12z";
var ltr3 = false;
var collection3 = "SAP-icons-v4";
var packageName3 = "@ui5/webcomponents-icons";
registerIcon(name3, { pathData: pathData3, ltr: ltr3, collection: collection3, packageName: packageName3 });

// node_modules/@ui5/webcomponents-icons/dist/v5/alert.js
var name4 = "alert";
var pathData4 = "M505 399q7 13 7 27 0 21-15.5 37.5T456 480H56q-25 0-40.5-16.5T0 426q0-14 7-27L208 59q17-27 48-27 14 0 27 6.5T304 59zM288 176q0-14-9-23t-23-9-23 9-9 23v96q0 14 9 23t23 9 23-9 9-23v-96zm-32 240q14 0 23-9t9-23-9-23-23-9-23 9-9 23 9 23 23 9z";
var ltr4 = false;
var collection4 = "SAP-icons-v5";
var packageName4 = "@ui5/webcomponents-icons";
registerIcon(name4, { pathData: pathData4, ltr: ltr4, collection: collection4, packageName: packageName4 });

// node_modules/@ui5/webcomponents-icons/dist/v4/sys-enter-2.js
var name5 = "sys-enter-2";
var pathData5 = "M512 256q0 54-20 100.5t-54.5 81T356 492t-100 20q-54 0-100.5-20t-81-55T20 355.5 0 256t20.5-100 55-81.5T157 20t99-20q53 0 100 20t81.5 54.5T492 156t20 100zm-118-87q4-8-1-13l-36-36q-3-4-8-4t-8 5L237 294q-3 1-4 0l-70-52q-4-3-7-3t-4.5 2-2.5 3l-29 41q-6 8 2 14l113 95q2 2 7 2t8-4z";
var ltr5 = true;
var collection5 = "SAP-icons-v4";
var packageName5 = "@ui5/webcomponents-icons";
registerIcon(name5, { pathData: pathData5, ltr: ltr5, collection: collection5, packageName: packageName5 });

// node_modules/@ui5/webcomponents-icons/dist/v5/sys-enter-2.js
var name6 = "sys-enter-2";
var pathData6 = "M256 0q53 0 100 20t81.5 54.5T492 156t20 100-20 100-54.5 81.5T356 492t-100 20-100-20-81.5-54.5T20 356 0 256t20-100 54.5-81.5T156 20 256 0zm150 183q10-9 10-23 0-13-9.5-22.5T384 128t-22 9L186 308l-68-63q-9-9-22-9t-22.5 9.5T64 268q0 15 10 24l91 83q9 9 21 9 13 0 23-9z";
var ltr6 = true;
var collection6 = "SAP-icons-v5";
var packageName6 = "@ui5/webcomponents-icons";
registerIcon(name6, { pathData: pathData6, ltr: ltr6, collection: collection6, packageName: packageName6 });

// node_modules/@ui5/webcomponents-icons/dist/v4/information.js
var name7 = "information";
var pathData7 = "M0 256q0-53 20.5-100t55-81.5T157 20t99-20q54 0 100.5 20t81 55 54.5 81.5 20 99.5q0 54-20 100.5t-54.5 81T356 492t-100 20q-54 0-100.5-20t-81-55T20 355.5 0 256zm192 112v33h128v-33h-32V215q0-6-7-6h-88v31h32v128h-33zm34-201q14 11 30 11 17 0 29.5-11.5T298 138q0-19-13-31-12-12-29-12-19 0-30.5 12.5T214 138q0 17 12 29z";
var ltr7 = false;
var collection7 = "SAP-icons-v4";
var packageName7 = "@ui5/webcomponents-icons";
registerIcon(name7, { pathData: pathData7, ltr: ltr7, collection: collection7, packageName: packageName7 });

// node_modules/@ui5/webcomponents-icons/dist/v5/information.js
var name8 = "information";
var pathData8 = "M256 0q53 0 99.5 20T437 75t55 81.5 20 99.5-20 99.5-55 81.5-81.5 55-99.5 20-99.5-20T75 437t-55-81.5T0 256t20-99.5T75 75t81.5-55T256 0zm0 160q14 0 23-9t9-23-9-23-23-9-23 9-9 23 9 23 23 9zm32 64q0-14-9-23t-23-9-23 9-9 23v160q0 14 9 23t23 9 23-9 9-23V224z";
var ltr8 = false;
var collection8 = "SAP-icons-v5";
var packageName8 = "@ui5/webcomponents-icons";
registerIcon(name8, { pathData: pathData8, ltr: ltr8, collection: collection8, packageName: packageName8 });

// node_modules/lit-html/development/lit-html.js
var _a;
var _b;
var _c;
var _d;
var DEV_MODE = true;
var ENABLE_EXTRA_SECURITY_HOOKS = true;
var ENABLE_SHADYDOM_NOPATCH = true;
var NODE_MODE = false;
var global = NODE_MODE ? globalThis : window;
var debugLogEvent = DEV_MODE ? (event) => {
  const shouldEmit = global.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var debugLogRenderId = 0;
var issueWarning;
if (DEV_MODE) {
  (_a = global.litIssuedWarnings) !== null && _a !== void 0 ? _a : global.litIssuedWarnings = /* @__PURE__ */ new Set();
  issueWarning = (code, warning) => {
    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : "";
    if (!global.litIssuedWarnings.has(warning)) {
      console.warn(warning);
      global.litIssuedWarnings.add(warning);
    }
  };
  issueWarning("dev-mode", `Lit is in dev mode. Not recommended for production!`);
}
var wrap = ENABLE_SHADYDOM_NOPATCH && ((_b = global.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && ((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.noPatch) === true ? global.ShadyDOM.wrap : (node) => node;
var trustedTypes = global.trustedTypes;
var policy = trustedTypes ? trustedTypes.createPolicy("lit-html", {
  createHTML: (s) => s
}) : void 0;
var identityFunction = (value) => value;
var noopSanitizer = (_node, _name, _type) => identityFunction;
var setSanitizer = (newSanitizer) => {
  if (!ENABLE_EXTRA_SECURITY_HOOKS) {
    return;
  }
  if (sanitizerFactoryInternal !== noopSanitizer) {
    throw new Error(`Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.`);
  }
  sanitizerFactoryInternal = newSanitizer;
};
var _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
  sanitizerFactoryInternal = noopSanitizer;
};
var createSanitizer = (node, name15, type) => {
  return sanitizerFactoryInternal(node, name15, type);
};
var boundAttributeSuffix = "$lit$";
var marker = `lit$${String(Math.random()).slice(9)}$`;
var markerMatch = "?" + marker;
var nodeMarker = `<${markerMatch}>`;
var d = NODE_MODE && global.document === void 0 ? {
  createTreeWalker() {
    return {};
  }
} : document;
var createMarker = () => d.createComment("");
var isPrimitive = (value) => value === null || typeof value != "object" && typeof value != "function";
var isArray = Array.isArray;
var isIterable = (value) => isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === "function";
var SPACE_CHAR = `[ 	
\f\r]`;
var ATTR_VALUE_CHAR = `[^ 	
\f\r"'\`<>=]`;
var NAME_CHAR = `[^\\s"'>=/]`;
var textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var COMMENT_START = 1;
var TAG_NAME = 2;
var DYNAMIC_TAG_NAME = 3;
var commentEndRegex = /-->/g;
var comment2EndRegex = />/g;
var tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, "g");
var ENTIRE_MATCH = 0;
var ATTRIBUTE_NAME = 1;
var SPACES_AND_EQUALS = 2;
var QUOTE_CHAR = 3;
var singleQuoteAttrEndRegex = /'/g;
var doubleQuoteAttrEndRegex = /"/g;
var rawTextElement = /^(?:script|style|textarea|title)$/i;
var HTML_RESULT = 1;
var SVG_RESULT = 2;
var ATTRIBUTE_PART = 1;
var CHILD_PART = 2;
var PROPERTY_PART = 3;
var BOOLEAN_ATTRIBUTE_PART = 4;
var EVENT_PART = 5;
var ELEMENT_PART = 6;
var COMMENT_PART = 7;
var tag = (type) => (strings, ...values) => {
  if (DEV_MODE && strings.some((s) => s === void 0)) {
    console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences.");
  }
  return {
    // This property needs to remain unminified.
    ["_$litType$"]: type,
    strings,
    values
  };
};
var html = tag(HTML_RESULT);
var svg = tag(SVG_RESULT);
var noChange = Symbol.for("lit-noChange");
var nothing = Symbol.for("lit-nothing");
var templateCache = /* @__PURE__ */ new WeakMap();
var walker = d.createTreeWalker(d, 129, null, false);
var sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
  if (!Array.isArray(tsa) || !tsa.hasOwnProperty("raw")) {
    let message = "invalid template strings array";
    if (DEV_MODE) {
      message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `.trim().replace(/\n */g, "\n");
    }
    throw new Error(message);
  }
  return policy !== void 0 ? policy.createHTML(stringFromTSA) : stringFromTSA;
}
var getTemplateHtml = (strings, type) => {
  const l = strings.length - 1;
  const attrNames = [];
  let html3 = type === SVG_RESULT ? "<svg>" : "";
  let rawTextEndRegex;
  let regex = textEndRegex;
  for (let i = 0; i < l; i++) {
    const s = strings[i];
    let attrNameEndIndex = -1;
    let attrName;
    let lastIndex = 0;
    let match;
    while (lastIndex < s.length) {
      regex.lastIndex = lastIndex;
      match = regex.exec(s);
      if (match === null) {
        break;
      }
      lastIndex = regex.lastIndex;
      if (regex === textEndRegex) {
        if (match[COMMENT_START] === "!--") {
          regex = commentEndRegex;
        } else if (match[COMMENT_START] !== void 0) {
          regex = comment2EndRegex;
        } else if (match[TAG_NAME] !== void 0) {
          if (rawTextElement.test(match[TAG_NAME])) {
            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, "g");
          }
          regex = tagEndRegex;
        } else if (match[DYNAMIC_TAG_NAME] !== void 0) {
          if (DEV_MODE) {
            throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions");
          }
          regex = tagEndRegex;
        }
      } else if (regex === tagEndRegex) {
        if (match[ENTIRE_MATCH] === ">") {
          regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex;
          attrNameEndIndex = -1;
        } else if (match[ATTRIBUTE_NAME] === void 0) {
          attrNameEndIndex = -2;
        } else {
          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
          attrName = match[ATTRIBUTE_NAME];
          regex = match[QUOTE_CHAR] === void 0 ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
        }
      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
        regex = tagEndRegex;
      } else if (regex === commentEndRegex || regex === comment2EndRegex) {
        regex = textEndRegex;
      } else {
        regex = tagEndRegex;
        rawTextEndRegex = void 0;
      }
    }
    if (DEV_MODE) {
      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, "unexpected parse state B");
    }
    const end = regex === tagEndRegex && strings[i + 1].startsWith("/>") ? " " : "";
    html3 += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? (attrNames.push(void 0), i) : end);
  }
  const htmlResult = html3 + (strings[l] || "<?>") + (type === SVG_RESULT ? "</svg>" : "");
  return [trustFromTemplateString(strings, htmlResult), attrNames];
};
var Template = class _Template {
  constructor({ strings, ["_$litType$"]: type }, options) {
    this.parts = [];
    let node;
    let nodeIndex = 0;
    let attrNameIndex = 0;
    const partCount = strings.length - 1;
    const parts = this.parts;
    const [html3, attrNames] = getTemplateHtml(strings, type);
    this.el = _Template.createElement(html3, options);
    walker.currentNode = this.el.content;
    if (type === SVG_RESULT) {
      const content = this.el.content;
      const svgElement = content.firstChild;
      svgElement.remove();
      content.append(...svgElement.childNodes);
    }
    while ((node = walker.nextNode()) !== null && parts.length < partCount) {
      if (node.nodeType === 1) {
        if (DEV_MODE) {
          const tag2 = node.localName;
          if (/^(?:textarea|template)$/i.test(tag2) && node.innerHTML.includes(marker)) {
            const m = `Expressions are not supported inside \`${tag2}\` elements. See https://lit.dev/msg/expression-in-${tag2} for more information.`;
            if (tag2 === "template") {
              throw new Error(m);
            } else
              issueWarning("", m);
          }
        }
        if (node.hasAttributes()) {
          const attrsToRemove = [];
          for (const name15 of node.getAttributeNames()) {
            if (name15.endsWith(boundAttributeSuffix) || name15.startsWith(marker)) {
              const realName = attrNames[attrNameIndex++];
              attrsToRemove.push(name15);
              if (realName !== void 0) {
                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                const statics = value.split(marker);
                const m = /([.?@])?(.*)/.exec(realName);
                parts.push({
                  type: ATTRIBUTE_PART,
                  index: nodeIndex,
                  name: m[2],
                  strings: statics,
                  ctor: m[1] === "." ? PropertyPart : m[1] === "?" ? BooleanAttributePart : m[1] === "@" ? EventPart : AttributePart
                });
              } else {
                parts.push({
                  type: ELEMENT_PART,
                  index: nodeIndex
                });
              }
            }
          }
          for (const name15 of attrsToRemove) {
            node.removeAttribute(name15);
          }
        }
        if (rawTextElement.test(node.tagName)) {
          const strings2 = node.textContent.split(marker);
          const lastIndex = strings2.length - 1;
          if (lastIndex > 0) {
            node.textContent = trustedTypes ? trustedTypes.emptyScript : "";
            for (let i = 0; i < lastIndex; i++) {
              node.append(strings2[i], createMarker());
              walker.nextNode();
              parts.push({ type: CHILD_PART, index: ++nodeIndex });
            }
            node.append(strings2[lastIndex], createMarker());
          }
        }
      } else if (node.nodeType === 8) {
        const data = node.data;
        if (data === markerMatch) {
          parts.push({ type: CHILD_PART, index: nodeIndex });
        } else {
          let i = -1;
          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
            parts.push({ type: COMMENT_PART, index: nodeIndex });
            i += marker.length - 1;
          }
        }
      }
      nodeIndex++;
    }
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "template prep",
      template: this,
      clonableTemplate: this.el,
      parts: this.parts,
      strings
    });
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @nocollapse */
  static createElement(html3, _options) {
    const el = d.createElement("template");
    el.innerHTML = html3;
    return el;
  }
};
function resolveDirective(part, value, parent = part, attributeIndex) {
  var _a2, _b2, _c2;
  var _d2;
  if (value === noChange) {
    return value;
  }
  let currentDirective = attributeIndex !== void 0 ? (_a2 = parent.__directives) === null || _a2 === void 0 ? void 0 : _a2[attributeIndex] : parent.__directive;
  const nextDirectiveConstructor = isPrimitive(value) ? void 0 : (
    // This property needs to remain unminified.
    value["_$litDirective$"]
  );
  if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
    (_b2 = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective["_$notifyDirectiveConnectionChanged"]) === null || _b2 === void 0 ? void 0 : _b2.call(currentDirective, false);
    if (nextDirectiveConstructor === void 0) {
      currentDirective = void 0;
    } else {
      currentDirective = new nextDirectiveConstructor(part);
      currentDirective._$initialize(part, parent, attributeIndex);
    }
    if (attributeIndex !== void 0) {
      ((_c2 = (_d2 = parent).__directives) !== null && _c2 !== void 0 ? _c2 : _d2.__directives = [])[attributeIndex] = currentDirective;
    } else {
      parent.__directive = currentDirective;
    }
  }
  if (currentDirective !== void 0) {
    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
  }
  return value;
}
var TemplateInstance = class {
  constructor(template, parent) {
    this._$parts = [];
    this._$disconnectableChildren = void 0;
    this._$template = template;
    this._$parent = parent;
  }
  // Called by ChildPart parentNode getter
  get parentNode() {
    return this._$parent.parentNode;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  // This method is separate from the constructor because we need to return a
  // DocumentFragment and we don't want to hold onto it with an instance field.
  _clone(options) {
    var _a2;
    const { el: { content }, parts } = this._$template;
    const fragment = ((_a2 = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a2 !== void 0 ? _a2 : d).importNode(content, true);
    walker.currentNode = fragment;
    let node = walker.nextNode();
    let nodeIndex = 0;
    let partIndex = 0;
    let templatePart = parts[0];
    while (templatePart !== void 0) {
      if (nodeIndex === templatePart.index) {
        let part;
        if (templatePart.type === CHILD_PART) {
          part = new ChildPart(node, node.nextSibling, this, options);
        } else if (templatePart.type === ATTRIBUTE_PART) {
          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
        } else if (templatePart.type === ELEMENT_PART) {
          part = new ElementPart(node, this, options);
        }
        this._$parts.push(part);
        templatePart = parts[++partIndex];
      }
      if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
        node = walker.nextNode();
        nodeIndex++;
      }
    }
    walker.currentNode = d;
    return fragment;
  }
  _update(values) {
    let i = 0;
    for (const part of this._$parts) {
      if (part !== void 0) {
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "set part",
          part,
          value: values[i],
          valueIndex: i,
          values,
          templateInstance: this
        });
        if (part.strings !== void 0) {
          part._$setValue(values, part, i);
          i += part.strings.length - 2;
        } else {
          part._$setValue(values[i]);
        }
      }
      i++;
    }
  }
};
var ChildPart = class _ChildPart {
  constructor(startNode, endNode, parent, options) {
    var _a2;
    this.type = CHILD_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this._$startNode = startNode;
    this._$endNode = endNode;
    this._$parent = parent;
    this.options = options;
    this.__isConnected = (_a2 = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a2 !== void 0 ? _a2 : true;
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._textSanitizer = void 0;
    }
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    var _a2, _b2;
    return (_b2 = (_a2 = this._$parent) === null || _a2 === void 0 ? void 0 : _a2._$isConnected) !== null && _b2 !== void 0 ? _b2 : this.__isConnected;
  }
  /**
   * The parent node into which the part renders its content.
   *
   * A ChildPart's content consists of a range of adjacent child nodes of
   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
   * `.endNode`).
   *
   * - If both `.startNode` and `.endNode` are non-null, then the part's content
   * consists of all siblings between `.startNode` and `.endNode`, exclusively.
   *
   * - If `.startNode` is non-null but `.endNode` is null, then the part's
   * content consists of all siblings following `.startNode`, up to and
   * including the last child of `.parentNode`. If `.endNode` is non-null, then
   * `.startNode` will always be non-null.
   *
   * - If both `.endNode` and `.startNode` are null, then the part's content
   * consists of all child nodes of `.parentNode`.
   */
  get parentNode() {
    let parentNode = wrap(this._$startNode).parentNode;
    const parent = this._$parent;
    if (parent !== void 0 && (parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 11) {
      parentNode = parent.parentNode;
    }
    return parentNode;
  }
  /**
   * The part's leading marker node, if any. See `.parentNode` for more
   * information.
   */
  get startNode() {
    return this._$startNode;
  }
  /**
   * The part's trailing marker node, if any. See `.parentNode` for more
   * information.
   */
  get endNode() {
    return this._$endNode;
  }
  _$setValue(value, directiveParent = this) {
    var _a2;
    if (DEV_MODE && this.parentNode === null) {
      throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
    }
    value = resolveDirective(this, value, directiveParent);
    if (isPrimitive(value)) {
      if (value === nothing || value == null || value === "") {
        if (this._$committedValue !== nothing) {
          debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
            kind: "commit nothing to child",
            start: this._$startNode,
            end: this._$endNode,
            parent: this._$parent,
            options: this.options
          });
          this._$clear();
        }
        this._$committedValue = nothing;
      } else if (value !== this._$committedValue && value !== noChange) {
        this._commitText(value);
      }
    } else if (value["_$litType$"] !== void 0) {
      this._commitTemplateResult(value);
    } else if (value.nodeType !== void 0) {
      if (DEV_MODE && ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.host) === value) {
        this._commitText(`[probable mistake: rendered a template's host in itself (commonly caused by writing \${this} in a template]`);
        console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
        return;
      }
      this._commitNode(value);
    } else if (isIterable(value)) {
      this._commitIterable(value);
    } else {
      this._commitText(value);
    }
  }
  _insert(node) {
    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
  }
  _commitNode(value) {
    var _a2;
    if (this._$committedValue !== value) {
      this._$clear();
      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
        const parentNodeName = (_a2 = this._$startNode.parentNode) === null || _a2 === void 0 ? void 0 : _a2.nodeName;
        if (parentNodeName === "STYLE" || parentNodeName === "SCRIPT") {
          let message = "Forbidden";
          if (DEV_MODE) {
            if (parentNodeName === "STYLE") {
              message = `Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css\`...\` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.`;
            } else {
              message = `Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.`;
            }
          }
          throw new Error(message);
        }
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit node",
        start: this._$startNode,
        parent: this._$parent,
        value,
        options: this.options
      });
      this._$committedValue = this._insert(value);
    }
  }
  _commitText(value) {
    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {
      const node = wrap(this._$startNode).nextSibling;
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(node, "data", "property");
        }
        value = this._textSanitizer(value);
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit text",
        node,
        value,
        options: this.options
      });
      node.data = value;
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        const textNode = d.createTextNode("");
        this._commitNode(textNode);
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(textNode, "data", "property");
        }
        value = this._textSanitizer(value);
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "commit text",
          node: textNode,
          value,
          options: this.options
        });
        textNode.data = value;
      } else {
        this._commitNode(d.createTextNode(value));
        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
          kind: "commit text",
          node: wrap(this._$startNode).nextSibling,
          value,
          options: this.options
        });
      }
    }
    this._$committedValue = value;
  }
  _commitTemplateResult(result) {
    var _a2;
    const { values, ["_$litType$"]: type } = result;
    const template = typeof type === "number" ? this._$getTemplate(result) : (type.el === void 0 && (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)), type);
    if (((_a2 = this._$committedValue) === null || _a2 === void 0 ? void 0 : _a2._$template) === template) {
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template updating",
        template,
        instance: this._$committedValue,
        parts: this._$committedValue._$parts,
        options: this.options,
        values
      });
      this._$committedValue._update(values);
    } else {
      const instance = new TemplateInstance(template, this);
      const fragment = instance._clone(this.options);
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template instantiated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      instance._update(values);
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "template instantiated and updated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      this._commitNode(fragment);
      this._$committedValue = instance;
    }
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @internal */
  _$getTemplate(result) {
    let template = templateCache.get(result.strings);
    if (template === void 0) {
      templateCache.set(result.strings, template = new Template(result));
    }
    return template;
  }
  _commitIterable(value) {
    if (!isArray(this._$committedValue)) {
      this._$committedValue = [];
      this._$clear();
    }
    const itemParts = this._$committedValue;
    let partIndex = 0;
    let itemPart;
    for (const item of value) {
      if (partIndex === itemParts.length) {
        itemParts.push(itemPart = new _ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
      } else {
        itemPart = itemParts[partIndex];
      }
      itemPart._$setValue(item);
      partIndex++;
    }
    if (partIndex < itemParts.length) {
      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
      itemParts.length = partIndex;
    }
  }
  /**
   * Removes the nodes contained within this Part from the DOM.
   *
   * @param start Start node to clear from, for clearing a subset of the part's
   *     DOM (used when truncating iterables)
   * @param from  When `start` is specified, the index within the iterable from
   *     which ChildParts are being removed, used for disconnecting directives in
   *     those Parts.
   *
   * @internal
   */
  _$clear(start = wrap(this._$startNode).nextSibling, from) {
    var _a2;
    (_a2 = this._$notifyConnectionChanged) === null || _a2 === void 0 ? void 0 : _a2.call(this, false, true, from);
    while (start && start !== this._$endNode) {
      const n = wrap(start).nextSibling;
      wrap(start).remove();
      start = n;
    }
  }
  /**
   * Implementation of RootPart's `isConnected`. Note that this metod
   * should only be called on `RootPart`s (the `ChildPart` returned from a
   * top-level `render()` call). It has no effect on non-root ChildParts.
   * @param isConnected Whether to set
   * @internal
   */
  setConnected(isConnected) {
    var _a2;
    if (this._$parent === void 0) {
      this.__isConnected = isConnected;
      (_a2 = this._$notifyConnectionChanged) === null || _a2 === void 0 ? void 0 : _a2.call(this, isConnected);
    } else if (DEV_MODE) {
      throw new Error("part.setConnected() may only be called on a RootPart returned from render().");
    }
  }
};
var AttributePart = class {
  constructor(element, name15, strings, parent, options) {
    this.type = ATTRIBUTE_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this.element = element;
    this.name = name15;
    this._$parent = parent;
    this.options = options;
    if (strings.length > 2 || strings[0] !== "" || strings[1] !== "") {
      this._$committedValue = new Array(strings.length - 1).fill(new String());
      this.strings = strings;
    } else {
      this._$committedValue = nothing;
    }
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._sanitizer = void 0;
    }
  }
  get tagName() {
    return this.element.tagName;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /**
   * Sets the value of this part by resolving the value from possibly multiple
   * values and static strings and committing it to the DOM.
   * If this part is single-valued, `this._strings` will be undefined, and the
   * method will be called with a single value argument. If this part is
   * multi-value, `this._strings` will be defined, and the method is called
   * with the value array of the part's owning TemplateInstance, and an offset
   * into the value array from which the values should be read.
   * This method is overloaded this way to eliminate short-lived array slices
   * of the template instance values, and allow a fast-path for single-valued
   * parts.
   *
   * @param value The part value, or an array of values for multi-valued parts
   * @param valueIndex the index to start reading values from. `undefined` for
   *   single-valued parts
   * @param noCommit causes the part to not commit its value to the DOM. Used
   *   in hydration to prime attribute parts with their first-rendered value,
   *   but not set the attribute, and in SSR to no-op the DOM operation and
   *   capture the value for serialization.
   *
   * @internal
   */
  _$setValue(value, directiveParent = this, valueIndex, noCommit) {
    const strings = this.strings;
    let change = false;
    if (strings === void 0) {
      value = resolveDirective(this, value, directiveParent, 0);
      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;
      if (change) {
        this._$committedValue = value;
      }
    } else {
      const values = value;
      value = strings[0];
      let i, v;
      for (i = 0; i < strings.length - 1; i++) {
        v = resolveDirective(this, values[valueIndex + i], directiveParent, i);
        if (v === noChange) {
          v = this._$committedValue[i];
        }
        change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);
        if (v === nothing) {
          value = nothing;
        } else if (value !== nothing) {
          value += (v !== null && v !== void 0 ? v : "") + strings[i + 1];
        }
        this._$committedValue[i] = v;
      }
    }
    if (change && !noCommit) {
      this._commitValue(value);
    }
  }
  /** @internal */
  _commitValue(value) {
    if (value === nothing) {
      wrap(this.element).removeAttribute(this.name);
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._sanitizer === void 0) {
          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "attribute");
        }
        value = this._sanitizer(value !== null && value !== void 0 ? value : "");
      }
      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
        kind: "commit attribute",
        element: this.element,
        name: this.name,
        value,
        options: this.options
      });
      wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : "");
    }
  }
};
var PropertyPart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = PROPERTY_PART;
  }
  /** @internal */
  _commitValue(value) {
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      if (this._sanitizer === void 0) {
        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "property");
      }
      value = this._sanitizer(value);
    }
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit property",
      element: this.element,
      name: this.name,
      value,
      options: this.options
    });
    this.element[this.name] = value === nothing ? void 0 : value;
  }
};
var emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : "";
var BooleanAttributePart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = BOOLEAN_ATTRIBUTE_PART;
  }
  /** @internal */
  _commitValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit boolean attribute",
      element: this.element,
      name: this.name,
      value: !!(value && value !== nothing),
      options: this.options
    });
    if (value && value !== nothing) {
      wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute);
    } else {
      wrap(this.element).removeAttribute(this.name);
    }
  }
};
var EventPart = class extends AttributePart {
  constructor(element, name15, strings, parent, options) {
    super(element, name15, strings, parent, options);
    this.type = EVENT_PART;
    if (DEV_MODE && this.strings !== void 0) {
      throw new Error(`A \`<${element.localName}>\` has a \`@${name15}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`);
    }
  }
  // EventPart does not use the base _$setValue/_resolveValue implementation
  // since the dirty checking is more complex
  /** @internal */
  _$setValue(newListener, directiveParent = this) {
    var _a2;
    newListener = (_a2 = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a2 !== void 0 ? _a2 : nothing;
    if (newListener === noChange) {
      return;
    }
    const oldListener = this._$committedValue;
    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;
    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit event listener",
      element: this.element,
      name: this.name,
      value: newListener,
      options: this.options,
      removeListener: shouldRemoveListener,
      addListener: shouldAddListener,
      oldListener
    });
    if (shouldRemoveListener) {
      this.element.removeEventListener(this.name, this, oldListener);
    }
    if (shouldAddListener) {
      this.element.addEventListener(this.name, this, newListener);
    }
    this._$committedValue = newListener;
  }
  handleEvent(event) {
    var _a2, _b2;
    if (typeof this._$committedValue === "function") {
      this._$committedValue.call((_b2 = (_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.host) !== null && _b2 !== void 0 ? _b2 : this.element, event);
    } else {
      this._$committedValue.handleEvent(event);
    }
  }
};
var ElementPart = class {
  constructor(element, parent, options) {
    this.element = element;
    this.type = ELEMENT_PART;
    this._$disconnectableChildren = void 0;
    this._$parent = parent;
    this.options = options;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  _$setValue(value) {
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
      kind: "commit to element binding",
      element: this.element,
      value,
      options: this.options
    });
    resolveDirective(this, value);
  }
};
var polyfillSupport = DEV_MODE ? global.litHtmlPolyfillSupportDevMode : global.litHtmlPolyfillSupport;
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport(Template, ChildPart);
((_d = global.litHtmlVersions) !== null && _d !== void 0 ? _d : global.litHtmlVersions = []).push("2.8.0");
if (DEV_MODE && global.litHtmlVersions.length > 1) {
  issueWarning("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
}
var render = (value, container, options) => {
  var _a2, _b2;
  if (DEV_MODE && container == null) {
    throw new TypeError(`The container to render into may not be ${container}`);
  }
  const renderId = DEV_MODE ? debugLogRenderId++ : 0;
  const partOwnerNode = (_a2 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a2 !== void 0 ? _a2 : container;
  let part = partOwnerNode["_$litPart$"];
  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: "begin render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  if (part === void 0) {
    const endNode = (_b2 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b2 !== void 0 ? _b2 : null;
    partOwnerNode["_$litPart$"] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, void 0, options !== null && options !== void 0 ? options : {});
  }
  part._$setValue(value);
  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({
    kind: "end render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
  render.setSanitizer = setSanitizer;
  render.createSanitizer = createSanitizer;
  if (DEV_MODE) {
    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
  }
}

// node_modules/lit-html/development/static.js
var brand = Symbol.for("");
var unwrapStaticValue = (value) => {
  if ((value === null || value === void 0 ? void 0 : value.r) !== brand) {
    return void 0;
  }
  return value === null || value === void 0 ? void 0 : value["_$litStatic$"];
};
var unsafeStatic = (value) => ({
  ["_$litStatic$"]: value,
  r: brand
});
var stringsCache = /* @__PURE__ */ new Map();
var withStatic = (coreTag) => (strings, ...values) => {
  const l = values.length;
  let staticValue;
  let dynamicValue;
  const staticStrings = [];
  const dynamicValues = [];
  let i = 0;
  let hasStatics = false;
  let s;
  while (i < l) {
    s = strings[i];
    while (i < l && (dynamicValue = values[i], staticValue = unwrapStaticValue(dynamicValue)) !== void 0) {
      s += staticValue + strings[++i];
      hasStatics = true;
    }
    if (i !== l) {
      dynamicValues.push(dynamicValue);
    }
    staticStrings.push(s);
    i++;
  }
  if (i === l) {
    staticStrings.push(strings[l]);
  }
  if (hasStatics) {
    const key = staticStrings.join("$$lit$$");
    strings = stringsCache.get(key);
    if (strings === void 0) {
      staticStrings.raw = staticStrings;
      stringsCache.set(key, strings = staticStrings);
    }
    values = dynamicValues;
  }
  return coreTag(strings, ...values);
};
var html2 = withStatic(html);
var svg2 = withStatic(svg);

// node_modules/@ui5/webcomponents-base/dist/CustomElementsScope.js
var LitStatic = class {
};
LitStatic.html = html2;
LitStatic.svg = svg2;
LitStatic.unsafeStatic = unsafeStatic;
registerFeature("LitStatic", LitStatic);

// node_modules/@ui5/webcomponents-base/dist/delegate/ResizeHandler.js
var resizeObserver;
var observedElements = /* @__PURE__ */ new Map();
var getResizeObserver = () => {
  if (!resizeObserver) {
    resizeObserver = new window.ResizeObserver((entries) => {
      window.requestAnimationFrame(() => {
        entries.forEach((entry) => {
          const callbacks = observedElements.get(entry.target);
          callbacks && Promise.all(callbacks.map((callback) => callback()));
        });
      });
    });
  }
  return resizeObserver;
};
var observe = (element, callback) => {
  const callbacks = observedElements.get(element) || [];
  if (!callbacks.length) {
    getResizeObserver().observe(element);
  }
  observedElements.set(element, [...callbacks, callback]);
};
var unobserve = (element, callback) => {
  const callbacks = observedElements.get(element) || [];
  if (callbacks.length === 0) {
    return;
  }
  const filteredCallbacks = callbacks.filter((fn) => fn !== callback);
  if (filteredCallbacks.length === 0) {
    getResizeObserver().unobserve(element);
    observedElements.delete(element);
  } else {
    observedElements.set(element, filteredCallbacks);
  }
};
var ResizeHandler = class {
  /**
   * @public
   * @param element UI5 Web Component or DOM Element to be observed
   * @param callback Callback to be executed
   */
  static register(element, callback) {
    let effectiveElement = element;
    if (instanceOfUI5Element(effectiveElement)) {
      effectiveElement = effectiveElement.getDomRef();
    }
    if (effectiveElement instanceof HTMLElement) {
      observe(effectiveElement, callback);
    } else {
      console.warn("Cannot register ResizeHandler for element", element);
    }
  }
  /**
   * @public
   * @param element UI5 Web Component or DOM Element to be unobserved
   * @param callback Callback to be removed
   */
  static deregister(element, callback) {
    let effectiveElement = element;
    if (instanceOfUI5Element(effectiveElement)) {
      effectiveElement = effectiveElement.getDomRef();
    }
    if (effectiveElement instanceof HTMLElement) {
      unobserve(effectiveElement, callback);
    } else {
      console.warn("Cannot deregister ResizeHandler for element", element);
    }
  }
};
var ResizeHandler_default = ResizeHandler;

// node_modules/@ui5/webcomponents-base/dist/types/NavigationMode.js
var NavigationMode;
(function(NavigationMode2) {
  NavigationMode2["Auto"] = "Auto";
  NavigationMode2["Vertical"] = "Vertical";
  NavigationMode2["Horizontal"] = "Horizontal";
  NavigationMode2["Paging"] = "Paging";
})(NavigationMode || (NavigationMode = {}));
var NavigationMode_default = NavigationMode;

// node_modules/@ui5/webcomponents-base/dist/types/ItemNavigationBehavior.js
var ItemNavigationBehavior;
(function(ItemNavigationBehavior2) {
  ItemNavigationBehavior2["Static"] = "Static";
  ItemNavigationBehavior2["Cyclic"] = "Cyclic";
})(ItemNavigationBehavior || (ItemNavigationBehavior = {}));
var ItemNavigationBehavior_default = ItemNavigationBehavior;

// node_modules/@ui5/webcomponents-base/dist/delegate/ItemNavigation.js
var ItemNavigation = class {
  /**
   *
   * @param rootWebComponent the component to operate on (component that slots or contains within its shadow root the items the user navigates among)
   * @param {ItemNavigationOptions} options Object with configuration options:
   *  - currentIndex: the index of the item that will be initially selected (from which navigation will begin)
   *  - navigationMode (Auto|Horizontal|Vertical): whether the items are displayed horizontally (Horizontal), vertically (Vertical) or as a matrix (Auto) meaning the user can navigate in both directions (up/down and left/right)
   *  - rowSize: tells how many items per row there are when the items are not rendered as a flat list but rather as a matrix. Relevant for navigationMode=Auto
   * 	- skipItemsSize: tells how many items upon PAGE_UP and PAGE_DOWN should be skipped to applying the focus on the next item
   *  - behavior (Static|Cycling): tells what to do when trying to navigate beyond the first and last items
   *    Static means that nothing happens if the user tries to navigate beyond the first/last item.
   *    Cycling means that when the user navigates beyond the last item they go to the first and vice versa.
   *  - getItemsCallback: function that, when called, returns an array with all items the user can navigate among
   *  - affectedPropertiesNames: a list of metadata properties on the root component which, upon user navigation, will be reassigned by address thus causing the root component to invalidate
   */
  constructor(rootWebComponent, options) {
    if (!rootWebComponent.isUI5Element) {
      throw new Error("The root web component must be a UI5 Element instance");
    }
    this.rootWebComponent = rootWebComponent;
    this.rootWebComponent.addEventListener("keydown", this._onkeydown.bind(this));
    this._initBound = this._init.bind(this);
    this.rootWebComponent.attachComponentStateFinalized(this._initBound);
    if (typeof options.getItemsCallback !== "function") {
      throw new Error("getItemsCallback is required");
    }
    this._getItems = options.getItemsCallback;
    this._currentIndex = options.currentIndex || 0;
    this._rowSize = options.rowSize || 1;
    this._behavior = options.behavior || ItemNavigationBehavior_default.Static;
    this._navigationMode = options.navigationMode || NavigationMode_default.Auto;
    this._affectedPropertiesNames = options.affectedPropertiesNames || [];
    this._skipItemsSize = options.skipItemsSize || null;
  }
  /**
   * Call this method to set a new "current" (selected) item in the item navigation
   * Note: the item passed to this function must be one of the items, returned by the getItemsCallback function
   *
   * @public
   * @param current the new selected item
   */
  setCurrentItem(current) {
    const currentItemIndex = this._getItems().indexOf(current);
    if (currentItemIndex === -1) {
      console.warn(`The provided item is not managed by ItemNavigation`, current);
      return;
    }
    this._currentIndex = currentItemIndex;
    this._applyTabIndex();
  }
  /**
   * Call this method to dynamically change the row size
   *
   * @public
   * @param newRowSize
   */
  setRowSize(newRowSize) {
    this._rowSize = newRowSize;
  }
  _init() {
    this._getItems().forEach((item, idx) => {
      item.forcedTabIndex = idx === this._currentIndex ? "0" : "-1";
    });
  }
  _onkeydown(event) {
    if (!this._canNavigate()) {
      return;
    }
    const horizontalNavigationOn = this._navigationMode === NavigationMode_default.Horizontal || this._navigationMode === NavigationMode_default.Auto;
    const verticalNavigationOn = this._navigationMode === NavigationMode_default.Vertical || this._navigationMode === NavigationMode_default.Auto;
    const isRTL = this.rootWebComponent.effectiveDir === "rtl";
    if (isRTL && isLeft(event) && horizontalNavigationOn) {
      this._handleRight();
    } else if (isRTL && isRight(event) && horizontalNavigationOn) {
      this._handleLeft();
    } else if (isLeft(event) && horizontalNavigationOn) {
      this._handleLeft();
    } else if (isRight(event) && horizontalNavigationOn) {
      this._handleRight();
    } else if (isUp(event) && verticalNavigationOn) {
      this._handleUp();
    } else if (isDown(event) && verticalNavigationOn) {
      this._handleDown();
    } else if (isHome(event)) {
      this._handleHome();
    } else if (isEnd(event)) {
      this._handleEnd();
    } else if (isPageUp(event)) {
      this._handlePageUp();
    } else if (isPageDown(event)) {
      this._handlePageDown();
    } else {
      return;
    }
    event.preventDefault();
    this._applyTabIndex();
    this._focusCurrentItem();
  }
  _handleUp() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex - this._rowSize >= 0) {
      this._currentIndex -= this._rowSize;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      const firstItemInThisColumnIndex = this._currentIndex % this._rowSize;
      const firstItemInPreviousColumnIndex = firstItemInThisColumnIndex === 0 ? this._rowSize - 1 : firstItemInThisColumnIndex - 1;
      const rows = Math.ceil(itemsLength / this._rowSize);
      let lastItemInPreviousColumnIndex = firstItemInPreviousColumnIndex + (rows - 1) * this._rowSize;
      if (lastItemInPreviousColumnIndex > itemsLength - 1) {
        lastItemInPreviousColumnIndex -= this._rowSize;
      }
      this._currentIndex = lastItemInPreviousColumnIndex;
    } else {
      this._currentIndex = 0;
    }
  }
  _handleDown() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex + this._rowSize < itemsLength) {
      this._currentIndex += this._rowSize;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      const firstItemInThisColumnIndex = this._currentIndex % this._rowSize;
      const firstItemInNextColumnIndex = (firstItemInThisColumnIndex + 1) % this._rowSize;
      this._currentIndex = firstItemInNextColumnIndex;
    } else {
      this._currentIndex = itemsLength - 1;
    }
  }
  _handleLeft() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex > 0) {
      this._currentIndex -= 1;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      this._currentIndex = itemsLength - 1;
    }
  }
  _handleRight() {
    const itemsLength = this._getItems().length;
    if (this._currentIndex < itemsLength - 1) {
      this._currentIndex += 1;
      return;
    }
    if (this._behavior === ItemNavigationBehavior_default.Cyclic) {
      this._currentIndex = 0;
    }
  }
  _handleHome() {
    const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;
    this._currentIndex -= this._currentIndex % homeEndRange;
  }
  _handleEnd() {
    const homeEndRange = this._rowSize > 1 ? this._rowSize : this._getItems().length;
    this._currentIndex += homeEndRange - 1 - this._currentIndex % homeEndRange;
  }
  _handlePageUp() {
    if (this._rowSize > 1) {
      return;
    }
    this._handlePageUpFlat();
  }
  _handlePageDown() {
    if (this._rowSize > 1) {
      return;
    }
    this._handlePageDownFlat();
  }
  /**
   * Handles PAGE_UP in a flat list-like structure, both vertically and horizontally.
   */
  _handlePageUpFlat() {
    if (this._skipItemsSize === null) {
      this._currentIndex -= this._currentIndex;
      return;
    }
    if (this._currentIndex + 1 > this._skipItemsSize) {
      this._currentIndex -= this._skipItemsSize;
    } else {
      this._currentIndex -= this._currentIndex;
    }
  }
  /**
   * Handles PAGE_DOWN in a flat list-like structure, both vertically and horizontally.
   */
  _handlePageDownFlat() {
    if (this._skipItemsSize === null) {
      this._currentIndex = this._getItems().length - 1;
      return;
    }
    const currentToEndRange = this._getItems().length - this._currentIndex - 1;
    if (currentToEndRange > this._skipItemsSize) {
      this._currentIndex += this._skipItemsSize;
    } else {
      this._currentIndex = this._getItems().length - 1;
    }
  }
  _applyTabIndex() {
    const items = this._getItems();
    for (let i = 0; i < items.length; i++) {
      items[i].forcedTabIndex = i === this._currentIndex ? "0" : "-1";
    }
    this._affectedPropertiesNames.forEach((propName) => {
      const prop = this.rootWebComponent[propName];
      this.rootWebComponent[propName] = Array.isArray(prop) ? [...prop] : { ...prop };
    });
  }
  _focusCurrentItem() {
    const currentItem = this._getCurrentItem();
    if (currentItem) {
      currentItem.focus();
    }
  }
  _canNavigate() {
    const currentItem = this._getCurrentItem();
    const activeElement = getActiveElement_default();
    return currentItem && currentItem === activeElement;
  }
  _getCurrentItem() {
    const items = this._getItems();
    if (!items.length) {
      return;
    }
    while (this._currentIndex >= items.length) {
      this._currentIndex -= this._rowSize;
    }
    if (this._currentIndex < 0) {
      this._currentIndex = 0;
    }
    const currentItem = items[this._currentIndex];
    if (!currentItem) {
      return;
    }
    if (instanceOfUI5Element(currentItem)) {
      return currentItem.getFocusDomRef();
    }
    const currentItemDOMRef = this.rootWebComponent.getDomRef();
    if (!currentItemDOMRef) {
      return;
    }
    if (currentItem.id) {
      return currentItemDOMRef.querySelector(`[id="${currentItem.id}"]`);
    }
  }
};
var ItemNavigation_default = ItemNavigation;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/DragRegistry.js
var draggedElement = null;
var globalHandlersAttached = false;
var subscribers = /* @__PURE__ */ new Set();
var selfManagedDragAreas = /* @__PURE__ */ new Set();
var ondragstart = (e) => {
  if (!e.dataTransfer || !(e.target instanceof HTMLElement)) {
    return;
  }
  if (!selfManagedDragAreas.has(e.target)) {
    draggedElement = e.target;
  }
};
var ondragend = () => {
  draggedElement = null;
};
var ondrop = () => {
  draggedElement = null;
};
var setDraggedElement = (element) => {
  draggedElement = element;
};
var getDraggedElement = () => {
  return draggedElement;
};
var attachGlobalHandlers = () => {
  if (globalHandlersAttached) {
    return;
  }
  document.body.addEventListener("dragstart", ondragstart);
  document.body.addEventListener("dragend", ondragend);
  document.body.addEventListener("drop", ondrop);
};
var detachGlobalHandlers = () => {
  document.body.removeEventListener("dragstart", ondragstart);
  document.body.removeEventListener("dragend", ondragend);
  document.body.removeEventListener("drop", ondrop);
  globalHandlersAttached = false;
};
var subscribe = (subscriber) => {
  subscribers.add(subscriber);
  if (!globalHandlersAttached) {
    attachGlobalHandlers();
  }
};
var unsubscribe = (subscriber) => {
  subscribers.delete(subscriber);
  if (subscribers.size === 0 && globalHandlersAttached) {
    detachGlobalHandlers();
  }
};
var addSelfManagedArea = (area) => {
  selfManagedDragAreas.add(area);
  return setDraggedElement;
};
var removeSelfManagedArea = (area) => {
  selfManagedDragAreas.delete(area);
};
var DragRegistry = {
  subscribe,
  unsubscribe,
  addSelfManagedArea,
  removeSelfManagedArea,
  getDraggedElement
};
var DragRegistry_default = DragRegistry;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/handleDragOver.js
function handleDragOver(e, component, position, target, settings = {}) {
  const draggedElement2 = DragRegistry_default.getDraggedElement();
  const dragOverResult = {
    targetReference: null,
    placement: null
  };
  if (!draggedElement2 && !(settings == null ? void 0 : settings.crossDnD)) {
    return dragOverResult;
  }
  const placements = position.placements;
  dragOverResult.targetReference = e.target;
  const placementAccepted = placements.some((placement) => {
    const originalEvent = settings.originalEvent ? { originalEvent: e } : {};
    const beforeItemMovePrevented = !component.fireDecoratorEvent("move-over", {
      ...originalEvent,
      source: {
        element: draggedElement2
      },
      destination: {
        element: target,
        placement
      }
    });
    if (beforeItemMovePrevented) {
      e.preventDefault();
      dragOverResult.targetReference = position.element;
      dragOverResult.placement = placement;
      return true;
    }
    return false;
  });
  if (!placementAccepted) {
    dragOverResult.targetReference = null;
  }
  return dragOverResult;
}
var handleDragOver_default = handleDragOver;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/handleDrop.js
function handleDrop(e, component, target, placement, settings = {}) {
  e.preventDefault();
  const draggedElement2 = DragRegistry_default.getDraggedElement();
  if (!draggedElement2 && (settings == null ? void 0 : settings.crossDnD)) {
    return;
  }
  const originalEvent = settings.originalEvent ? { originalEvent: e } : {};
  component.fireDecoratorEvent("move", {
    ...originalEvent,
    source: {
      element: draggedElement2
    },
    destination: {
      element: target,
      placement
    }
  });
  draggedElement2 == null ? void 0 : draggedElement2.focus();
}
var handleDrop_default = handleDrop;

// node_modules/@ui5/webcomponents-base/dist/types/Orientation.js
var Orientation;
(function(Orientation2) {
  Orientation2["Vertical"] = "Vertical";
  Orientation2["Horizontal"] = "Horizontal";
})(Orientation || (Orientation = {}));
var Orientation_default = Orientation;

// node_modules/@ui5/webcomponents-base/dist/types/MovePlacement.js
var MovePlacement;
(function(MovePlacement2) {
  MovePlacement2["On"] = "On";
  MovePlacement2["Before"] = "Before";
  MovePlacement2["After"] = "After";
})(MovePlacement || (MovePlacement = {}));
var MovePlacement_default = MovePlacement;

// node_modules/@ui5/webcomponents-base/dist/util/dragAndDrop/findClosestPosition.js
var closestPlacement = (point, beforePoint, centerPoint, afterPoint) => {
  const distToBeforePoint = Math.abs(point - beforePoint);
  const distToCenterPoint = Math.abs(point - centerPoint);
  const distToAfterPoint = Math.abs(point - afterPoint);
  const closestPoint = Math.min(distToBeforePoint, distToCenterPoint, distToAfterPoint);
  let placements = [];
  switch (closestPoint) {
    case distToBeforePoint:
      placements = [MovePlacement_default.Before];
      break;
    case distToCenterPoint:
      placements = [MovePlacement_default.On, distToBeforePoint < distToAfterPoint ? MovePlacement_default.Before : MovePlacement_default.After];
      break;
    case distToAfterPoint:
      placements = [MovePlacement_default.After];
      break;
  }
  return placements;
};
var findClosestPosition = (elements, point, layoutOrientation) => {
  let shortestDist = Number.POSITIVE_INFINITY;
  let closestElement = null;
  for (let i = 0; i < elements.length; i++) {
    const el = elements[i];
    const { left: left2, width: width2, top: top2, height: height2 } = el.getBoundingClientRect();
    let elemCenter;
    if (layoutOrientation === Orientation_default.Vertical) {
      elemCenter = top2 + height2 / 2;
    } else {
      elemCenter = left2 + width2 / 2;
    }
    const distanceToCenter = Math.abs(point - elemCenter);
    if (distanceToCenter < shortestDist) {
      shortestDist = distanceToCenter;
      closestElement = el;
    }
  }
  if (!closestElement) {
    return null;
  }
  const { width, height, left, right, top, bottom } = closestElement.getBoundingClientRect();
  let placements;
  if (layoutOrientation === Orientation_default.Vertical) {
    placements = closestPlacement(point, top, top + height / 2, bottom);
  } else {
    placements = closestPlacement(point, left, left + width / 2, right);
  }
  return {
    element: closestElement,
    placements
  };
};
var _moveBackward = (elements, index) => {
  index--;
  if (index < 0) {
    return [];
  }
  return [{
    element: elements[index],
    placement: MovePlacement_default.Before
  }];
};
var _moveForward = (elements, index) => {
  index++;
  if (index >= elements.length) {
    return [];
  }
  return [{
    element: elements[index],
    placement: MovePlacement_default.After
  }];
};
var keyToPlacement = {
  ArrowLeft: _moveBackward,
  ArrowUp: _moveBackward,
  ArrowRight: _moveForward,
  ArrowDown: _moveForward,
  Home: (elements, index) => {
    return elements.slice(0, index).map((el) => ({
      element: el,
      placement: MovePlacement_default.Before
    }));
  },
  End: (elements, index) => {
    return elements.slice(index + 1, elements.length).reverse().map((el) => ({
      element: el,
      placement: MovePlacement_default.After
    }));
  }
};
var findClosestPositionsByKey = (elements, element, e) => {
  if (isMovingKey(e.key)) {
    return keyToPlacement[e.key](elements, elements.indexOf(element));
  }
  return [];
};
var isMovingKey = (key) => {
  return key in keyToPlacement;
};

// node_modules/@ui5/webcomponents-base/dist/util/getNormalizedTarget.js
var getNormalizedTarget = (target) => {
  let element = target;
  if (target.shadowRoot && target.shadowRoot.activeElement) {
    element = target.shadowRoot.activeElement;
  }
  return element;
};
var getNormalizedTarget_default = getNormalizedTarget;

// node_modules/@ui5/webcomponents-base/dist/util/getEffectiveScrollbarStyle.js
var NO_SCROLLBAR_STYLE_CLASS = "ui5-content-native-scrollbars";
var isSSR = typeof document === "undefined";
var getEffectiveScrollbarStyle = () => {
  if (isSSR || document.body.classList.contains(NO_SCROLLBAR_STYLE_CLASS)) {
    return "";
  }
  return `::-webkit-scrollbar:horizontal {
	height: var(--sapScrollBar_Dimension);
}

::-webkit-scrollbar:vertical {
	width: var(--sapScrollBar_Dimension);
}

::-webkit-scrollbar {
	background-color: var(--sapScrollBar_TrackColor);
	border-left: none;
}

::-webkit-scrollbar-thumb {
	border-radius: var(--sapElement_BorderCornerRadius);
	background-color: var(--sapScrollBar_FaceColor);
}

::-webkit-scrollbar-thumb:hover {
	background-color: var(--sapScrollBar_Hover_FaceColor);
}

::-webkit-scrollbar-corner {
	background-color: var(--sapScrollBar_TrackColor);
}`;
};
var getEffectiveScrollbarStyle_default = getEffectiveScrollbarStyle;

// node_modules/@ui5/webcomponents-base/dist/util/debounce.js
var debounceInterval = null;
var debounce = (fn, delay) => {
  debounceInterval && clearTimeout(debounceInterval);
  debounceInterval = setTimeout(() => {
    debounceInterval = null;
    fn();
  }, delay);
};
var debounce_default = debounce;

// node_modules/@ui5/webcomponents-base/dist/util/isElementInView.js
var isElementInView = (el) => {
  const rect = el.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};
var isElementInView_default = isElementInView;

// node_modules/@ui5/webcomponents/dist/types/ListSelectionMode.js
var ListSelectionMode;
(function(ListSelectionMode2) {
  ListSelectionMode2["None"] = "None";
  ListSelectionMode2["Single"] = "Single";
  ListSelectionMode2["SingleStart"] = "SingleStart";
  ListSelectionMode2["SingleEnd"] = "SingleEnd";
  ListSelectionMode2["SingleAuto"] = "SingleAuto";
  ListSelectionMode2["Multiple"] = "Multiple";
  ListSelectionMode2["Delete"] = "Delete";
})(ListSelectionMode || (ListSelectionMode = {}));
var ListSelectionMode_default = ListSelectionMode;

// node_modules/@ui5/webcomponents/dist/types/ListGrowingMode.js
var ListGrowingMode;
(function(ListGrowingMode2) {
  ListGrowingMode2["Button"] = "Button";
  ListGrowingMode2["Scroll"] = "Scroll";
  ListGrowingMode2["None"] = "None";
})(ListGrowingMode || (ListGrowingMode = {}));
var ListGrowingMode_default = ListGrowingMode;

// node_modules/@ui5/webcomponents/dist/types/ListAccessibleRole.js
var ListAccessibleRole;
(function(ListAccessibleRole2) {
  ListAccessibleRole2["List"] = "List";
  ListAccessibleRole2["Menu"] = "Menu";
  ListAccessibleRole2["Tree"] = "Tree";
  ListAccessibleRole2["ListBox"] = "ListBox";
})(ListAccessibleRole || (ListAccessibleRole = {}));
var ListAccessibleRole_default = ListAccessibleRole;

// node_modules/@ui5/webcomponents/dist/types/ListSeparator.js
var ListSeparator;
(function(ListSeparator2) {
  ListSeparator2["All"] = "All";
  ListSeparator2["Inner"] = "Inner";
  ListSeparator2["None"] = "None";
})(ListSeparator || (ListSeparator = {}));
var ListSeparator_default = ListSeparator;

// node_modules/@ui5/webcomponents/dist/DropIndicatorTemplate.js
function DropIndicatorTemplate() {
  return jsx("div", { class: {
    "ui5-di-rect": this.placement === MovePlacement_default.On,
    "ui5-di-needle": this.placement !== MovePlacement_default.On
  } });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/DropIndicator.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var DropIndicator_css_default = `:host{position:absolute;pointer-events:none;z-index:99}:host([orientation="Vertical"]) .ui5-di-needle{width:.125rem;height:100%;inset-block:0;background:var(--sapContent_DragAndDropActiveColor)}:host([orientation="Vertical"]){margin-left:-.0625rem}:host([orientation="Horizontal"]) .ui5-di-needle{height:.125rem;width:100%;inset-inline:0;background:var(--sapContent_DragAndDropActiveColor)}:host([orientation="Horizontal"]){margin-top:-.0625rem}:host([orientation="Horizontal"][placement="Before"][first]){margin-top:.3125rem}:host([orientation="Horizontal"][placement="After"][last]){margin-top:-.3125rem}:host([orientation="Vertical"]) .ui5-di-needle:before{left:-.1875rem;content:"";position:absolute;width:.25rem;height:.25rem;border-radius:.25rem;border:.125rem solid var(--sapContent_DragAndDropActiveColor);background-color:#fff;pointer-events:none}:host([orientation="Horizontal"]) .ui5-di-needle:before{top:-.1875rem;content:"";position:absolute;width:.25rem;height:.25rem;border-radius:.25rem;border:.125rem solid var(--sapContent_DragAndDropActiveColor);background-color:#fff;pointer-events:none}:host .ui5-di-rect{border:.125rem solid var(--sapContent_DragAndDropActiveColor);position:absolute;inset:0}:host .ui5-di-rect:before{content:" ";position:absolute;inset:0;background:var(--sapContent_DragAndDropActiveColor);opacity:.05}
`;

// node_modules/@ui5/webcomponents/dist/DropIndicator.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DropIndicator = class DropIndicator2 extends UI5Element_default {
  get _positionProperty() {
    if (this.orientation === Orientation_default.Vertical) {
      return "left";
    }
    return "top";
  }
  constructor() {
    super();
    this.targetReference = null;
    this.ownerReference = null;
    this.placement = "Before";
    this.orientation = "Vertical";
  }
  onAfterRendering() {
    if (!this.targetReference || !this.ownerReference) {
      Object.assign(this.style, {
        display: "none"
      });
      return;
    }
    const { left, width, right, top, bottom, height } = this.targetReference.getBoundingClientRect();
    const { top: containerTop, height: containerHeight } = this.ownerReference.getBoundingClientRect();
    const style = {
      display: "",
      [this._positionProperty]: "",
      width: "",
      height: ""
    };
    let position = 0;
    let isLast = false;
    let isFirst = false;
    if (this.orientation === Orientation_default.Vertical) {
      switch (this.placement) {
        case MovePlacement_default.Before:
          position = left;
          break;
        case MovePlacement_default.On:
          style.width = `${width}px`;
          position = left;
          break;
        case MovePlacement_default.After:
          position = right;
          break;
      }
      style.height = `${height}px`;
    }
    if (this.orientation === Orientation_default.Horizontal) {
      switch (this.placement) {
        case MovePlacement_default.Before:
          position = top;
          break;
        case MovePlacement_default.On:
          style.height = `${height}px`;
          position = top;
          break;
        case MovePlacement_default.After:
          position = bottom;
          break;
      }
      style.width = `${width}px`;
      position -= containerTop;
      if (position <= 0) {
        isFirst = true;
      }
      if (position >= containerHeight) {
        isLast = true;
      }
    }
    style[this._positionProperty] = `${position}px`;
    this.toggleAttribute("first", isFirst);
    this.toggleAttribute("last", isLast);
    Object.assign(this.style, style);
  }
};
__decorate([
  property_default({ type: Object })
], DropIndicator.prototype, "targetReference", void 0);
__decorate([
  property_default({ type: Object })
], DropIndicator.prototype, "ownerReference", void 0);
__decorate([
  property_default()
], DropIndicator.prototype, "placement", void 0);
__decorate([
  property_default()
], DropIndicator.prototype, "orientation", void 0);
DropIndicator = __decorate([
  customElement_default({
    tag: "ui5-drop-indicator",
    renderer: JsxRenderer_default,
    styles: DropIndicator_css_default,
    template: DropIndicatorTemplate
  })
], DropIndicator);
DropIndicator.define();
var DropIndicator_default = DropIndicator;

// node_modules/@ui5/webcomponents/dist/ListTemplate.js
function ListTemplate() {
  return jsx("div", { class: "ui5-list-root", onFocusIn: this._onfocusin, onKeyDown: this._onkeydown, onDragEnter: this._ondragenter, onDragOver: this._ondragover, onDrop: this._ondrop, onDragLeave: this._ondragleave, "onui5-close": this.onItemClose, "onui5-toggle": this.onItemToggle, "onui5-request-tabindex-change": this.onItemTabIndexChange, "onui5-_focused": this.onItemFocused, "onui5-forward-after": this.onForwardAfter, "onui5-forward-before": this.onForwardBefore, "onui5-selection-requested": this.onSelectionRequested, "onui5-focus-requested": this.onFocusRequested, "onui5-_press": this.onItemPress, children: jsxs(BusyIndicator_default, { id: `${this._id}-busyIndicator`, delay: this.loadingDelay, active: this.showBusyIndicatorOverlay, class: "ui5-list-busy-indicator", children: [jsxs("div", { class: "ui5-list-scroll-container", children: [this.header.length > 0 && jsx("slot", { name: "header" }), this.shouldRenderH1 && jsx("header", { id: this.headerID, class: "ui5-list-header", children: this.headerText }), this.hasData && jsx("div", { id: `${this._id}-before`, tabindex: 0, role: "none", class: "ui5-list-focusarea" }), jsx("span", { id: `${this._id}-modeLabel`, class: "ui5-hidden-text", children: this.ariaLabelModeText }), jsxs("ul", { id: `${this._id}-listUl`, class: "ui5-list-ul", role: this.listAccessibleRole, "aria-label": this.ariaLabelTxt, "aria-labelledby": this.ariaLabelledBy, "aria-description": this.ariaDescriptionText, children: [jsx("slot", {}), this.showNoDataText && jsx("li", { tabindex: 0, id: `${this._id}-nodata`, class: "ui5-list-nodata", role: "listitem", children: jsx("div", { id: `${this._id}-nodata-text`, class: "ui5-list-nodata-text", children: this.noDataText }) })] }), this.growsWithButton && moreRow.call(this), this.footerText && jsx("footer", { id: `${this._id}-footer`, class: "ui5-list-footer", children: this.footerText }), this.hasData && jsx("div", { id: `${this._id}-after`, tabindex: 0, role: "none", class: "ui5-list-focusarea" }), jsx("span", { tabindex: -1, "aria-hidden": "true", class: "ui5-list-end-marker" })] }), jsx(DropIndicator_default, { orientation: "Horizontal", ownerReference: this })] }) });
}
function moreRow() {
  return jsx("div", { class: "ui5-growing-button", part: "growing-button", children: jsxs("div", { id: `${this._id}-growing-btn`, role: "button", tabindex: 0, part: "growing-button-inner", class: {
    "ui5-growing-button-inner": true,
    "ui5-growing-button-inner-active": this._loadMoreActive
  }, "aria-labelledby": `${this._id}-growingButton-text`, onClick: this._onLoadMoreClick, onKeyDown: this._onLoadMoreKeydown, onKeyUp: this._onLoadMoreKeyup, onMouseDown: this._onLoadMoreMousedown, onMouseUp: this._onLoadMoreMouseup, children: [this.loading && jsx(BusyIndicator_default, { delay: this.loadingDelay, part: "growing-button-busy-indicator", class: "ui5-list-growing-button-busy-indicator", active: true }), jsx("span", { id: `${this._id}-growingButton-text`, class: "ui5-growing-button-text", "growing-button-text": true, children: this._growingButtonText })] }) });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/List.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var List_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}.ui5-growing-button{display:flex;align-items:center;padding:var(--_ui5-v2-9-0_load_more_padding);border-top:1px solid var(--sapList_BorderColor);border-bottom:var(--_ui5-v2-9-0_load_more_border-bottom);box-sizing:border-box;cursor:pointer;outline:none}.ui5-growing-button-inner{display:flex;align-items:center;justify-content:center;flex-direction:row;min-height:var(--_ui5-v2-9-0_load_more_text_height);width:100%;color:var(--sapButton_TextColor);background-color:var(--sapList_Background);border:var(--_ui5-v2-9-0_load_more_border);border-radius:var(--_ui5-v2-9-0_load_more_border_radius);box-sizing:border-box}.ui5-growing-button-inner:focus-visible{outline:var(--_ui5-v2-9-0_load_more_outline_width) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);outline-offset:-.125rem;border-color:transparent}.ui5-growing-button-inner:hover{background-color:var(--sapList_Hover_Background)}.ui5-growing-button-inner:active,.ui5-growing-button-inner.ui5-growing-button-inner--active{background-color:var(--sapList_Active_Background);border-color:var(--sapList_Active_Background)}.ui5-growing-button-inner:active>*,.ui5-growing-button-inner.ui5-growing-button-inner--active>*{color:var(--sapList_Active_TextColor)}.ui5-growing-button-text{text-align:center;font-family:"72override",var(--sapFontFamily);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;box-sizing:border-box}.ui5-growing-button-text{height:var(--_ui5-v2-9-0_load_more_text_height);padding:.875rem 1rem 1rem;font-size:var(--_ui5-v2-9-0_load_more_text_font_size);font-weight:700}:host([loading]) .ui5-list-growing-button-busy-indicator:not([_is-busy]){display:none}:host([loading]) .ui5-list-growing-button-busy-indicator[_is-busy]+.ui5-growing-button-text{padding-left:.5rem}:host(:not([hidden])){display:block;max-width:100%;width:100%;-webkit-tap-highlight-color:transparent}:host([indent]) .ui5-list-root{padding:2rem}:host([separators="None"]) .ui5-list-nodata{border-bottom:0}.ui5-list-root,.ui5-list-busy-indicator{width:100%;height:100%;position:relative;box-sizing:border-box}.ui5-list-scroll-container{overflow:auto;height:100%;width:100%}.ui5-list-ul{list-style-type:none;padding:0;margin:0}.ui5-list-ul:focus{outline:none}.ui5-list-focusarea{position:fixed}.ui5-list-header{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;font-size:var(--sapFontHeader4Size);font-family:"72override",var(--sapFontFamily);color:var(--sapGroup_TitleTextColor);height:3rem;line-height:3rem;padding:0 1rem;background-color:var(--sapGroup_TitleBackground);border-bottom:1px solid var(--sapGroup_TitleBorderColor)}.ui5-list-footer{height:2rem;box-sizing:border-box;-webkit-text-size-adjust:none;font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);line-height:2rem;background-color:var(--sapList_FooterBackground);color:var(--ui5-v2-9-0_list_footer_text_color);padding:0 1rem;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ui5-list-nodata{list-style-type:none;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;color:var(--sapTextColor);background-color:var(--sapList_Background);border-bottom:1px solid var(--sapList_BorderColor);padding:0 1rem!important;outline:none;min-height:var(--_ui5-v2-9-0_list_no_data_height);font-size:var(--_ui5-v2-9-0_list_no_data_font_size);font-family:"72override",var(--sapFontFamily);position:relative}.ui5-list-nodata:focus:after{content:"";border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);position:absolute;inset:.125rem;pointer-events:none}.ui5-list-nodata-text{overflow:hidden;text-overflow:ellipsis;white-space:normal;margin:var(--_ui5-v2-9-0_list_item_content_vertical_offset) 0}:host([growing="Scroll"]) .ui5-list-end-marker{display:inline-block}
`;

// node_modules/@ui5/webcomponents/dist/ListItemGroupHeaderTemplate.js
function ListItemGroupHeaderTemplate() {
  return jsxs("div", { part: "native-li", role: this.effectiveAccRole, tabindex: this.forcedTabIndex ? parseInt(this.forcedTabIndex) : void 0, class: {
    "ui5-ghli-root": true,
    ...this.classes.main
  }, "aria-label": this.ariaLabelText, "aria-roledescription": this.groupHeaderText, onFocusIn: this._onfocusin, onKeyDown: this._onkeydown, children: [jsx("div", { id: `${this._id}-content`, class: "ui5-li-content", children: jsx("span", { class: "ui5-ghli-title", children: jsx("slot", {}) }) }), this.hasSubItems && jsx("slot", { name: "subItems" })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemGroupHeader.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemGroupHeader_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}:host{height:var(--_ui5-v2-9-0_group_header_list_item_height);background:var(--ui5-v2-9-0-group-header-listitem-background-color);color:var(--sapList_TableGroupHeaderTextColor)}:host([has-border]){border-bottom:var(--sapList_BorderWidth) solid var(--sapList_GroupHeaderBorderColor)}:host([actionable]:not([disabled])){cursor:default}.ui5-li-root.ui5-ghli-root{padding-top:.5rem;color:currentColor;font-size:var(--sapFontHeader6Size);font-weight:400;line-height:2rem;margin:0}.ui5-ghli-title{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;font-weight:700;font-family:var(--sapFontHeaderFamily)}.ui5-li-content{width:100%}
`;

// node_modules/@ui5/webcomponents/dist/types/ListItemAccessibleRole.js
var ListItemAccessibleRole;
(function(ListItemAccessibleRole2) {
  ListItemAccessibleRole2["Group"] = "Group";
  ListItemAccessibleRole2["ListItem"] = "ListItem";
  ListItemAccessibleRole2["MenuItem"] = "MenuItem";
  ListItemAccessibleRole2["TreeItem"] = "TreeItem";
  ListItemAccessibleRole2["Option"] = "Option";
  ListItemAccessibleRole2["None"] = "None";
})(ListItemAccessibleRole || (ListItemAccessibleRole = {}));
var ListItemAccessibleRole_default = ListItemAccessibleRole;

// node_modules/@ui5/webcomponents/dist/ListItemGroupHeader.js
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemGroupHeader_1;
var ListItemGroupHeader = ListItemGroupHeader_1 = class ListItemGroupHeader2 extends ListItemBase_default {
  constructor() {
    super(...arguments);
    this.accessibleRole = ListItemAccessibleRole_default.ListItem;
  }
  get effectiveAccRole() {
    return toLowercaseEnumValue(this.accessibleRole);
  }
  get groupItem() {
    return true;
  }
  get _pressable() {
    return false;
  }
  get groupHeaderText() {
    return ListItemGroupHeader_1.i18nBundle.getText(GROUP_HEADER_TEXT);
  }
  get ariaLabelText() {
    return [this.textContent, this.accessibleName].filter(Boolean).join(" ");
  }
  get hasSubItems() {
    return this.subItems.length > 0;
  }
};
__decorate2([
  property_default()
], ListItemGroupHeader.prototype, "accessibleName", void 0);
__decorate2([
  property_default()
], ListItemGroupHeader.prototype, "accessibleRole", void 0);
__decorate2([
  slot_default()
], ListItemGroupHeader.prototype, "subItems", void 0);
__decorate2([
  i18n_default("@ui5/webcomponents")
], ListItemGroupHeader, "i18nBundle", void 0);
ListItemGroupHeader = ListItemGroupHeader_1 = __decorate2([
  customElement_default({
    tag: "ui5-li-group-header",
    languageAware: true,
    template: ListItemGroupHeaderTemplate,
    styles: [ListItemBase_default.styles, ListItemGroupHeader_css_default]
  })
], ListItemGroupHeader);
ListItemGroupHeader.define();
var ListItemGroupHeader_default = ListItemGroupHeader;

// node_modules/@ui5/webcomponents/dist/ListItemGroupTemplate.js
function ListItemGroupTemplate() {
  return jsxs(Fragment, { children: [this.hasHeader && jsxs(ListItemGroupHeader_default, { focused: this.focused, part: "header", accessibleRole: ListItemAccessibleRole_default.ListItem, children: [this.hasFormattedHeader ? jsx("slot", { name: "header" }) : this.headerText, jsx("div", { role: "list", slot: "subItems", "aria-owns": `${this._id}-content`, "aria-label": this.headerText })] }), jsxs("div", { class: "ui5-group-li-root", onDragEnter: this._ondragenter, onDragOver: this._ondragover, onDrop: this._ondrop, onDragLeave: this._ondragleave, id: `${this._id}-content`, children: [jsx("slot", {}), jsx(DropIndicator_default, { orientation: "Horizontal", ownerReference: this })] })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemGroup.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemGroup_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}:host{height:var(--_ui5-v2-9-0_group_header_list_item_height);background:var(--ui5-v2-9-0-group-header-listitem-background-color);color:var(--sapList_TableGroupHeaderTextColor)}.ui5-group-li-root{width:100%;height:100%;position:relative;box-sizing:border-box;padding:0;margin:0;list-style-type:none}
`;

// node_modules/@ui5/webcomponents/dist/ListItemGroup.js
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemGroup = class ListItemGroup2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.focused = false;
  }
  onEnterDOM() {
    DragRegistry_default.subscribe(this);
  }
  onExitDOM() {
    DragRegistry_default.unsubscribe(this);
  }
  get groupHeaderItem() {
    return this.shadowRoot.querySelector("[ui5-li-group-header]");
  }
  get hasHeader() {
    return !!this.headerText || this.hasFormattedHeader;
  }
  get hasFormattedHeader() {
    return !!this.header.length;
  }
  get isListItemGroup() {
    return true;
  }
  get dropIndicatorDOM() {
    return this.shadowRoot.querySelector("[ui5-drop-indicator]");
  }
  _ondragenter(e) {
    e.preventDefault();
  }
  _ondragleave(e) {
    if (e.relatedTarget instanceof Node && this.shadowRoot.contains(e.relatedTarget)) {
      return;
    }
    this.dropIndicatorDOM.targetReference = null;
  }
  _ondragover(e) {
    const draggedElement2 = DragRegistry_default.getDraggedElement();
    if (!(e.target instanceof HTMLElement) || !draggedElement2) {
      return;
    }
    const closestPosition = findClosestPosition(this.items, e.clientY, Orientation_default.Vertical);
    if (!closestPosition) {
      this.dropIndicatorDOM.targetReference = null;
      return;
    }
    let placements = closestPosition.placements;
    if (closestPosition.element === draggedElement2) {
      placements = placements.filter((placement) => placement !== MovePlacement_default.On);
    }
    const placementAccepted = placements.some((placement) => {
      const beforeItemMovePrevented = !this.fireDecoratorEvent("move-over", {
        source: {
          element: draggedElement2
        },
        destination: {
          element: closestPosition.element,
          placement
        }
      });
      if (beforeItemMovePrevented) {
        e.preventDefault();
        this.dropIndicatorDOM.targetReference = closestPosition.element;
        this.dropIndicatorDOM.placement = placement;
        return true;
      }
      return false;
    });
    if (!placementAccepted) {
      this.dropIndicatorDOM.targetReference = null;
    }
  }
  _ondrop(e) {
    e.preventDefault();
    this.fireDecoratorEvent("move", {
      source: {
        element: DragRegistry_default.getDraggedElement()
      },
      destination: {
        element: this.dropIndicatorDOM.targetReference,
        placement: this.dropIndicatorDOM.placement
      }
    });
    this.dropIndicatorDOM.targetReference = null;
  }
};
__decorate3([
  property_default()
], ListItemGroup.prototype, "headerText", void 0);
__decorate3([
  property_default()
], ListItemGroup.prototype, "headerAccessibleName", void 0);
__decorate3([
  slot_default({
    "default": true,
    invalidateOnChildChange: true,
    type: HTMLElement
  })
], ListItemGroup.prototype, "items", void 0);
__decorate3([
  property_default({ type: Boolean })
], ListItemGroup.prototype, "focused", void 0);
__decorate3([
  slot_default({ type: HTMLElement })
], ListItemGroup.prototype, "header", void 0);
ListItemGroup = __decorate3([
  customElement_default({
    tag: "ui5-li-group",
    renderer: JsxRenderer_default,
    languageAware: true,
    template: ListItemGroupTemplate,
    styles: [ListItemGroup_css_default]
  }),
  event_strict_default("move-over", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("move", {
    bubbles: true
  })
], ListItemGroup);
ListItemGroup.define();
var isInstanceOfListItemGroup = (object) => {
  return "isListItemGroup" in object;
};

// node_modules/@ui5/webcomponents/dist/List.js
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var List_1;
var INFINITE_SCROLL_DEBOUNCE_RATE = 250;
var PAGE_UP_DOWN_SIZE = 10;
var List = List_1 = class List2 extends UI5Element_default {
  constructor() {
    super();
    this.indent = false;
    this.selectionMode = "None";
    this.separators = "All";
    this.growing = "None";
    this.loading = false;
    this.loadingDelay = 1e3;
    this.accessibleRole = "List";
    this._inViewport = false;
    this._loadMoreActive = false;
    this._previouslyFocusedItem = null;
    this._forwardingFocus = false;
    this.resizeListenerAttached = false;
    this.listEndObserved = false;
    this._itemNavigation = new ItemNavigation_default(this, {
      skipItemsSize: PAGE_UP_DOWN_SIZE,
      // PAGE_UP and PAGE_DOWN will skip trough 10 items
      navigationMode: NavigationMode_default.Vertical,
      getItemsCallback: () => this.getEnabledItems()
    });
    this._handleResize = this.checkListInViewport.bind(this);
    this._handleResize = this.checkListInViewport.bind(this);
    this.initialIntersection = true;
    this._groupCount = 0;
    this._groupItemCount = 0;
    this.onItemFocusedBound = this.onItemFocused.bind(this);
    this.onForwardAfterBound = this.onForwardAfter.bind(this);
    this.onForwardBeforeBound = this.onForwardBefore.bind(this);
    this.onItemTabIndexChangeBound = this.onItemTabIndexChange.bind(this);
  }
  /**
   * Returns an array containing the list item instances without the groups in a flat structure.
   * @default []
   * @since 2.0.0
   * @public
   */
  get listItems() {
    return this.getItems();
  }
  _updateAssociatedLabelsTexts() {
    this._associatedDescriptionRefTexts = getAllAccessibleDescriptionRefTexts(this);
    this._associatedLabelsRefTexts = getAllAccessibleNameRefTexts(this);
  }
  onEnterDOM() {
    registerUI5Element(this, this._updateAssociatedLabelsTexts.bind(this));
    DragRegistry_default.subscribe(this);
  }
  onExitDOM() {
    deregisterUI5Element(this);
    this.unobserveListEnd();
    this.resizeListenerAttached = false;
    ResizeHandler_default.deregister(this.getDomRef(), this._handleResize);
    DragRegistry_default.unsubscribe(this);
  }
  onBeforeRendering() {
    this.detachGroupHeaderEvents();
    this.prepareListItems();
  }
  onAfterRendering() {
    this.attachGroupHeaderEvents();
    if (this.growsOnScroll) {
      this.observeListEnd();
    } else if (this.listEndObserved) {
      this.unobserveListEnd();
    }
    if (this.grows) {
      this.checkListInViewport();
      this.attachForResize();
    }
  }
  attachGroupHeaderEvents() {
    this.getItems().forEach((item) => {
      if (item.hasAttribute("ui5-li-group-header")) {
        item.addEventListener("ui5-_focused", this.onItemFocusedBound);
        item.addEventListener("ui5-forward-after", this.onForwardAfterBound);
        item.addEventListener("ui5-forward-before", this.onForwardBeforeBound);
      }
    });
  }
  detachGroupHeaderEvents() {
    this.getItems().forEach((item) => {
      if (item.hasAttribute("ui5-li-group-header")) {
        item.removeEventListener("ui5-_focused", this.onItemFocusedBound);
        item.removeEventListener("ui5-forward-after", this.onForwardAfterBound);
        item.removeEventListener("ui5-forward-before", this.onForwardBeforeBound);
      }
    });
  }
  attachForResize() {
    if (!this.resizeListenerAttached) {
      this.resizeListenerAttached = true;
      ResizeHandler_default.register(this.getDomRef(), this._handleResize);
    }
  }
  get shouldRenderH1() {
    return !this.header.length && this.headerText;
  }
  get headerID() {
    return `${this._id}-header`;
  }
  get modeLabelID() {
    return `${this._id}-modeLabel`;
  }
  get listEndDOM() {
    return this.shadowRoot.querySelector(".ui5-list-end-marker");
  }
  get dropIndicatorDOM() {
    return this.shadowRoot.querySelector("[ui5-drop-indicator]");
  }
  get hasData() {
    return this.getItems().length !== 0;
  }
  get showBusyIndicatorOverlay() {
    return !this.growsWithButton && this.loading;
  }
  get showNoDataText() {
    return !this.hasData && this.noDataText;
  }
  get isDelete() {
    return this.selectionMode === ListSelectionMode_default.Delete;
  }
  get isSingleSelect() {
    return [
      ListSelectionMode_default.Single,
      ListSelectionMode_default.SingleStart,
      ListSelectionMode_default.SingleEnd,
      ListSelectionMode_default.SingleAuto
    ].includes(this.selectionMode);
  }
  get isMultiple() {
    return this.selectionMode === ListSelectionMode_default.Multiple;
  }
  get ariaLabelledBy() {
    if (this.accessibleNameRef || this.accessibleName) {
      return void 0;
    }
    const ids = [];
    if (this.isMultiple || this.isSingleSelect || this.isDelete) {
      ids.push(this.modeLabelID);
    }
    if (this.shouldRenderH1) {
      ids.push(this.headerID);
    }
    return ids.length ? ids.join(" ") : void 0;
  }
  get ariaLabelTxt() {
    return this._associatedLabelsRefTexts || getEffectiveAriaLabelText(this);
  }
  get ariaDescriptionText() {
    return this._associatedDescriptionRefTexts || getEffectiveAriaDescriptionText(this) || this._getDescriptionForGroups();
  }
  get scrollContainer() {
    return this.shadowRoot.querySelector(".ui5-list-scroll-container");
  }
  hasGrowingComponent() {
    if (this.growsOnScroll && this.scrollContainer) {
      return this.scrollContainer.clientHeight !== this.scrollContainer.scrollHeight;
    }
    return this.growsWithButton;
  }
  _getDescriptionForGroups() {
    let description = "";
    if (this._groupCount > 0) {
      if (this.accessibleRole === ListAccessibleRole_default.List) {
        description = List_1.i18nBundle.getText(LIST_ROLE_LIST_GROUP_DESCRIPTION, this._groupCount, this._groupItemCount);
      } else if (this.accessibleRole === ListAccessibleRole_default.ListBox) {
        description = List_1.i18nBundle.getText(LIST_ROLE_LISTBOX_GROUP_DESCRIPTION, this._groupCount);
      }
    }
    return description;
  }
  get ariaLabelModeText() {
    if (this.hasData) {
      if (this.isMultiple) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_MULTISELECTABLE);
      }
      if (this.isSingleSelect) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_SELECTABLE);
      }
      if (this.isDelete) {
        return List_1.i18nBundle.getText(ARIA_LABEL_LIST_DELETABLE);
      }
    }
    return "";
  }
  get grows() {
    return this.growing !== ListGrowingMode_default.None;
  }
  get growsOnScroll() {
    return this.growing === ListGrowingMode_default.Scroll;
  }
  get growsWithButton() {
    return this.growing === ListGrowingMode_default.Button;
  }
  get _growingButtonText() {
    return this.growingButtonText || List_1.i18nBundle.getText(LOAD_MORE_TEXT);
  }
  get listAccessibleRole() {
    return toLowercaseEnumValue(this.accessibleRole);
  }
  get classes() {
    return {
      root: {
        "ui5-list-root": true
      }
    };
  }
  prepareListItems() {
    const slottedItems = this.getItemsForProcessing();
    slottedItems.forEach((item, key) => {
      const isLastChild = key === slottedItems.length - 1;
      const showBottomBorder = this.separators === ListSeparator_default.All || this.separators === ListSeparator_default.Inner && !isLastChild;
      if (item.hasConfigurableMode) {
        item._selectionMode = this.selectionMode;
      }
      item.hasBorder = showBottomBorder;
    });
  }
  async observeListEnd() {
    if (!this.listEndObserved) {
      await renderFinished();
      this.getIntersectionObserver().observe(this.listEndDOM);
      this.listEndObserved = true;
    }
  }
  unobserveListEnd() {
    if (this.growingIntersectionObserver) {
      this.growingIntersectionObserver.disconnect();
      this.growingIntersectionObserver = null;
      this.listEndObserved = false;
    }
  }
  onInteresection(entries) {
    if (this.initialIntersection) {
      this.initialIntersection = false;
      return;
    }
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        debounce_default(this.loadMore.bind(this), INFINITE_SCROLL_DEBOUNCE_RATE);
      }
    });
  }
  /*
  * ITEM SELECTION BASED ON THE CURRENT MODE
  */
  onSelectionRequested(e) {
    const previouslySelectedItems = this.getSelectedItems();
    let selectionChange = false;
    if (this.selectionMode !== ListSelectionMode_default.None && this[`handle${this.selectionMode}`]) {
      selectionChange = this[`handle${this.selectionMode}`](e.detail.item, !!e.detail.selected);
    }
    if (selectionChange) {
      const changePrevented = !this.fireDecoratorEvent("selection-change", {
        selectedItems: this.getSelectedItems(),
        previouslySelectedItems,
        selectionComponentPressed: e.detail.selectionComponentPressed,
        targetItem: e.detail.item,
        key: e.detail.key
      });
      if (changePrevented) {
        this._revertSelection(previouslySelectedItems);
      }
    }
  }
  handleSingle(item) {
    if (item.selected) {
      return false;
    }
    this.deselectSelectedItems();
    item.selected = true;
    return true;
  }
  handleSingleStart(item) {
    return this.handleSingle(item);
  }
  handleSingleEnd(item) {
    return this.handleSingle(item);
  }
  handleSingleAuto(item) {
    return this.handleSingle(item);
  }
  handleMultiple(item, selected) {
    item.selected = selected;
    return true;
  }
  handleDelete(item) {
    this.fireDecoratorEvent("item-delete", { item });
    return true;
  }
  deselectSelectedItems() {
    this.getSelectedItems().forEach((item) => {
      item.selected = false;
    });
  }
  getSelectedItems() {
    return this.getItems().filter((item) => item.selected);
  }
  getEnabledItems() {
    return this.getItems().filter((item) => item._focusable);
  }
  getItems() {
    const items = [];
    const slottedItems = this.getSlottedNodes("items");
    let groupCount = 0;
    let groupItemCount = 0;
    slottedItems.forEach((item) => {
      if (isInstanceOfListItemGroup(item)) {
        const groupItems = [item.groupHeaderItem, ...item.items.filter((listItem) => listItem.assignedSlot)].filter(Boolean);
        items.push(...groupItems);
        groupCount++;
        groupItemCount += groupItems.length - 1;
      } else {
        item.assignedSlot && items.push(item);
      }
    });
    this._groupCount = groupCount;
    this._groupItemCount = groupItemCount;
    return items;
  }
  getItemsForProcessing() {
    return this.getItems();
  }
  _revertSelection(previouslySelectedItems) {
    this.getItems().forEach((item) => {
      const oldSelection = previouslySelectedItems.indexOf(item) !== -1;
      const multiSelectCheckBox = item.shadowRoot.querySelector(".ui5-li-multisel-cb");
      const singleSelectRadioButton = item.shadowRoot.querySelector(".ui5-li-singlesel-radiobtn");
      item.selected = oldSelection;
      if (multiSelectCheckBox) {
        multiSelectCheckBox.checked = oldSelection;
      } else if (singleSelectRadioButton) {
        singleSelectRadioButton.checked = oldSelection;
      }
    });
  }
  _onkeydown(e) {
    if (isEnd(e)) {
      this._handleEnd();
      e.preventDefault();
      return;
    }
    if (isHome(e)) {
      this._handleHome();
      return;
    }
    if (isDown(e)) {
      this._handleDown();
      e.preventDefault();
      return;
    }
    if (isCtrl(e)) {
      this._moveItem(e.target, e);
      return;
    }
    if (isTabNext(e)) {
      this._handleTabNext(e);
    }
  }
  _moveItem(item, e) {
    if (!item || !item.movable) {
      return;
    }
    const closestPositions = findClosestPositionsByKey(this.items, item, e);
    if (!closestPositions.length) {
      return;
    }
    e.preventDefault();
    const acceptedPosition = closestPositions.find(({ element, placement }) => {
      return !this.fireDecoratorEvent("move-over", {
        originalEvent: e,
        source: {
          element: item
        },
        destination: {
          element,
          placement
        }
      });
    });
    if (acceptedPosition) {
      this.fireDecoratorEvent("move", {
        originalEvent: e,
        source: {
          element: item
        },
        destination: {
          element: acceptedPosition.element,
          placement: acceptedPosition.placement
        }
      });
      item.focus();
    }
  }
  _onLoadMoreKeydown(e) {
    if (isSpace(e)) {
      e.preventDefault();
      this._loadMoreActive = true;
    }
    if (isEnter(e)) {
      this._onLoadMoreClick();
      this._loadMoreActive = true;
    }
    if (isTabNext(e)) {
      this.focusAfterElement();
    }
    if (isUp(e)) {
      this._handleLodeMoreUp(e);
      return;
    }
    if (isTabPrevious(e)) {
      if (this.getPreviouslyFocusedItem()) {
        this.focusPreviouslyFocusedItem();
      } else {
        this.focusFirstItem();
      }
      e.preventDefault();
    }
  }
  _onLoadMoreKeyup(e) {
    if (isSpace(e)) {
      this._onLoadMoreClick();
    }
    this._loadMoreActive = false;
  }
  _onLoadMoreMousedown() {
    this._loadMoreActive = true;
  }
  _onLoadMoreMouseup() {
    this._loadMoreActive = false;
  }
  _onLoadMoreClick() {
    this.loadMore();
  }
  _handleLodeMoreUp(e) {
    const growingButton = this.getGrowingButton();
    if (growingButton === e.target) {
      const items = this.getItems();
      const lastItem = items[items.length - 1];
      this.focusItem(lastItem);
      e.preventDefault();
      e.stopImmediatePropagation();
    }
  }
  checkListInViewport() {
    this._inViewport = isElementInView_default(this.getDomRef());
  }
  loadMore() {
    if (this.hasGrowingComponent()) {
      this.fireDecoratorEvent("load-more");
    }
  }
  /*
  * KEYBOARD SUPPORT
  */
  _handleTabNext(e) {
    let lastTabbableEl;
    const target = getNormalizedTarget_default(e.target);
    if (!lastTabbableEl) {
      return;
    }
    if (lastTabbableEl === target) {
      if (this.getFirstItem((x) => x.selected && x._focusable)) {
        this.focusFirstSelectedItem();
      } else if (this.getPreviouslyFocusedItem()) {
        this.focusPreviouslyFocusedItem();
      } else {
        this.focusFirstItem();
      }
      e.stopImmediatePropagation();
      e.preventDefault();
    }
  }
  _handleHome() {
    if (!this.growsWithButton) {
      return;
    }
    this.focusFirstItem();
  }
  _handleEnd() {
    if (!this.growsWithButton) {
      return;
    }
    this._shouldFocusGrowingButton();
  }
  _handleDown() {
    if (!this.growsWithButton) {
      return;
    }
    this._shouldFocusGrowingButton();
  }
  _onfocusin(e) {
    const target = getNormalizedTarget_default(e.target);
    if (!this.isForwardElement(target)) {
      return;
    }
    if (!this.getPreviouslyFocusedItem()) {
      if (this.growsWithButton && this.isForwardAfterElement(target)) {
        this.focusGrowingButton();
      } else {
        this.focusFirstItem();
      }
      e.stopImmediatePropagation();
      return;
    }
    if (!this.getForwardingFocus()) {
      if (this.growsWithButton && this.isForwardAfterElement(target)) {
        this.focusGrowingButton();
        e.stopImmediatePropagation();
        return;
      }
      this.focusPreviouslyFocusedItem();
    }
    e.stopImmediatePropagation();
    this.setForwardingFocus(false);
  }
  _ondragenter(e) {
    e.preventDefault();
  }
  _ondragleave(e) {
    if (e.relatedTarget instanceof Node && this.shadowRoot.contains(e.relatedTarget)) {
      return;
    }
    this.dropIndicatorDOM.targetReference = null;
  }
  _ondragover(e) {
    if (!(e.target instanceof HTMLElement)) {
      return;
    }
    const closestPosition = findClosestPosition(this.items, e.clientY, Orientation_default.Vertical);
    if (!closestPosition) {
      this.dropIndicatorDOM.targetReference = null;
      return;
    }
    const { targetReference, placement } = handleDragOver_default(e, this, closestPosition, closestPosition.element, { originalEvent: true });
    this.dropIndicatorDOM.targetReference = targetReference;
    this.dropIndicatorDOM.placement = placement;
  }
  _ondrop(e) {
    var _a2, _b2;
    if (!((_a2 = this.dropIndicatorDOM) == null ? void 0 : _a2.targetReference) || !((_b2 = this.dropIndicatorDOM) == null ? void 0 : _b2.placement)) {
      e.preventDefault();
      return;
    }
    handleDrop_default(e, this, this.dropIndicatorDOM.targetReference, this.dropIndicatorDOM.placement, { originalEvent: true });
    this.dropIndicatorDOM.targetReference = null;
  }
  isForwardElement(element) {
    const elementId = element.id;
    const beforeElement = this.getBeforeElement();
    if (this._id === elementId || beforeElement && beforeElement.id === elementId) {
      return true;
    }
    return this.isForwardAfterElement(element);
  }
  isForwardAfterElement(element) {
    const elementId = element.id;
    const afterElement = this.getAfterElement();
    return afterElement && afterElement.id === elementId;
  }
  onItemTabIndexChange(e) {
    e.stopPropagation();
    const target = e.target;
    this._itemNavigation.setCurrentItem(target);
  }
  onItemFocused(e) {
    const target = e.target;
    e.stopPropagation();
    this._itemNavigation.setCurrentItem(target);
    this.fireDecoratorEvent("item-focused", { item: target });
    if (this.selectionMode === ListSelectionMode_default.SingleAuto) {
      const detail = {
        item: target,
        selectionComponentPressed: false,
        selected: true,
        key: e.detail.key
      };
      this.onSelectionRequested({ detail });
    }
  }
  onItemPress(e) {
    const pressedItem = e.detail.item;
    if (!this.fireDecoratorEvent("item-click", { item: pressedItem })) {
      return;
    }
    if (this.selectionMode !== ListSelectionMode_default.Delete) {
      const detail = {
        item: pressedItem,
        selectionComponentPressed: false,
        selected: !pressedItem.selected,
        key: e.detail.key
      };
      this.onSelectionRequested({ detail });
    }
  }
  // This is applicable to NotificationListItem
  onItemClose(e) {
    var _a2;
    const target = e.target;
    const shouldFireItemClose = (target == null ? void 0 : target.hasAttribute("ui5-li-notification")) || (target == null ? void 0 : target.hasAttribute("ui5-li-notification-group"));
    if (shouldFireItemClose) {
      this.fireDecoratorEvent("item-close", { item: (_a2 = e.detail) == null ? void 0 : _a2.item });
    }
  }
  onItemToggle(e) {
    this.fireDecoratorEvent("item-toggle", { item: e.detail.item });
  }
  onForwardBefore(e) {
    this.setPreviouslyFocusedItem(e.target);
    this.focusBeforeElement();
    e.stopPropagation();
  }
  onForwardAfter(e) {
    this.setPreviouslyFocusedItem(e.target);
    if (!this.growsWithButton) {
      this.focusAfterElement();
    } else {
      this.focusGrowingButton();
      e.preventDefault();
    }
    e.stopPropagation();
  }
  focusBeforeElement() {
    this.setForwardingFocus(true);
    this.getBeforeElement().focus();
  }
  focusAfterElement() {
    this.setForwardingFocus(true);
    this.getAfterElement().focus();
  }
  focusGrowingButton() {
    const growingBtn = this.getGrowingButton();
    if (growingBtn) {
      growingBtn.focus();
    }
  }
  _shouldFocusGrowingButton() {
    const items = this.getItems();
    const lastIndex = items.length - 1;
    const currentIndex = this._itemNavigation._currentIndex;
    if (currentIndex !== -1 && currentIndex === lastIndex) {
      this.focusGrowingButton();
    }
  }
  getGrowingButton() {
    return this.shadowRoot.querySelector(`[id="${this._id}-growing-btn"]`);
  }
  /**
   * Focuses the first list item and sets its tabindex to "0" via the ItemNavigation
   * @protected
   */
  focusFirstItem() {
    const firstItem = this.getFirstItem((x) => x._focusable);
    if (firstItem) {
      firstItem.focus();
    }
  }
  focusPreviouslyFocusedItem() {
    const previouslyFocusedItem = this.getPreviouslyFocusedItem();
    if (previouslyFocusedItem) {
      previouslyFocusedItem.focus();
    }
  }
  focusFirstSelectedItem() {
    const firstSelectedItem = this.getFirstItem((x) => x.selected && x._focusable);
    if (firstSelectedItem) {
      firstSelectedItem.focus();
    }
  }
  /**
   * Focuses a list item and sets its tabindex to "0" via the ItemNavigation
   * @protected
   * @param item
   */
  focusItem(item) {
    this._itemNavigation.setCurrentItem(item);
    item.focus();
  }
  onFocusRequested(e) {
    setTimeout(() => {
      this.setPreviouslyFocusedItem(e.target);
      this.focusPreviouslyFocusedItem();
    }, 0);
  }
  setForwardingFocus(forwardingFocus) {
    this._forwardingFocus = forwardingFocus;
  }
  getForwardingFocus() {
    return this._forwardingFocus;
  }
  setPreviouslyFocusedItem(item) {
    this._previouslyFocusedItem = item;
  }
  getPreviouslyFocusedItem() {
    return this._previouslyFocusedItem;
  }
  getFirstItem(filter) {
    const slottedItems = this.getItems();
    let firstItem = null;
    if (!filter) {
      return slottedItems.length ? slottedItems[0] : null;
    }
    for (let i = 0; i < slottedItems.length; i++) {
      if (filter(slottedItems[i])) {
        firstItem = slottedItems[i];
        break;
      }
    }
    return firstItem;
  }
  getAfterElement() {
    if (!this._afterElement) {
      this._afterElement = this.shadowRoot.querySelector(`[id="${this._id}-after"]`);
    }
    return this._afterElement;
  }
  getBeforeElement() {
    if (!this._beforeElement) {
      this._beforeElement = this.shadowRoot.querySelector(`[id="${this._id}-before"]`);
    }
    return this._beforeElement;
  }
  getIntersectionObserver() {
    if (!this.growingIntersectionObserver) {
      this.growingIntersectionObserver = new IntersectionObserver(this.onInteresection.bind(this), {
        root: null,
        rootMargin: "0px",
        threshold: 1
      });
    }
    return this.growingIntersectionObserver;
  }
};
__decorate4([
  property_default()
], List.prototype, "headerText", void 0);
__decorate4([
  property_default()
], List.prototype, "footerText", void 0);
__decorate4([
  property_default({ type: Boolean })
], List.prototype, "indent", void 0);
__decorate4([
  property_default()
], List.prototype, "selectionMode", void 0);
__decorate4([
  property_default()
], List.prototype, "noDataText", void 0);
__decorate4([
  property_default()
], List.prototype, "separators", void 0);
__decorate4([
  property_default()
], List.prototype, "growing", void 0);
__decorate4([
  property_default()
], List.prototype, "growingButtonText", void 0);
__decorate4([
  property_default({ type: Boolean })
], List.prototype, "loading", void 0);
__decorate4([
  property_default({ type: Number })
], List.prototype, "loadingDelay", void 0);
__decorate4([
  property_default()
], List.prototype, "accessibleName", void 0);
__decorate4([
  property_default()
], List.prototype, "accessibleNameRef", void 0);
__decorate4([
  property_default()
], List.prototype, "accessibleDescription", void 0);
__decorate4([
  property_default()
], List.prototype, "accessibleDescriptionRef", void 0);
__decorate4([
  property_default({ noAttribute: true })
], List.prototype, "_associatedDescriptionRefTexts", void 0);
__decorate4([
  property_default({ noAttribute: true })
], List.prototype, "_associatedLabelsRefTexts", void 0);
__decorate4([
  property_default()
], List.prototype, "accessibleRole", void 0);
__decorate4([
  property_default({ type: Boolean })
], List.prototype, "_inViewport", void 0);
__decorate4([
  property_default({ type: Boolean })
], List.prototype, "_loadMoreActive", void 0);
__decorate4([
  slot_default({
    type: HTMLElement,
    "default": true,
    invalidateOnChildChange: true
  })
], List.prototype, "items", void 0);
__decorate4([
  slot_default()
], List.prototype, "header", void 0);
__decorate4([
  i18n_default("@ui5/webcomponents")
], List, "i18nBundle", void 0);
List = List_1 = __decorate4([
  customElement_default({
    tag: "ui5-list",
    fastNavigation: true,
    renderer: JsxRenderer_default,
    template: ListTemplate,
    styles: [
      List_css_default,
      getEffectiveScrollbarStyle_default()
    ]
  }),
  event_strict_default("item-click", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("item-close", {
    bubbles: true
  }),
  event_strict_default("item-toggle", {
    bubbles: true
  }),
  event_strict_default("item-delete", {
    bubbles: true
  }),
  event_strict_default("selection-change", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("load-more", {
    bubbles: true
  }),
  event_strict_default("item-focused", {
    bubbles: true
  }),
  event_strict_default("move-over", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("move", {
    bubbles: true
  })
], List);
List.define();
var List_default = List;

// node_modules/@ui5/webcomponents-icons/dist/v4/decline.js
var name9 = "decline";
var pathData9 = "M86 109l22-23q5-5 12-5 6 0 11 5l124 125L380 86q5-5 11-5 7 0 12 5l22 23q12 11 0 23L301 256l124 125q11 11 0 22l-22 23q-8 5-12 5-3 0-11-5L255 301 131 426q-5 5-11 5-4 0-12-5l-22-23q-11-11 0-22l124-125L86 132q-12-12 0-23z";
var ltr9 = false;
var accData6 = ICON_DECLINE;
var collection9 = "SAP-icons-v4";
var packageName9 = "@ui5/webcomponents-icons";
registerIcon(name9, { pathData: pathData9, ltr: ltr9, accData: accData6, collection: collection9, packageName: packageName9 });

// node_modules/@ui5/webcomponents-icons/dist/v5/decline.js
var name10 = "decline";
var pathData10 = "M292 256l117 116q7 7 7 18 0 12-7.5 19t-18.5 7q-10 0-18-8L256 292 140 408q-8 8-18 8-11 0-18.5-7.5T96 390q0-10 8-18l116-116-116-116q-8-8-8-18 0-11 7.5-18.5T122 96t18 7l116 117 116-117q7-7 18-7t18.5 7.5T416 122t-7 18z";
var ltr10 = false;
var accData7 = ICON_DECLINE;
var collection10 = "SAP-icons-v5";
var packageName10 = "@ui5/webcomponents-icons";
registerIcon(name10, { pathData: pathData10, ltr: ltr10, accData: accData7, collection: collection10, packageName: packageName10 });

// node_modules/@ui5/webcomponents-icons/dist/decline.js
var decline_default = "decline";

// node_modules/@ui5/webcomponents/dist/PopupBlockLayerTemplate.js
function PopubBlockLayerTemplate() {
  return jsx("div", { class: "ui5-block-layer", onKeyDown: this._preventBlockLayerFocus, onMouseDown: this._preventBlockLayerFocus });
}

// node_modules/@ui5/webcomponents/dist/PopupTemplate.js
function PopupTemplate(hooks) {
  return jsxs(Fragment, { children: [PopubBlockLayerTemplate.call(this), jsxs("section", { "root-element": true, style: this.styles.root, class: this.classes.root, role: this._role, "aria-modal": this._ariaModal, "aria-label": this._ariaLabel, "aria-labelledby": this._ariaLabelledBy, onKeyDown: this._onkeydown, onFocusOut: this._onfocusout, onMouseUp: this._onmouseup, onMouseDown: this._onmousedown, children: [jsx("span", { class: "first-fe", "data-ui5-focus-trap": true, role: "none", tabIndex: 0, onFocusIn: this.forwardToLast }), ((hooks == null ? void 0 : hooks.beforeContent) || beforeContent).call(this), jsx("div", { style: this.styles.content, class: this.classes.content, onScroll: this._scroll, part: "content", children: jsx("slot", {}) }), ((hooks == null ? void 0 : hooks.afterContent) || afterContent).call(this), jsx("span", { class: "last-fe", "data-ui5-focus-trap": true, role: "none", tabIndex: 0, onFocusIn: this.forwardToFirst })] })] });
}
function beforeContent() {
}
function afterContent() {
}

// node_modules/@ui5/webcomponents/dist/types/TitleLevel.js
var TitleLevel;
(function(TitleLevel2) {
  TitleLevel2["H1"] = "H1";
  TitleLevel2["H2"] = "H2";
  TitleLevel2["H3"] = "H3";
  TitleLevel2["H4"] = "H4";
  TitleLevel2["H5"] = "H5";
  TitleLevel2["H6"] = "H6";
})(TitleLevel || (TitleLevel = {}));
var TitleLevel_default = TitleLevel;

// node_modules/@ui5/webcomponents/dist/TitleTemplate.js
function TitleTemplate() {
  return jsx(Fragment, { children: title.call(this, this.level) });
}
function title(titleLevel) {
  switch (titleLevel) {
    case "H1":
      return jsx("h1", { class: "ui5-title-root", children: titleInner.call(this) });
    case "H2":
      return jsx("h2", { class: "ui5-title-root", children: titleInner.call(this) });
    case "H3":
      return jsx("h3", { class: "ui5-title-root", children: titleInner.call(this) });
    case "H4":
      return jsx("h4", { class: "ui5-title-root", children: titleInner.call(this) });
    case "H5":
      return jsx("h5", { class: "ui5-title-root", children: titleInner.call(this) });
    case "H6":
      return jsx("h6", { id: `${this._id}-inner`, class: "ui5-title-root", children: titleInner.call(this) });
    default:
      return jsx("h2", { class: "ui5-title-root", children: titleInner.call(this) });
  }
}
function titleInner() {
  return jsx("span", { id: `${this._id}-inner`, children: jsx("slot", {}) });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/Title.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Title_css_default = `:host(:not([hidden])){display:block;cursor:text}:host{max-width:100%;color:var(--sapGroup_TitleTextColor);font-size:var(--sapFontHeader5Size);font-family:"72override",var(--sapFontHeaderFamily);text-shadow:var(--sapContent_TextShadow)}.ui5-title-root{display:inline-block;position:relative;font-weight:400;font-size:inherit;box-sizing:border-box;overflow:hidden;text-overflow:ellipsis;max-width:100%;vertical-align:bottom;-webkit-margin-before:0;-webkit-margin-after:0;-webkit-margin-start:0;-webkit-margin-end:0;margin:0;cursor:inherit}:host{white-space:pre-line}:host([wrapping-type="None"]){white-space:nowrap}.ui5-title-root,:host ::slotted(*){white-space:inherit}::slotted(*){font-size:inherit;font-family:inherit;text-shadow:inherit}:host([size="H1"]){font-size:var(--sapFontHeader1Size)}:host([size="H2"]){font-size:var(--sapFontHeader2Size)}:host([size="H3"]){font-size:var(--sapFontHeader3Size)}:host([size="H4"]){font-size:var(--sapFontHeader4Size)}:host([size="H5"]){font-size:var(--sapFontHeader5Size)}:host([size="H6"]){font-size:var(--sapFontHeader6Size)}
`;

// node_modules/@ui5/webcomponents/dist/Title.js
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Title = class Title2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.wrappingType = "Normal";
    this.level = "H2";
    this.size = "H5";
  }
  get h1() {
    return this.level === TitleLevel_default.H1;
  }
  get h2() {
    return this.level === TitleLevel_default.H2;
  }
  get h3() {
    return this.level === TitleLevel_default.H3;
  }
  get h4() {
    return this.level === TitleLevel_default.H4;
  }
  get h5() {
    return this.level === TitleLevel_default.H5;
  }
  get h6() {
    return this.level === TitleLevel_default.H6;
  }
};
__decorate5([
  property_default()
], Title.prototype, "wrappingType", void 0);
__decorate5([
  property_default()
], Title.prototype, "level", void 0);
__decorate5([
  property_default()
], Title.prototype, "size", void 0);
Title = __decorate5([
  customElement_default({
    tag: "ui5-title",
    renderer: JsxRenderer_default,
    template: TitleTemplate,
    styles: Title_css_default
  })
], Title);
Title.define();
var Title_default = Title;

// node_modules/@ui5/webcomponents/dist/PopoverTemplate.js
function PopoverTemplate() {
  return PopupTemplate.call(this, {
    beforeContent: beforeContent2,
    afterContent: afterContent2
  });
}
function beforeContent2() {
  return jsxs(Fragment, { children: [jsx("span", { class: "ui5-popover-arrow", style: this.styles.arrow }), this._displayHeader && jsx("header", { class: "ui5-popup-header-root", id: "ui5-popup-header", part: "header", children: this.header.length ? jsx("slot", { name: "header" }) : jsx(Title_default, { level: "H1", class: "ui5-popup-header-text", children: this.headerText }) })] });
}
function afterContent2() {
  return jsx(Fragment, { children: this._displayFooter && !!this.footer.length && jsx("footer", { class: "ui5-popup-footer-root", part: "footer", children: jsx("slot", { name: "footer" }) }) });
}

// node_modules/@ui5/webcomponents-base/dist/util/clamp.js
var clamp = (val, min, max) => {
  return Math.min(Math.max(val, min), Math.max(min, max));
};
var clamp_default = clamp;

// node_modules/@ui5/webcomponents-base/dist/util/isElementClickable.js
var rClickable = /^(?:a|area)$/i;
var rFocusable = /^(?:input|select|textarea|button)$/i;
var isElementClickable = (el) => {
  if (el.disabled) {
    return false;
  }
  const tabIndex = el.getAttribute("tabindex");
  if (tabIndex !== null && tabIndex !== void 0) {
    return parseInt(tabIndex) >= 0;
  }
  return rFocusable.test(el.nodeName) || rClickable.test(el.nodeName) && !!el.href;
};
var isElementClickable_default = isElementClickable;

// node_modules/@ui5/webcomponents-base/dist/util/FocusableElements.js
var isFocusTrap = (el) => {
  return el.hasAttribute("data-ui5-focus-trap");
};
var isScrollable = (el) => {
  const computedStyle = getComputedStyle(el);
  return el.scrollHeight > el.clientHeight && ["scroll", "auto"].indexOf(computedStyle.overflowY) >= 0 || el.scrollWidth > el.clientWidth && ["scroll", "auto"].indexOf(computedStyle.overflowX) >= 0;
};
var getFirstFocusableElement = async (container, startFromContainer) => {
  if (!container || isElementHidden_default(container)) {
    return null;
  }
  return findFocusableElement(container, true, startFromContainer);
};
var getLastFocusableElement = async (container, startFromContainer) => {
  if (!container || isElementHidden_default(container)) {
    return null;
  }
  return findFocusableElement(container, false, startFromContainer);
};
var isElemFocusable = (el) => {
  return el.hasAttribute("data-ui5-focus-redirect") || !isElementHidden_default(el);
};
var isUI5ElementWithNegativeTabIndex = (el) => {
  if (instanceOfUI5Element(el)) {
    const tabIndex = el.getAttribute("tabindex");
    if (tabIndex !== null && parseInt(tabIndex) < 0) {
      return true;
    }
  }
  return false;
};
var findFocusableElement = async (container, forward, startFromContainer) => {
  let child;
  let assignedElements;
  let currentIndex = -1;
  if (container.shadowRoot) {
    child = forward ? container.shadowRoot.firstChild : container.shadowRoot.lastChild;
  } else if (container instanceof HTMLSlotElement && container.assignedNodes()) {
    assignedElements = container.assignedNodes();
    currentIndex = forward ? 0 : assignedElements.length - 1;
    child = assignedElements[currentIndex];
  } else if (startFromContainer) {
    child = container;
  } else {
    child = forward ? container.firstElementChild : container.lastElementChild;
  }
  let focusableDescendant;
  while (child) {
    const originalChild = child;
    if (!isElementHidden_default(originalChild) && !isUI5ElementWithNegativeTabIndex(originalChild)) {
      if (instanceOfUI5Element(child)) {
        await child._waitForDomRef();
        child = child.getDomRef();
      }
      if (!child || isElementHidden_default(child)) {
        return null;
      }
      if (child.nodeType === 1 && isElemFocusable(child) && !isFocusTrap(child)) {
        if (isElementClickable_default(child)) {
          return child && typeof child.focus === "function" ? child : null;
        }
        focusableDescendant = await findFocusableElement(child, forward);
        if (!isSafari() && !focusableDescendant && isScrollable(child)) {
          return child && typeof child.focus === "function" ? child : null;
        }
        if (focusableDescendant) {
          return focusableDescendant && typeof focusableDescendant.focus === "function" ? focusableDescendant : null;
        }
      }
    }
    child = forward ? originalChild.nextSibling : originalChild.previousSibling;
    if (assignedElements && !assignedElements[currentIndex].contains(child)) {
      currentIndex = forward ? currentIndex + 1 : currentIndex - 1;
      child = assignedElements[currentIndex];
    }
  }
  return null;
};

// node_modules/@ui5/webcomponents-base/dist/util/PopupUtils.js
var getFocusedElement = () => {
  const element = getActiveElement_default();
  return element && typeof element.focus === "function" ? element : null;
};
var isFocusedElementWithinNode = (node) => {
  const fe = getFocusedElement();
  if (fe) {
    return isNodeContainedWithin(node, fe);
  }
  return false;
};
var isNodeContainedWithin = (parent, child) => {
  let currentNode = parent;
  if (currentNode.shadowRoot) {
    const children = Array.from(currentNode.shadowRoot.children);
    currentNode = children.find((n) => n.localName !== "style");
    if (!currentNode) {
      return false;
    }
  }
  if (currentNode === child) {
    return true;
  }
  const childNodes = currentNode.localName === "slot" ? currentNode.assignedNodes() : currentNode.children;
  if (childNodes) {
    return Array.from(childNodes).some((n) => isNodeContainedWithin(n, child));
  }
  return false;
};
var isPointInRect = (x, y, rect) => {
  return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
};
var isClickInRect = (e, rect) => {
  let x;
  let y;
  if (e instanceof MouseEvent) {
    x = e.clientX;
    y = e.clientY;
  } else {
    const touch = e.touches[0];
    x = touch.clientX;
    y = touch.clientY;
  }
  return isPointInRect(x, y, rect);
};
function instanceOfPopup(object) {
  return "isUI5Element" in object && "_show" in object;
}
var getClosedPopupParent = (el) => {
  const parent = el.parentElement || el.getRootNode && el.getRootNode().host;
  if (parent && (instanceOfPopup(parent) || parent === document.documentElement)) {
    return parent;
  }
  return getClosedPopupParent(parent);
};

// node_modules/@ui5/webcomponents-base/dist/MediaRange.js
var mediaRanges = /* @__PURE__ */ new Map();
var DEAFULT_RANGE_SET = /* @__PURE__ */ new Map();
DEAFULT_RANGE_SET.set("S", [0, 599]);
DEAFULT_RANGE_SET.set("M", [600, 1023]);
DEAFULT_RANGE_SET.set("L", [1024, 1439]);
DEAFULT_RANGE_SET.set("XL", [1440, Infinity]);
var RANGESETS;
(function(RANGESETS2) {
  RANGESETS2["RANGE_4STEPS"] = "4Step";
})(RANGESETS || (RANGESETS = {}));
var initRangeSet = (name15, range) => {
  mediaRanges.set(name15, range);
};
var getCurrentRange = (name15, width = window.innerWidth) => {
  let rangeSet = mediaRanges.get(name15);
  if (!rangeSet) {
    rangeSet = mediaRanges.get(RANGESETS.RANGE_4STEPS);
  }
  let currentRangeName;
  const effectiveWidth = Math.floor(width);
  rangeSet.forEach((value, key) => {
    if (effectiveWidth >= value[0] && effectiveWidth <= value[1]) {
      currentRangeName = key;
    }
  });
  return currentRangeName || [...rangeSet.keys()][0];
};
var MediaRange = {
  RANGESETS,
  initRangeSet,
  getCurrentRange
};
MediaRange.initRangeSet(MediaRange.RANGESETS.RANGE_4STEPS, DEAFULT_RANGE_SET);
var MediaRange_default = MediaRange;

// node_modules/@ui5/webcomponents/dist/types/PopupAccessibleRole.js
var PopupAccessibleRole;
(function(PopupAccessibleRole2) {
  PopupAccessibleRole2["None"] = "None";
  PopupAccessibleRole2["Dialog"] = "Dialog";
  PopupAccessibleRole2["AlertDialog"] = "AlertDialog";
})(PopupAccessibleRole || (PopupAccessibleRole = {}));
var PopupAccessibleRole_default = PopupAccessibleRole;

// node_modules/@ui5/webcomponents/dist/popup-utils/OpenedPopupsRegistry.js
var OpenedPopupsRegistry = getSharedResource_default("OpenedPopupsRegistry", { openedRegistry: [] });
var addOpenedPopup = (instance, parentPopovers = []) => {
  if (!OpenedPopupsRegistry.openedRegistry.some((popup) => popup.instance === instance)) {
    OpenedPopupsRegistry.openedRegistry.push({
      instance,
      parentPopovers
    });
  }
  _updateTopModalPopup();
  if (OpenedPopupsRegistry.openedRegistry.length === 1) {
    attachGlobalListener();
  }
};
var removeOpenedPopup = (instance) => {
  OpenedPopupsRegistry.openedRegistry = OpenedPopupsRegistry.openedRegistry.filter((el) => {
    return el.instance !== instance;
  });
  _updateTopModalPopup();
  if (!OpenedPopupsRegistry.openedRegistry.length) {
    detachGlobalListener();
  }
};
var getOpenedPopups = () => {
  return [...OpenedPopupsRegistry.openedRegistry];
};
var _keydownListener = (event) => {
  if (!OpenedPopupsRegistry.openedRegistry.length) {
    return;
  }
  if (isEscape(event)) {
    event.stopPropagation();
    OpenedPopupsRegistry.openedRegistry[OpenedPopupsRegistry.openedRegistry.length - 1].instance.closePopup(true);
  }
};
var attachGlobalListener = () => {
  document.addEventListener("keydown", _keydownListener);
};
var detachGlobalListener = () => {
  document.removeEventListener("keydown", _keydownListener);
};
var _updateTopModalPopup = () => {
  let popup;
  let hasModal = false;
  for (let i = OpenedPopupsRegistry.openedRegistry.length - 1; i >= 0; i--) {
    popup = OpenedPopupsRegistry.openedRegistry[i].instance;
    if (!hasModal && popup.isModal) {
      popup.isTopModalPopup = true;
      hasModal = true;
    } else {
      popup.isTopModalPopup = false;
    }
  }
};

// node_modules/@ui5/webcomponents/dist/generated/themes/Popup.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Popup_css_default = `:host{min-width:1px;overflow:visible;border:none;inset:unset;margin:0;padding:0}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/PopupBlockLayer.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var PopupBlockLayer_css_default = `.ui5-block-layer{position:fixed;z-index:-1;display:none;inset:-500px;outline:none;pointer-events:all}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/PopupGlobal.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var PopupGlobal_css_default = `.ui5-popup-scroll-blocker{overflow:hidden}
`;

// node_modules/@ui5/webcomponents/dist/Popup.js
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Popup_1;
var createBlockingStyle = () => {
  if (!hasStyle("data-ui5-popup-scroll-blocker")) {
    createStyle(PopupGlobal_css_default, "data-ui5-popup-scroll-blocker");
  }
};
createBlockingStyle();
var pageScrollingBlockers = /* @__PURE__ */ new Set();
var Popup = Popup_1 = class Popup2 extends UI5Element_default {
  constructor() {
    super();
    this.preventFocusRestore = false;
    this.accessibleRole = "Dialog";
    this.preventInitialFocus = false;
    this.isTopModalPopup = false;
    this.onPhone = false;
    this.onDesktop = false;
    this._opened = false;
    this._open = false;
    this._resizeHandler = this._resize.bind(this);
    this._getRealDomRef = () => {
      return this.shadowRoot.querySelector("[root-element]");
    };
  }
  onBeforeRendering() {
    this.onPhone = isPhone();
    this.onDesktop = isDesktop();
  }
  onAfterRendering() {
    renderFinished().then(() => {
      this._updateMediaRange();
    });
  }
  onEnterDOM() {
    this.setAttribute("popover", "manual");
    ResizeHandler_default.register(this, this._resizeHandler);
    if (isDesktop()) {
      this.setAttribute("desktop", "");
    }
    this.tabIndex = -1;
    if (this.open) {
      this.showPopover();
      this.openPopup();
    }
  }
  onExitDOM() {
    if (this._opened) {
      Popup_1.unblockPageScrolling(this);
      this._removeOpenedPopup();
    }
    ResizeHandler_default.deregister(this, this._resizeHandler);
  }
  /**
   * Indicates if the element is open
   * @public
   * @default false
   * @since 1.2.0
   */
  set open(value) {
    if (this._open === value) {
      return;
    }
    this._open = value;
    if (value) {
      this.openPopup();
    } else {
      this.closePopup();
    }
  }
  get open() {
    return this._open;
  }
  async openPopup() {
    if (this._opened) {
      return;
    }
    const prevented = !this.fireDecoratorEvent("before-open");
    if (prevented) {
      this.open = false;
      return;
    }
    if (this.isModal) {
      Popup_1.blockPageScrolling(this);
    }
    this._focusedElementBeforeOpen = getFocusedElement();
    this._show();
    this._opened = true;
    if (this.getDomRef()) {
      this._updateMediaRange();
    }
    this._addOpenedPopup();
    this.open = true;
    await this.applyInitialFocus();
    await renderFinished();
    if (this.isConnected) {
      this.fireDecoratorEvent("open");
    }
  }
  _resize() {
    this._updateMediaRange();
  }
  /**
   * Prevents the user from interacting with the content under the block layer
   */
  _preventBlockLayerFocus(e) {
    e.preventDefault();
  }
  /**
   * Temporarily removes scrollbars from the html element
   * @protected
   */
  static blockPageScrolling(popup) {
    pageScrollingBlockers.add(popup);
    if (pageScrollingBlockers.size !== 1) {
      return;
    }
    document.documentElement.classList.add("ui5-popup-scroll-blocker");
  }
  /**
   * Restores scrollbars on the html element, if needed
   * @protected
   */
  static unblockPageScrolling(popup) {
    pageScrollingBlockers.delete(popup);
    if (pageScrollingBlockers.size !== 0) {
      return;
    }
    document.documentElement.classList.remove("ui5-popup-scroll-blocker");
  }
  _scroll(e) {
    this.fireDecoratorEvent("scroll", {
      scrollTop: e.target.scrollTop,
      targetRef: e.target
    });
  }
  _onkeydown(e) {
    const isTabOutAttempt = e.target === this._root && isTabPrevious(e);
    const isEnterOnClosedPopupChild = isEnter(e) && !this.open;
    if (isTabOutAttempt || isEnterOnClosedPopupChild) {
      e.preventDefault();
    }
  }
  _onfocusout(e) {
    if (!e.relatedTarget) {
      this._shouldFocusRoot = true;
    }
  }
  _onmousedown(e) {
    if (this.shadowRoot.contains(e.target)) {
      this._shouldFocusRoot = true;
    } else {
      this._shouldFocusRoot = false;
    }
  }
  _onmouseup() {
    if (this._shouldFocusRoot) {
      if (isChrome()) {
        this._root.focus();
      }
      this._shouldFocusRoot = false;
    }
  }
  /**
   * Focus trapping
   * @private
   */
  async forwardToFirst() {
    const firstFocusable = await getFirstFocusableElement(this);
    if (firstFocusable) {
      firstFocusable.focus();
    } else {
      this._root.focus();
    }
  }
  /**
   * Focus trapping
   * @private
   */
  async forwardToLast() {
    const lastFocusable = await getLastFocusableElement(this);
    if (lastFocusable) {
      lastFocusable.focus();
    } else {
      this._root.focus();
    }
  }
  /**
   * Use this method to focus the element denoted by "initialFocus", if provided,
   * or the first focusable element otherwise.
   * @protected
   */
  async applyInitialFocus() {
    if (!this.preventInitialFocus) {
      await this.applyFocus();
    }
  }
  /**
   * Focuses the element denoted by `initialFocus`, if provided,
   * or the first focusable element otherwise.
   * @public
   * @returns Promise that resolves when the focus is applied
   */
  async applyFocus() {
    if (this.querySelector("[autofocus]")) {
      return;
    }
    await this._waitForDomRef();
    if (this.getRootNode() === this) {
      return;
    }
    let element;
    if (this.initialFocus) {
      element = this.getRootNode().getElementById(this.initialFocus) || document.getElementById(this.initialFocus);
    }
    element = element || await getFirstFocusableElement(this) || this._root;
    if (element) {
      if (element === this._root) {
        element.tabIndex = -1;
      }
      element.focus();
    }
  }
  isFocusWithin() {
    return isFocusedElementWithinNode(this._root);
  }
  _updateMediaRange() {
    this.mediaRange = MediaRange_default.getCurrentRange(MediaRange_default.RANGESETS.RANGE_4STEPS, this.getDomRef().offsetWidth);
  }
  /**
   * Adds the popup to the "opened popups registry"
   * @protected
   */
  _addOpenedPopup() {
    addOpenedPopup(this);
  }
  /**
   * Closes the popup.
   */
  closePopup(escPressed = false, preventRegistryUpdate = false, preventFocusRestore = false) {
    if (!this._opened) {
      return;
    }
    const prevented = !this.fireDecoratorEvent("before-close", { escPressed });
    if (prevented) {
      this.open = true;
      return;
    }
    this._opened = false;
    if (this.isModal) {
      Popup_1.unblockPageScrolling(this);
    }
    this.hide();
    this.open = false;
    if (!preventRegistryUpdate) {
      this._removeOpenedPopup();
    }
    if (!this.preventFocusRestore && !preventFocusRestore) {
      this.resetFocus();
    }
    this.fireDecoratorEvent("close");
  }
  /**
   * Removes the popup from the "opened popups registry"
   * @protected
   */
  _removeOpenedPopup() {
    removeOpenedPopup(this);
  }
  /**
   * Returns the focus to the previously focused element
   * @protected
   */
  resetFocus() {
    var _a2;
    (_a2 = this._focusedElementBeforeOpen) == null ? void 0 : _a2.focus();
    this._focusedElementBeforeOpen = null;
  }
  /**
   * Sets "block" display to the popup. The property can be overriden by derivatives of Popup.
   * @protected
   */
  _show() {
    if (this.isConnected) {
      this.setAttribute("popover", "manual");
      this.showPopover();
    }
  }
  /**
   * Sets "none" display to the popup
   * @protected
   */
  hide() {
    this.isConnected && this.hidePopover();
  }
  /**
   * Ensures ariaLabel is never null or empty string
   * @protected
   */
  get _ariaLabel() {
    return getEffectiveAriaLabelText(this);
  }
  get _root() {
    return this.shadowRoot.querySelector(".ui5-popup-root");
  }
  get _role() {
    return this.accessibleRole === PopupAccessibleRole_default.None ? void 0 : toLowercaseEnumValue(this.accessibleRole);
  }
  get _ariaModal() {
    return this.accessibleRole === PopupAccessibleRole_default.None ? void 0 : "true";
  }
  get contentDOM() {
    return this.shadowRoot.querySelector(".ui5-popup-content");
  }
  get styles() {
    return {
      root: {},
      content: {}
    };
  }
  get classes() {
    return {
      root: {
        "ui5-popup-root": true
      },
      content: {
        "ui5-popup-content": true
      }
    };
  }
};
__decorate6([
  property_default()
], Popup.prototype, "initialFocus", void 0);
__decorate6([
  property_default({ type: Boolean })
], Popup.prototype, "preventFocusRestore", void 0);
__decorate6([
  property_default()
], Popup.prototype, "accessibleName", void 0);
__decorate6([
  property_default()
], Popup.prototype, "accessibleNameRef", void 0);
__decorate6([
  property_default()
], Popup.prototype, "accessibleRole", void 0);
__decorate6([
  property_default()
], Popup.prototype, "mediaRange", void 0);
__decorate6([
  property_default({ type: Boolean })
], Popup.prototype, "preventInitialFocus", void 0);
__decorate6([
  property_default({ type: Boolean, noAttribute: true })
], Popup.prototype, "isTopModalPopup", void 0);
__decorate6([
  slot_default({ type: HTMLElement, "default": true })
], Popup.prototype, "content", void 0);
__decorate6([
  property_default({ type: Boolean })
], Popup.prototype, "onPhone", void 0);
__decorate6([
  property_default({ type: Boolean })
], Popup.prototype, "onDesktop", void 0);
__decorate6([
  property_default({ type: Boolean })
], Popup.prototype, "open", null);
Popup = Popup_1 = __decorate6([
  customElement_default({
    renderer: JsxRenderer_default,
    styles: [Popup_css_default, PopupBlockLayer_css_default],
    template: PopupTemplate
  }),
  event_strict_default("before-open", {
    cancelable: true
  }),
  event_strict_default("open"),
  event_strict_default("before-close", {
    cancelable: true
  }),
  event_strict_default("close"),
  event_strict_default("scroll", {
    bubbles: true
  })
], Popup);
var Popup_default = Popup;

// node_modules/@ui5/webcomponents-icons/dist/v4/resize-corner.js
var name11 = "resize-corner";
var pathData11 = "M384 160v32q0 12-10 22L182 406q-10 10-22 10h-32zM224 416l160-160v32q0 12-10 22l-96 96q-10 10-22 10h-32zm160-64v32q0 12-10 22t-22 10h-32z";
var ltr11 = false;
var collection11 = "SAP-icons-v4";
var packageName11 = "@ui5/webcomponents-icons";
registerIcon(name11, { pathData: pathData11, ltr: ltr11, collection: collection11, packageName: packageName11 });

// node_modules/@ui5/webcomponents-icons/dist/v5/resize-corner.js
var name12 = "resize-corner";
var pathData12 = "M282 416q-11 0-18.5-7.5T256 390t7-18l109-109q7-7 18-7t18.5 7.5T416 282t-7 18L300 409q-7 7-18 7zm-160 0q-11 0-18.5-7.5T96 390t7-18l269-269q7-7 18-7t18.5 7.5T416 122t-7 18L140 409q-7 7-18 7z";
var ltr12 = false;
var collection12 = "SAP-icons-v5";
var packageName12 = "@ui5/webcomponents-icons";
registerIcon(name12, { pathData: pathData12, ltr: ltr12, collection: collection12, packageName: packageName12 });

// node_modules/@ui5/webcomponents-icons/dist/resize-corner.js
var resize_corner_default = "resize-corner";

// node_modules/@ui5/webcomponents/dist/DialogTemplate.js
function DialogTemplate() {
  return PopupTemplate.call(this, {
    beforeContent: beforeContent3,
    afterContent: afterContent3
  });
}
function beforeContent3() {
  return jsx(Fragment, { children: !!this._displayHeader && jsx("header", { children: jsxs("div", { class: "ui5-popup-header-root", id: "ui5-popup-header", role: "group", "aria-describedby": this.effectiveAriaDescribedBy, "aria-roledescription": this.ariaRoleDescriptionHeaderText, tabIndex: this._headerTabIndex, onKeyDown: this._onDragOrResizeKeyDown, onMouseDown: this._onDragMouseDown, part: "header", children: [this.hasValueState && jsx(Icon_default, { class: "ui5-dialog-value-state-icon", name: this._dialogStateIcon }), this.header.length ? jsx("slot", { name: "header" }) : jsx(Title_default, { level: "H1", id: "ui5-popup-header-text", class: "ui5-popup-header-text", children: this.headerText }), this.resizable ? this.draggable ? jsx("span", { id: `${this._id}-descr`, "aria-hidden": "true", class: "ui5-hidden-text", children: this.ariaDescribedByHeaderTextDraggableAndResizable }) : jsx("span", { id: `${this._id}-descr`, "aria-hidden": "true", class: "ui5-hidden-text", children: this.ariaDescribedByHeaderTextResizable }) : this.draggable && jsx("span", { id: `${this._id}-descr`, "aria-hidden": "true", class: "ui5-hidden-text", children: this.ariaDescribedByHeaderTextDraggable })] }) }) });
}
function afterContent3() {
  return jsxs(Fragment, { children: [!!this.footer.length && jsx("footer", { class: "ui5-popup-footer-root", part: "footer", children: jsx("slot", { name: "footer" }) }), this._showResizeHandle && jsx("div", { class: "ui5-popup-resize-handle", onMouseDown: this._onResizeMouseDown, children: jsx(Icon_default, { name: resize_corner_default }) })] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/PopupsCommon.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var PopupsCommon_css_default = `:host{position:fixed;background:var(--sapGroup_ContentBackground);border-radius:var(--_ui5-v2-9-0_popup_border_radius);min-height:2rem;box-sizing:border-box}:host([open]){display:flex}.ui5-popup-root{background:inherit;border-radius:inherit;width:100%;box-sizing:border-box;display:flex;flex-direction:column;overflow:hidden;flex:1 1 auto;outline:none}.ui5-popup-root .ui5-popup-header-root{color:var(--sapPageHeader_TextColor);box-shadow:var(--_ui5-v2-9-0_popup_header_shadow);border-bottom:var(--_ui5-v2-9-0_popup_header_border)}.ui5-popup-content{color:var(--sapTextColor);flex:auto}.ui5-popup-content:focus{outline:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);outline-offset:calc(-1 * var(--sapContent_FocusWidth));border-radius:var(--_ui5-v2-9-0_popup_border_radius)}.ui5-popup-footer-root{background:var(--sapPageFooter_Background);border-top:1px solid var(--sapPageFooter_BorderColor);color:var(--sapPageFooter_TextColor)}.ui5-popup-header-root,.ui5-popup-footer-root,:host([header-text]) .ui5-popup-header-text{margin:0;display:flex;justify-content:center;align-items:center}.ui5-popup-header-root .ui5-popup-header-text{font-weight:var(--_ui5-v2-9-0_popup_header_font_weight)}.ui5-popup-content{overflow:auto;box-sizing:border-box}:host([header-text]) .ui5-popup-header-text{min-height:var(--_ui5-v2-9-0_popup_default_header_height);max-height:var(--_ui5-v2-9-0_popup_default_header_height);line-height:var(--_ui5-v2-9-0_popup_default_header_height);text-overflow:ellipsis;overflow:hidden;white-space:nowrap;max-width:100%;display:inline-flex;justify-content:var(--_ui5-v2-9-0_popup_header_prop_header_text_alignment)}:host([header-text]) .ui5-popup-header-root{justify-content:var(--_ui5-v2-9-0_popup_header_prop_header_text_alignment)}:host(:not([header-text])) .ui5-popup-header-text{display:none}:host([media-range="S"]) .ui5-popup-content{padding:1rem var(--_ui5-v2-9-0_popup_content_padding_s)}:host([media-range="M"]) .ui5-popup-content,:host([media-range="L"]) .ui5-popup-content{padding:1rem var(--_ui5-v2-9-0_popup_content_padding_m_l)}:host([media-range="XL"]) .ui5-popup-content{padding:1rem var(--_ui5-v2-9-0_popup_content_padding_xl)}.ui5-popup-header-root{background:var(--_ui5-v2-9-0_popup_header_background)}:host([media-range="S"]) .ui5-popup-header-root,:host([media-range="S"]) .ui5-popup-footer-root{padding-left:var(--_ui5-v2-9-0_popup_header_footer_padding_s);padding-right:var(--_ui5-v2-9-0_popup_header_footer_padding_s)}:host([media-range="M"]) .ui5-popup-header-root,:host([media-range="L"]) .ui5-popup-header-root,:host([media-range="M"]) .ui5-popup-footer-root,:host([media-range="L"]) .ui5-popup-footer-root{padding-left:var(--_ui5-v2-9-0_popup_header_footer_padding_m_l);padding-right:var(--_ui5-v2-9-0_popup_header_footer_padding_m_l)}:host([media-range="XL"]) .ui5-popup-header-root,:host([media-range="XL"]) .ui5-popup-footer-root{padding-left:var(--_ui5-v2-9-0_popup_header_footer_padding_xl);padding-right:var(--_ui5-v2-9-0_popup_header_footer_padding_xl)}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/Dialog.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Dialog_css_default = `.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}:host{min-width:20rem;min-height:6rem;max-height:94%;max-width:90%;flex-direction:column;box-shadow:var(--sapContent_Shadow3);border-radius:var(--sapElement_BorderCornerRadius)}:host([stretch]){width:90%;height:94%}:host([stretch][on-phone]){width:100%;height:100%;max-height:100%;max-width:100%;border-radius:0;min-width:0}:host([draggable]) .ui5-popup-header-root,:host([draggable]) ::slotted([slot="header"]){cursor:move}:host([draggable]) .ui5-popup-header-root *{cursor:auto}:host([draggable]) .ui5-popup-root{user-select:text}::slotted([slot="header"]){max-width:100%}.ui5-popup-root{display:flex;flex-direction:column;max-width:100vw}.ui5-popup-header-root{position:relative}.ui5-popup-header-root:before{content:"";position:absolute;inset-block-start:auto;inset-block-end:0;inset-inline-start:0;inset-inline-end:0;height:var(--_ui5-v2-9-0_dialog_header_state_line_height);background:var(--sapObjectHeader_BorderColor)}:host([state="Negative"]) .ui5-popup-header-root:before{background:var(--sapErrorBorderColor)}:host([state="Information"]) .ui5-popup-header-root:before{background:var(--sapInformationBorderColor)}:host([state="Positive"]) .ui5-popup-header-root:before{background:var(--sapSuccessBorderColor)}:host([state="Critical"]) .ui5-popup-header-root:before{background:var(--sapWarningBorderColor)}.ui5-dialog-value-state-icon{margin-inline-end:.5rem;flex-shrink:0}:host([state="Negative"]) .ui5-dialog-value-state-icon{color:var(--_ui5-v2-9-0_dialog_header_error_state_icon_color)}:host([state="Information"]) .ui5-dialog-value-state-icon{color:var(--_ui5-v2-9-0_dialog_header_information_state_icon_color)}:host([state="Positive"]) .ui5-dialog-value-state-icon{color:var(--_ui5-v2-9-0_dialog_header_success_state_icon_color)}:host([state="Critical"]) .ui5-dialog-value-state-icon{color:var(--_ui5-v2-9-0_dialog_header_warning_state_icon_color)}.ui5-popup-header-root{outline:none}:host([desktop]) .ui5-popup-header-root:focus:after,.ui5-popup-header-root:focus-visible:after{content:"";position:absolute;left:var(--_ui5-v2-9-0_dialog_header_focus_left_offset);bottom:var(--_ui5-v2-9-0_dialog_header_focus_bottom_offset);right:var(--_ui5-v2-9-0_dialog_header_focus_right_offset);top:var(--_ui5-v2-9-0_dialog_header_focus_top_offset);border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);border-radius:var(--_ui5-v2-9-0_dialog_header_border_radius) var(--_ui5-v2-9-0_dialog_header_border_radius) 0 0;pointer-events:none}:host([stretch]) .ui5-popup-content{width:100%;height:100%}.ui5-popup-content{min-height:var(--_ui5-v2-9-0_dialog_content_min_height);flex:1 1 auto}.ui5-popup-resize-handle{position:absolute;bottom:-.5rem;inset-inline-end:-.5rem;cursor:var(--_ui5-v2-9-0_dialog_resize_cursor);width:1.5rem;height:1.5rem;border-radius:50%}.ui5-popup-resize-handle [ui5-icon]{color:var(--sapButton_Lite_TextColor)}::slotted([slot="footer"]){height:var(--_ui5-v2-9-0_dialog_footer_height)}::slotted([slot="footer"][ui5-bar][design="Footer"]){border-top:none}::slotted([slot="header"][ui5-bar]){box-shadow:none}::slotted([slot="footer"][ui5-toolbar]){border:0}:host::backdrop{background-color:var(--_ui5-v2-9-0_popup_block_layer_background);opacity:var(--_ui5-v2-9-0_popup_block_layer_opacity)}.ui5-block-layer{display:block}
`;

// node_modules/@ui5/webcomponents/dist/Dialog.js
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Dialog_1;
var STEP_SIZE = 16;
var ICON_PER_STATE = {
  [ValueState_default.Negative]: "error",
  [ValueState_default.Critical]: "alert",
  [ValueState_default.Positive]: "sys-enter-2",
  [ValueState_default.Information]: "information"
};
var Dialog = Dialog_1 = class Dialog2 extends Popup_default {
  constructor() {
    super();
    this.stretch = false;
    this.draggable = false;
    this.resizable = false;
    this.state = "None";
    this._draggedOrResized = false;
    this._revertSize = () => {
      Object.assign(this.style, {
        top: "",
        left: "",
        width: "",
        height: ""
      });
    };
    this._screenResizeHandler = this._screenResize.bind(this);
    this._dragMouseMoveHandler = this._onDragMouseMove.bind(this);
    this._dragMouseUpHandler = this._onDragMouseUp.bind(this);
    this._resizeMouseMoveHandler = this._onResizeMouseMove.bind(this);
    this._resizeMouseUpHandler = this._onResizeMouseUp.bind(this);
    this._dragStartHandler = this._handleDragStart.bind(this);
  }
  static _isHeader(element) {
    return element.classList.contains("ui5-popup-header-root") || element.getAttribute("slot") === "header";
  }
  get isModal() {
    return true;
  }
  get _ariaLabelledBy() {
    let ariaLabelledById;
    if (this.headerText && !this._ariaLabel) {
      ariaLabelledById = "ui5-popup-header-text";
    }
    return ariaLabelledById;
  }
  get ariaRoleDescriptionHeaderText() {
    return this.resizable || this.draggable ? Dialog_1.i18nBundle.getText(DIALOG_HEADER_ARIA_ROLE_DESCRIPTION) : void 0;
  }
  get effectiveAriaDescribedBy() {
    return this.resizable || this.draggable ? `${this._id}-descr` : void 0;
  }
  get ariaDescribedByHeaderTextResizable() {
    return Dialog_1.i18nBundle.getText(DIALOG_HEADER_ARIA_DESCRIBEDBY_RESIZABLE);
  }
  get ariaDescribedByHeaderTextDraggable() {
    return Dialog_1.i18nBundle.getText(DIALOG_HEADER_ARIA_DESCRIBEDBY_DRAGGABLE);
  }
  get ariaDescribedByHeaderTextDraggableAndResizable() {
    return Dialog_1.i18nBundle.getText(DIALOG_HEADER_ARIA_DESCRIBEDBY_DRAGGABLE_RESIZABLE);
  }
  /**
   * Determines if the header should be shown.
   */
  get _displayHeader() {
    return this.header.length || this.headerText || this.draggable || this.resizable;
  }
  get _movable() {
    return !this.stretch && this.onDesktop && (this.draggable || this.resizable);
  }
  get _headerTabIndex() {
    return this._movable ? 0 : void 0;
  }
  get _showResizeHandle() {
    return this.resizable && this.onDesktop;
  }
  get _minHeight() {
    let minHeight = Number.parseInt(window.getComputedStyle(this.contentDOM).minHeight);
    const header = this._root.querySelector(".ui5-popup-header-root");
    if (header) {
      minHeight += header.offsetHeight;
    }
    const footer = this._root.querySelector(".ui5-popup-footer-root");
    if (footer) {
      minHeight += footer.offsetHeight;
    }
    return minHeight;
  }
  get hasValueState() {
    return this.state !== ValueState_default.None;
  }
  get _dialogStateIcon() {
    return ICON_PER_STATE[this.state];
  }
  get _role() {
    if (this.accessibleRole === PopupAccessibleRole_default.None) {
      return void 0;
    }
    if (this.state === ValueState_default.Negative || this.state === ValueState_default.Critical) {
      return toLowercaseEnumValue(PopupAccessibleRole_default.AlertDialog);
    }
    return toLowercaseEnumValue(this.accessibleRole);
  }
  _show() {
    super._show();
    this._center();
  }
  onBeforeRendering() {
    super.onBeforeRendering();
    this._isRTL = this.effectiveDir === "rtl";
  }
  onEnterDOM() {
    super.onEnterDOM();
    this._attachScreenResizeHandler();
    this.addEventListener("dragstart", this._dragStartHandler);
    this.setAttribute("data-sap-ui-fastnavgroup-container", "true");
  }
  onExitDOM() {
    super.onExitDOM();
    this._detachScreenResizeHandler();
    this.removeEventListener("dragstart", this._dragStartHandler);
  }
  /**
   * @override
   */
  _resize() {
    super._resize();
    if (!this._draggedOrResized) {
      this._center();
    }
  }
  _screenResize() {
    this._center();
  }
  _attachScreenResizeHandler() {
    if (!this._screenResizeHandlerAttached) {
      window.addEventListener("resize", this._screenResizeHandler);
      this._screenResizeHandlerAttached = true;
    }
  }
  _detachScreenResizeHandler() {
    if (this._screenResizeHandlerAttached) {
      window.removeEventListener("resize", this._screenResizeHandler);
      this._screenResizeHandlerAttached = false;
    }
  }
  _center() {
    const height = window.innerHeight - this.offsetHeight, width = window.innerWidth - this.offsetWidth;
    Object.assign(this.style, {
      top: `${Math.round(height / 2)}px`,
      left: `${Math.round(width / 2)}px`
    });
  }
  /**
   * Event handlers
   */
  _onDragMouseDown(e) {
    if (!this._movable || !this.draggable || !Dialog_1._isHeader(e.target)) {
      return;
    }
    const { top, left } = this.getBoundingClientRect();
    const { width, height } = window.getComputedStyle(this);
    Object.assign(this.style, {
      top: `${top}px`,
      left: `${left}px`,
      width: `${Math.round(Number.parseFloat(width) * 100) / 100}px`,
      height: `${Math.round(Number.parseFloat(height) * 100) / 100}px`
    });
    this._x = e.clientX;
    this._y = e.clientY;
    this._draggedOrResized = true;
    this._attachMouseDragHandlers();
  }
  _onDragMouseMove(e) {
    e.preventDefault();
    const { clientX, clientY } = e;
    const calcX = this._x - clientX;
    const calcY = this._y - clientY;
    const { left, top } = this.getBoundingClientRect();
    Object.assign(this.style, {
      left: `${Math.floor(left - calcX)}px`,
      top: `${Math.floor(top - calcY)}px`
    });
    this._x = clientX;
    this._y = clientY;
  }
  _onDragMouseUp() {
    delete this._x;
    delete this._y;
    this._detachMouseDragHandlers();
  }
  _onDragOrResizeKeyDown(e) {
    if (!this._movable || !Dialog_1._isHeader(e.target)) {
      return;
    }
    if (this.draggable && [isUp, isDown, isLeft, isRight].some((key) => key(e))) {
      this._dragWithEvent(e);
      return;
    }
    if (this.resizable && [isUpShift, isDownShift, isLeftShift, isRightShift].some((key) => key(e))) {
      this._resizeWithEvent(e);
    }
  }
  _dragWithEvent(e) {
    const { top, left, width, height } = this.getBoundingClientRect();
    let newPos = 0;
    let posDirection = "top";
    switch (true) {
      case isUp(e):
        newPos = top - STEP_SIZE;
        posDirection = "top";
        break;
      case isDown(e):
        newPos = top + STEP_SIZE;
        posDirection = "top";
        break;
      case isLeft(e):
        newPos = left - STEP_SIZE;
        posDirection = "left";
        break;
      case isRight(e):
        newPos = left + STEP_SIZE;
        posDirection = "left";
        break;
    }
    newPos = clamp_default(newPos, 0, posDirection === "left" ? window.innerWidth - width : window.innerHeight - height);
    this.style[posDirection] = `${newPos}px`;
  }
  _resizeWithEvent(e) {
    this._draggedOrResized = true;
    this.addEventListener("ui5-before-close", this._revertSize, { once: true });
    const { top, left } = this.getBoundingClientRect(), style = window.getComputedStyle(this), minWidth = Number.parseFloat(style.minWidth), maxWidth = window.innerWidth - left, maxHeight = window.innerHeight - top;
    let width = Number.parseFloat(style.width), height = Number.parseFloat(style.height);
    switch (true) {
      case isUpShift(e):
        height -= STEP_SIZE;
        break;
      case isDownShift(e):
        height += STEP_SIZE;
        break;
      case isLeftShift(e):
        width -= STEP_SIZE;
        break;
      case isRightShift(e):
        width += STEP_SIZE;
        break;
    }
    width = clamp_default(width, minWidth, maxWidth);
    height = clamp_default(height, this._minHeight, maxHeight);
    Object.assign(this.style, {
      width: `${width}px`,
      height: `${height}px`
    });
  }
  _attachMouseDragHandlers() {
    window.addEventListener("mousemove", this._dragMouseMoveHandler);
    window.addEventListener("mouseup", this._dragMouseUpHandler);
  }
  _detachMouseDragHandlers() {
    window.removeEventListener("mousemove", this._dragMouseMoveHandler);
    window.removeEventListener("mouseup", this._dragMouseUpHandler);
  }
  _onResizeMouseDown(e) {
    if (!this._movable || !this.resizable) {
      return;
    }
    e.preventDefault();
    const { top, left } = this.getBoundingClientRect();
    const { width, height, minWidth } = window.getComputedStyle(this);
    this._initialX = e.clientX;
    this._initialY = e.clientY;
    this._initialWidth = Number.parseFloat(width);
    this._initialHeight = Number.parseFloat(height);
    this._initialTop = top;
    this._initialLeft = left;
    this._minWidth = Number.parseFloat(minWidth);
    this._cachedMinHeight = this._minHeight;
    Object.assign(this.style, {
      top: `${top}px`,
      left: `${left}px`
    });
    this._draggedOrResized = true;
    this._attachMouseResizeHandlers();
  }
  _onResizeMouseMove(e) {
    const { clientX, clientY } = e;
    let newWidth, newLeft;
    if (this._isRTL) {
      newWidth = clamp_default(this._initialWidth - (clientX - this._initialX), this._minWidth, this._initialLeft + this._initialWidth);
      newLeft = clamp_default(this._initialLeft + (clientX - this._initialX), 0, this._initialX + this._initialWidth - this._minWidth);
    } else {
      newWidth = clamp_default(this._initialWidth + (clientX - this._initialX), this._minWidth, window.innerWidth - this._initialLeft);
    }
    const newHeight = clamp_default(this._initialHeight + (clientY - this._initialY), this._cachedMinHeight, window.innerHeight - this._initialTop);
    Object.assign(this.style, {
      height: `${newHeight}px`,
      width: `${newWidth}px`,
      left: newLeft ? `${newLeft}px` : void 0
    });
  }
  _onResizeMouseUp() {
    delete this._initialX;
    delete this._initialY;
    delete this._initialWidth;
    delete this._initialHeight;
    delete this._initialTop;
    delete this._initialLeft;
    delete this._minWidth;
    delete this._cachedMinHeight;
    this._detachMouseResizeHandlers();
  }
  _handleDragStart(e) {
    if (this.draggable) {
      e.preventDefault();
    }
  }
  _attachMouseResizeHandlers() {
    window.addEventListener("mousemove", this._resizeMouseMoveHandler);
    window.addEventListener("mouseup", this._resizeMouseUpHandler);
    this.addEventListener("ui5-before-close", this._revertSize, { once: true });
  }
  _detachMouseResizeHandlers() {
    window.removeEventListener("mousemove", this._resizeMouseMoveHandler);
    window.removeEventListener("mouseup", this._resizeMouseUpHandler);
  }
};
__decorate7([
  property_default()
], Dialog.prototype, "headerText", void 0);
__decorate7([
  property_default({ type: Boolean })
], Dialog.prototype, "stretch", void 0);
__decorate7([
  property_default({ type: Boolean })
], Dialog.prototype, "draggable", void 0);
__decorate7([
  property_default({ type: Boolean })
], Dialog.prototype, "resizable", void 0);
__decorate7([
  property_default()
], Dialog.prototype, "state", void 0);
__decorate7([
  slot_default()
], Dialog.prototype, "header", void 0);
__decorate7([
  slot_default()
], Dialog.prototype, "footer", void 0);
__decorate7([
  i18n_default("@ui5/webcomponents")
], Dialog, "i18nBundle", void 0);
Dialog = Dialog_1 = __decorate7([
  customElement_default({
    tag: "ui5-dialog",
    template: DialogTemplate,
    styles: [
      Popup_default.styles,
      PopupsCommon_css_default,
      Dialog_css_default,
      getEffectiveScrollbarStyle_default()
    ]
  })
], Dialog);
Dialog.define();
var Dialog_default = Dialog;

// node_modules/@ui5/webcomponents/dist/ResponsivePopoverTemplate.js
function ResponsivePopoverTemplate() {
  if (!this._isPhone) {
    return PopoverTemplate.call(this);
  }
  return jsxs(Dialog_default, { "root-element": true, accessibleName: this.accessibleName, accessibleNameRef: this.accessibleNameRef, accessibleRole: this.accessibleRole, stretch: true, preventInitialFocus: this.preventInitialFocus, preventFocusRestore: this.preventFocusRestore, initialFocus: this.initialFocus, onBeforeOpen: this._beforeDialogOpen, onOpen: this._afterDialogOpen, onBeforeClose: this._beforeDialogClose, onClose: this._afterDialogClose, exportparts: "content, header, footer", open: this.open, children: [!this._hideHeader && jsx(Fragment, { children: this.header.length ? jsx("slot", { slot: "header", name: "header" }) : jsxs("div", { class: this.classes.header, slot: "header", children: [this.headerText && jsx(Title_default, { level: "H1", wrappingType: "None", class: "ui5-popup-header-text ui5-responsive-popover-header-text", children: this.headerText }), !this._hideCloseButton && jsx(Button_default, { icon: decline_default, design: "Transparent", accessibleName: this._closeDialogAriaLabel, onClick: this._dialogCloseButtonClick })] }) }), jsx("slot", {}), jsx("slot", { slot: "footer", name: "footer" })] });
}

// node_modules/@ui5/webcomponents-base/dist/converters/DOMReference.js
var DOMReferenceConverter = {
  toAttribute(propertyValue) {
    if (propertyValue instanceof HTMLElement) {
      return null;
    }
    return propertyValue;
  },
  fromAttribute(value) {
    return value;
  }
};
var DOMReference_default = DOMReferenceConverter;

// node_modules/@ui5/webcomponents/dist/types/PopoverPlacement.js
var PopoverPlacement;
(function(PopoverPlacement2) {
  PopoverPlacement2["Start"] = "Start";
  PopoverPlacement2["End"] = "End";
  PopoverPlacement2["Top"] = "Top";
  PopoverPlacement2["Bottom"] = "Bottom";
})(PopoverPlacement || (PopoverPlacement = {}));
var PopoverPlacement_default = PopoverPlacement;

// node_modules/@ui5/webcomponents/dist/types/PopoverVerticalAlign.js
var PopoverVerticalAlign;
(function(PopoverVerticalAlign2) {
  PopoverVerticalAlign2["Center"] = "Center";
  PopoverVerticalAlign2["Top"] = "Top";
  PopoverVerticalAlign2["Bottom"] = "Bottom";
  PopoverVerticalAlign2["Stretch"] = "Stretch";
})(PopoverVerticalAlign || (PopoverVerticalAlign = {}));
var PopoverVerticalAlign_default = PopoverVerticalAlign;

// node_modules/@ui5/webcomponents/dist/types/PopoverHorizontalAlign.js
var PopoverHorizontalAlign;
(function(PopoverHorizontalAlign2) {
  PopoverHorizontalAlign2["Center"] = "Center";
  PopoverHorizontalAlign2["Start"] = "Start";
  PopoverHorizontalAlign2["End"] = "End";
  PopoverHorizontalAlign2["Stretch"] = "Stretch";
})(PopoverHorizontalAlign || (PopoverHorizontalAlign = {}));
var PopoverHorizontalAlign_default = PopoverHorizontalAlign;

// node_modules/@ui5/webcomponents/dist/popup-utils/PopoverRegistry.js
var updateInterval;
var intervalTimeout = 300;
var openedRegistry = [];
var repositionPopovers = () => {
  openedRegistry.forEach((popover) => {
    popover.instance.reposition();
  });
};
var closePopoversIfLostFocus = () => {
  if (getActiveElement_default().tagName === "IFRAME") {
    getRegistry().reverse().forEach((popup) => popup.instance.closePopup(false, false, true));
  }
};
var runUpdateInterval = () => {
  updateInterval = setInterval(() => {
    repositionPopovers();
    closePopoversIfLostFocus();
  }, intervalTimeout);
};
var stopUpdateInterval = () => {
  clearInterval(updateInterval);
};
var attachGlobalScrollHandler = () => {
  document.addEventListener("scroll", repositionPopovers, { capture: true });
};
var detachGlobalScrollHandler = () => {
  document.removeEventListener("scroll", repositionPopovers, { capture: true });
};
var attachScrollHandler = (popover) => {
  popover && popover.shadowRoot.addEventListener("scroll", repositionPopovers, { capture: true });
};
var detachScrollHandler = (popover) => {
  popover && popover.shadowRoot.removeEventListener("scroll", repositionPopovers, { capture: true });
};
var attachGlobalClickHandler = () => {
  document.addEventListener("mousedown", clickHandler, { capture: true });
};
var detachGlobalClickHandler = () => {
  document.removeEventListener("mousedown", clickHandler, { capture: true });
};
var clickHandler = (event) => {
  const openedPopups = getOpenedPopups();
  if (openedPopups.length === 0) {
    return;
  }
  const isTopPopupPopover = instanceOfPopover(openedPopups[openedPopups.length - 1].instance);
  if (!isTopPopupPopover) {
    return;
  }
  for (let i = openedPopups.length - 1; i !== -1; i--) {
    const popup = openedPopups[i].instance;
    if (popup.isModal || popup.isOpenerClicked(event)) {
      return;
    }
    if (isClickInRect(event, popup.getBoundingClientRect())) {
      break;
    }
    popup.closePopup();
  }
};
var addOpenedPopover = (instance) => {
  const parentPopovers = getParentPopoversIfNested(instance);
  addOpenedPopup(instance, parentPopovers);
  openedRegistry.push({
    instance,
    parentPopovers
  });
  attachScrollHandler(instance);
  if (openedRegistry.length === 1) {
    attachGlobalScrollHandler();
    attachGlobalClickHandler();
    runUpdateInterval();
  }
};
var removeOpenedPopover = (instance) => {
  const popoversToClose = [instance];
  for (let i = 0; i < openedRegistry.length; i++) {
    const indexOfCurrentInstance = openedRegistry[i].parentPopovers.indexOf(instance);
    if (openedRegistry[i].parentPopovers.length > 0 && indexOfCurrentInstance > -1) {
      popoversToClose.push(openedRegistry[i].instance);
    }
  }
  for (let i = popoversToClose.length - 1; i >= 0; i--) {
    for (let j = 0; j < openedRegistry.length; j++) {
      let indexOfItemToRemove = -1;
      if (popoversToClose[i] === openedRegistry[j].instance) {
        indexOfItemToRemove = j;
      }
      if (indexOfItemToRemove >= 0) {
        removeOpenedPopup(openedRegistry[indexOfItemToRemove].instance);
        detachScrollHandler(openedRegistry[indexOfItemToRemove].instance);
        const itemToClose = openedRegistry.splice(indexOfItemToRemove, 1);
        itemToClose[0].instance.closePopup(false, true);
      }
    }
  }
  if (!openedRegistry.length) {
    detachGlobalScrollHandler();
    detachGlobalClickHandler();
    stopUpdateInterval();
  }
};
var getRegistry = () => {
  return openedRegistry;
};
var getParentPopoversIfNested = (instance) => {
  let currentElement = instance.parentNode;
  const parentPopovers = [];
  while (currentElement && currentElement.parentNode) {
    for (let i = 0; i < openedRegistry.length; i++) {
      if (currentElement === openedRegistry[i].instance) {
        parentPopovers.push(currentElement);
      }
    }
    currentElement = currentElement.parentNode;
  }
  return parentPopovers;
};

// node_modules/@ui5/webcomponents/dist/generated/themes/Popover.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Popover_css_default = `:host{box-shadow:var(--_ui5-v2-9-0_popover_box_shadow);background-color:var(--_ui5-v2-9-0_popover_background);max-width:calc(100vw - (100vw - 100%) - 2 * var(--_ui5-v2-9-0_popup_viewport_margin))}:host([hide-arrow]){box-shadow:var(--_ui5-v2-9-0_popover_no_arrow_box_shadow)}:host([actual-placement="Bottom"]) .ui5-popover-arrow{left:calc(50% - .5625rem);top:-.5rem;height:.5rem}:host([actual-placement="Bottom"]) .ui5-popover-arrow:after{margin:var(--_ui5-v2-9-0_popover_upward_arrow_margin)}:host([actual-placement="Start"]) .ui5-popover-arrow{top:calc(50% - .5625rem);right:-.5625rem;width:.5625rem}:host([actual-placement="Start"]) .ui5-popover-arrow:after{margin:var(--_ui5-v2-9-0_popover_right_arrow_margin)}:host([actual-placement="Top"]) .ui5-popover-arrow{left:calc(50% - .5625rem);height:.5625rem;top:100%}:host([actual-placement="Top"]) .ui5-popover-arrow:after{margin:var(--_ui5-v2-9-0_popover_downward_arrow_margin)}:host(:not([actual-placement])) .ui5-popover-arrow,:host([actual-placement="End"]) .ui5-popover-arrow{left:-.5625rem;top:calc(50% - .5625rem);width:.5625rem;height:1rem}:host(:not([actual-placement])) .ui5-popover-arrow:after,:host([actual-placement="End"]) .ui5-popover-arrow:after{margin:var(--_ui5-v2-9-0_popover_left_arrow_margin)}:host([hide-arrow]) .ui5-popover-arrow{display:none}.ui5-popover-root{min-width:6.25rem}.ui5-popover-arrow{pointer-events:none;display:block;width:1rem;height:1rem;position:absolute;overflow:hidden}.ui5-popover-arrow:after{content:"";display:block;width:.7rem;height:.7rem;background-color:var(--_ui5-v2-9-0_popover_background);box-shadow:var(--_ui5-v2-9-0_popover_box_shadow);transform:rotate(-45deg)}:host([modal])::backdrop{background-color:var(--_ui5-v2-9-0_popup_block_layer_background);opacity:var(--_ui5-v2-9-0_popup_block_layer_opacity)}:host([modal]) .ui5-block-layer{display:block}
`;

// node_modules/@ui5/webcomponents/dist/Popover.js
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Popover_1;
var ARROW_SIZE = 8;
var Popover = Popover_1 = class Popover2 extends Popup_default {
  static get VIEWPORT_MARGIN() {
    return 10;
  }
  constructor() {
    super();
    this.placement = "End";
    this.horizontalAlign = "Center";
    this.verticalAlign = "Center";
    this.modal = false;
    this.hideArrow = false;
    this.allowTargetOverlap = false;
    this.arrowTranslateX = 0;
    this.arrowTranslateY = 0;
    this.actualPlacement = "End";
  }
  /**
   * Defines the ID or DOM Reference of the element at which the popover is shown.
   * When using this attribute in a declarative way, you must only use the `id` (as a string) of the element at which you want to show the popover.
   * You can only set the `opener` attribute to a DOM Reference when using JavaScript.
   * @public
   * @default undefined
   * @since 1.2.0
   */
  set opener(value) {
    if (this._opener === value) {
      return;
    }
    this._opener = value;
    if (value && this.open) {
      this.openPopup();
    }
  }
  get opener() {
    return this._opener;
  }
  async openPopup() {
    if (this._opened) {
      return;
    }
    const opener = this.getOpenerHTMLElement(this.opener);
    if (!opener) {
      return;
    }
    if (this.isOpenerOutsideViewport(opener.getBoundingClientRect())) {
      await renderFinished();
      this.open = false;
      this.fireDecoratorEvent("close");
      return;
    }
    this._openerRect = opener.getBoundingClientRect();
    await super.openPopup();
  }
  isOpenerClicked(e) {
    const target = e.target;
    const opener = this.getOpenerHTMLElement(this.opener);
    if (!opener) {
      return false;
    }
    if (target === opener) {
      return true;
    }
    if (this._isUI5AbstractElement(target) && target.getFocusDomRef() === opener) {
      return true;
    }
    return e.composedPath().indexOf(opener) > -1;
  }
  /**
   * Override for the _addOpenedPopup hook, which would otherwise just call addOpenedPopup(this)
   * @private
   */
  _addOpenedPopup() {
    addOpenedPopover(this);
  }
  /**
   * Override for the _removeOpenedPopup hook, which would otherwise just call removeOpenedPopup(this)
   * @private
   */
  _removeOpenedPopup() {
    removeOpenedPopover(this);
  }
  getOpenerHTMLElement(opener) {
    if (opener === void 0) {
      return opener;
    }
    if (opener instanceof HTMLElement) {
      return this._isUI5AbstractElement(opener) ? opener.getFocusDomRef() : opener;
    }
    let rootNode = this.getRootNode();
    if (rootNode === this) {
      rootNode = document;
    }
    let openerHTMLElement = rootNode.getElementById(opener);
    if (rootNode instanceof ShadowRoot && !openerHTMLElement) {
      openerHTMLElement = document.getElementById(opener);
    }
    if (openerHTMLElement) {
      return this._isUI5AbstractElement(openerHTMLElement) ? openerHTMLElement.getFocusDomRef() : openerHTMLElement;
    }
    return openerHTMLElement;
  }
  shouldCloseDueToOverflow(placement, openerRect) {
    const threshold = 32;
    const limits = {
      "Start": openerRect.right,
      "End": openerRect.left,
      "Top": openerRect.top,
      "Bottom": openerRect.bottom
    };
    const opener = this.getOpenerHTMLElement(this.opener);
    const closedPopupParent = getClosedPopupParent(opener);
    let overflowsBottom = false;
    let overflowsTop = false;
    if (closedPopupParent instanceof Popover_1) {
      const contentRect = closedPopupParent.getBoundingClientRect();
      overflowsBottom = openerRect.top > contentRect.top + contentRect.height;
      overflowsTop = openerRect.top + openerRect.height < contentRect.top;
    }
    return limits[placement] < 0 || limits[placement] + threshold > closedPopupParent.innerHeight || overflowsBottom || overflowsTop;
  }
  shouldCloseDueToNoOpener(openerRect) {
    return openerRect.top === 0 && openerRect.bottom === 0 && openerRect.left === 0 && openerRect.right === 0;
  }
  isOpenerOutsideViewport(openerRect) {
    return openerRect.bottom < 0 || openerRect.top > window.innerHeight || openerRect.right < 0 || openerRect.left > window.innerWidth;
  }
  /**
   * @override
   */
  _resize() {
    super._resize();
    if (this.open) {
      this.reposition();
    }
  }
  reposition() {
    this._show();
  }
  async _show() {
    super._show();
    const opener = this.getOpenerHTMLElement(this.opener);
    if (opener && instanceOfUI5Element(opener) && !opener.getDomRef()) {
      return;
    }
    if (!this._opened) {
      this._showOutsideViewport();
    }
    const popoverSize = this.getPopoverSize();
    let placement;
    if (popoverSize.width === 0 || popoverSize.height === 0) {
      return;
    }
    if (this.open) {
      this._openerRect = opener.getBoundingClientRect();
    }
    if (this._oldPlacement && this.shouldCloseDueToNoOpener(this._openerRect) && this.isFocusWithin()) {
      placement = this._oldPlacement;
    } else {
      placement = this.calcPlacement(this._openerRect, popoverSize);
    }
    if (this._preventRepositionAndClose || this.isOpenerOutsideViewport(this._openerRect)) {
      await this._waitForDomRef();
      return this.closePopup();
    }
    this._oldPlacement = placement;
    this.actualPlacement = placement.placement;
    let left = clamp_default(this._left, Popover_1.VIEWPORT_MARGIN, document.documentElement.clientWidth - popoverSize.width - Popover_1.VIEWPORT_MARGIN);
    if (this.actualPlacement === PopoverPlacement_default.End) {
      left = Math.max(left, this._left);
    }
    let top = clamp_default(this._top, Popover_1.VIEWPORT_MARGIN, document.documentElement.clientHeight - popoverSize.height - Popover_1.VIEWPORT_MARGIN);
    if (this.actualPlacement === PopoverPlacement_default.Bottom) {
      top = Math.max(top, this._top);
    }
    this.arrowTranslateX = placement.arrow.x;
    this.arrowTranslateY = placement.arrow.y;
    top = this._adjustForIOSKeyboard(top);
    Object.assign(this.style, {
      top: `${top}px`,
      left: `${left}px`
    });
    if (this.horizontalAlign === PopoverHorizontalAlign_default.Stretch && this._width) {
      this.style.width = this._width;
    }
    if (this.verticalAlign === PopoverVerticalAlign_default.Stretch && this._height) {
      this.style.height = this._height;
    }
  }
  /**
   * Adjust the desired top position to compensate for shift of the screen
   * caused by opened keyboard on iOS which affects all elements with position:fixed.
   * @private
   * @param top The target top in px.
   * @returns The adjusted top in px.
   */
  _adjustForIOSKeyboard(top) {
    if (!isIOS()) {
      return top;
    }
    const actualTop = Math.ceil(this.getBoundingClientRect().top);
    return top + (Number.parseInt(this.style.top || "0") - actualTop);
  }
  getPopoverSize() {
    const rect = this.getBoundingClientRect(), width = rect.width, height = rect.height;
    return { width, height };
  }
  _showOutsideViewport() {
    Object.assign(this.style, {
      top: "-10000px",
      left: "-10000px"
    });
  }
  _isUI5AbstractElement(el) {
    return instanceOfUI5Element(el) && el.isUI5AbstractElement;
  }
  get arrowDOM() {
    return this.shadowRoot.querySelector(".ui5-popover-arrow");
  }
  /**
   * @protected
   */
  focusOpener() {
    var _a2;
    (_a2 = this.getOpenerHTMLElement(this.opener)) == null ? void 0 : _a2.focus();
  }
  /**
   * @private
   */
  calcPlacement(targetRect, popoverSize) {
    let left = Popover_1.VIEWPORT_MARGIN;
    let top = 0;
    const allowTargetOverlap = this.allowTargetOverlap;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    let maxHeight = clientHeight;
    let maxWidth = clientWidth;
    const placement = this.getActualPlacement(targetRect, popoverSize);
    this._preventRepositionAndClose = this.shouldCloseDueToNoOpener(targetRect) || this.shouldCloseDueToOverflow(placement, targetRect);
    const isVertical = placement === PopoverPlacement_default.Top || placement === PopoverPlacement_default.Bottom;
    if (this.horizontalAlign === PopoverHorizontalAlign_default.Stretch && isVertical) {
      popoverSize.width = targetRect.width;
      this._width = `${targetRect.width}px`;
    } else if (this.verticalAlign === PopoverVerticalAlign_default.Stretch && !isVertical) {
      popoverSize.height = targetRect.height;
      this._height = `${targetRect.height}px`;
    }
    const arrowOffset = this.hideArrow ? 0 : ARROW_SIZE;
    switch (placement) {
      case PopoverPlacement_default.Top:
        left = this.getVerticalLeft(targetRect, popoverSize);
        top = Math.max(targetRect.top - popoverSize.height - arrowOffset, 0);
        if (!allowTargetOverlap) {
          maxHeight = targetRect.top - arrowOffset;
        }
        break;
      case PopoverPlacement_default.Bottom:
        left = this.getVerticalLeft(targetRect, popoverSize);
        top = targetRect.bottom + arrowOffset;
        if (allowTargetOverlap) {
          top = Math.max(Math.min(top, clientHeight - popoverSize.height), 0);
        } else {
          maxHeight = clientHeight - targetRect.bottom - arrowOffset;
        }
        break;
      case PopoverPlacement_default.Start:
        left = Math.max(targetRect.left - popoverSize.width - arrowOffset, 0);
        top = this.getHorizontalTop(targetRect, popoverSize);
        if (!allowTargetOverlap) {
          maxWidth = targetRect.left - arrowOffset;
        }
        break;
      case PopoverPlacement_default.End:
        left = targetRect.left + targetRect.width + arrowOffset;
        top = this.getHorizontalTop(targetRect, popoverSize);
        if (allowTargetOverlap) {
          left = Math.max(Math.min(left, clientWidth - popoverSize.width), 0);
        } else {
          maxWidth = clientWidth - targetRect.right - arrowOffset;
        }
        break;
    }
    if (isVertical) {
      if (popoverSize.width > clientWidth || left < Popover_1.VIEWPORT_MARGIN) {
        left = Popover_1.VIEWPORT_MARGIN;
      } else if (left + popoverSize.width > clientWidth - Popover_1.VIEWPORT_MARGIN) {
        left = clientWidth - Popover_1.VIEWPORT_MARGIN - popoverSize.width;
      }
    } else {
      if (popoverSize.height > clientHeight || top < Popover_1.VIEWPORT_MARGIN) {
        top = Popover_1.VIEWPORT_MARGIN;
      } else if (top + popoverSize.height > clientHeight - Popover_1.VIEWPORT_MARGIN) {
        top = clientHeight - Popover_1.VIEWPORT_MARGIN - popoverSize.height;
      }
    }
    this._maxHeight = Math.round(maxHeight - Popover_1.VIEWPORT_MARGIN);
    this._maxWidth = Math.round(maxWidth - Popover_1.VIEWPORT_MARGIN);
    if (this._left === void 0 || Math.abs(this._left - left) > 1.5) {
      this._left = Math.round(left);
    }
    if (this._top === void 0 || Math.abs(this._top - top) > 1.5) {
      this._top = Math.round(top);
    }
    const borderRadius = Number.parseInt(window.getComputedStyle(this).getPropertyValue("border-radius"));
    const arrowPos = this.getArrowPosition(targetRect, popoverSize, left, top, isVertical, borderRadius);
    this._left += this.getRTLCorrectionLeft();
    return {
      arrow: arrowPos,
      top: this._top,
      left: this._left,
      placement
    };
  }
  getRTLCorrectionLeft() {
    return parseFloat(window.getComputedStyle(this).left) - this.getBoundingClientRect().left;
  }
  /**
   * Calculates the position for the arrow.
   * @private
   * @param targetRect BoundingClientRect of the target element
   * @param popoverSize Width and height of the popover
   * @param left Left offset of the popover
   * @param top Top offset of the popover
   * @param isVertical If the popover is positioned vertically to the target element
   * @param borderRadius Value of the border-radius property
   * @returns  Arrow's coordinates
   */
  getArrowPosition(targetRect, popoverSize, left, top, isVertical, borderRadius) {
    const horizontalAlign = this._actualHorizontalAlign;
    let arrowXCentered = horizontalAlign === PopoverHorizontalAlign_default.Center || horizontalAlign === PopoverHorizontalAlign_default.Stretch;
    if (horizontalAlign === PopoverHorizontalAlign_default.End && left <= targetRect.left) {
      arrowXCentered = true;
    }
    if (horizontalAlign === PopoverHorizontalAlign_default.Start && left + popoverSize.width >= targetRect.left + targetRect.width) {
      arrowXCentered = true;
    }
    let arrowTranslateX = 0;
    if (isVertical && arrowXCentered) {
      arrowTranslateX = targetRect.left + targetRect.width / 2 - left - popoverSize.width / 2;
    }
    let arrowTranslateY = 0;
    if (!isVertical) {
      arrowTranslateY = targetRect.top + targetRect.height / 2 - top - popoverSize.height / 2;
    }
    const safeRangeForArrowY = popoverSize.height / 2 - borderRadius - ARROW_SIZE / 2;
    arrowTranslateY = clamp_default(arrowTranslateY, -safeRangeForArrowY, safeRangeForArrowY);
    const safeRangeForArrowX = popoverSize.width / 2 - borderRadius - ARROW_SIZE / 2;
    arrowTranslateX = clamp_default(arrowTranslateX, -safeRangeForArrowX, safeRangeForArrowX);
    return {
      x: Math.round(arrowTranslateX),
      y: Math.round(arrowTranslateY)
    };
  }
  /**
   * Fallbacks to new placement, prioritizing `Left` and `Right` placements.
   * @private
   */
  fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) {
    if (targetRect.left > popoverSize.width) {
      return PopoverPlacement_default.Start;
    }
    if (clientWidth - targetRect.right > targetRect.left) {
      return PopoverPlacement_default.End;
    }
    if (clientHeight - targetRect.bottom > popoverSize.height) {
      return PopoverPlacement_default.Bottom;
    }
    if (clientHeight - targetRect.bottom < targetRect.top) {
      return PopoverPlacement_default.Top;
    }
  }
  getActualPlacement(targetRect, popoverSize) {
    const placement = this.placement;
    let actualPlacement = placement;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    switch (placement) {
      case PopoverPlacement_default.Top:
        if (targetRect.top < popoverSize.height && targetRect.top < clientHeight - targetRect.bottom) {
          actualPlacement = PopoverPlacement_default.Bottom;
        }
        break;
      case PopoverPlacement_default.Bottom:
        if (clientHeight - targetRect.bottom < popoverSize.height && clientHeight - targetRect.bottom < targetRect.top) {
          actualPlacement = PopoverPlacement_default.Top;
        }
        break;
      case PopoverPlacement_default.Start:
        if (targetRect.left < popoverSize.width) {
          actualPlacement = this.fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) || placement;
        }
        break;
      case PopoverPlacement_default.End:
        if (clientWidth - targetRect.right < popoverSize.width) {
          actualPlacement = this.fallbackPlacement(clientWidth, clientHeight, targetRect, popoverSize) || placement;
        }
        break;
    }
    return actualPlacement;
  }
  getVerticalLeft(targetRect, popoverSize) {
    const horizontalAlign = this._actualHorizontalAlign;
    let left = Popover_1.VIEWPORT_MARGIN;
    switch (horizontalAlign) {
      case PopoverHorizontalAlign_default.Center:
      case PopoverHorizontalAlign_default.Stretch:
        left = targetRect.left - (popoverSize.width - targetRect.width) / 2;
        break;
      case PopoverHorizontalAlign_default.Start:
        left = targetRect.left;
        break;
      case PopoverHorizontalAlign_default.End:
        left = targetRect.right - popoverSize.width;
        break;
    }
    return left;
  }
  getHorizontalTop(targetRect, popoverSize) {
    let top = 0;
    switch (this.verticalAlign) {
      case PopoverVerticalAlign_default.Center:
      case PopoverVerticalAlign_default.Stretch:
        top = targetRect.top - (popoverSize.height - targetRect.height) / 2;
        break;
      case PopoverVerticalAlign_default.Top:
        top = targetRect.top;
        break;
      case PopoverVerticalAlign_default.Bottom:
        top = targetRect.bottom - popoverSize.height;
        break;
    }
    return top;
  }
  get isModal() {
    return this.modal;
  }
  get _ariaLabelledBy() {
    if (!this._ariaLabel && this._displayHeader) {
      return "ui5-popup-header";
    }
    return void 0;
  }
  get styles() {
    return {
      ...super.styles,
      root: {
        "max-height": this._maxHeight ? `${this._maxHeight}px` : "",
        "max-width": this._maxWidth ? `${this._maxWidth}px` : ""
      },
      arrow: {
        transform: `translate(${this.arrowTranslateX}px, ${this.arrowTranslateY}px)`
      }
    };
  }
  get classes() {
    const allClasses = super.classes;
    allClasses.root["ui5-popover-root"] = true;
    return allClasses;
  }
  /**
   * Hook for descendants to hide header.
   */
  get _displayHeader() {
    return !!(this.header.length || this.headerText);
  }
  /**
   * Hook for descendants to hide footer.
   */
  get _displayFooter() {
    return true;
  }
  get _actualHorizontalAlign() {
    if (this.effectiveDir === "rtl") {
      if (this.horizontalAlign === PopoverHorizontalAlign_default.Start) {
        return PopoverHorizontalAlign_default.End;
      }
      if (this.horizontalAlign === PopoverHorizontalAlign_default.End) {
        return PopoverHorizontalAlign_default.Start;
      }
    }
    return this.horizontalAlign;
  }
};
__decorate8([
  property_default()
], Popover.prototype, "headerText", void 0);
__decorate8([
  property_default()
], Popover.prototype, "placement", void 0);
__decorate8([
  property_default()
], Popover.prototype, "horizontalAlign", void 0);
__decorate8([
  property_default()
], Popover.prototype, "verticalAlign", void 0);
__decorate8([
  property_default({ type: Boolean })
], Popover.prototype, "modal", void 0);
__decorate8([
  property_default({ type: Boolean })
], Popover.prototype, "hideArrow", void 0);
__decorate8([
  property_default({ type: Boolean })
], Popover.prototype, "allowTargetOverlap", void 0);
__decorate8([
  property_default({ type: Number, noAttribute: true })
], Popover.prototype, "arrowTranslateX", void 0);
__decorate8([
  property_default({ type: Number, noAttribute: true })
], Popover.prototype, "arrowTranslateY", void 0);
__decorate8([
  property_default()
], Popover.prototype, "actualPlacement", void 0);
__decorate8([
  property_default({ type: Number, noAttribute: true })
], Popover.prototype, "_maxHeight", void 0);
__decorate8([
  property_default({ type: Number, noAttribute: true })
], Popover.prototype, "_maxWidth", void 0);
__decorate8([
  slot_default({ type: HTMLElement })
], Popover.prototype, "header", void 0);
__decorate8([
  slot_default({ type: HTMLElement })
], Popover.prototype, "footer", void 0);
__decorate8([
  property_default({ converter: DOMReference_default })
], Popover.prototype, "opener", null);
Popover = Popover_1 = __decorate8([
  customElement_default({
    tag: "ui5-popover",
    styles: [
      Popup_default.styles,
      PopupsCommon_css_default,
      Popover_css_default,
      getEffectiveScrollbarStyle_default()
    ],
    template: PopoverTemplate
  })
], Popover);
var instanceOfPopover = (object) => {
  return "opener" in object;
};
Popover.define();
var Popover_default = Popover;

// node_modules/@ui5/webcomponents/dist/generated/themes/ResponsivePopover.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ResponsivePopover_css_default = `:host{--_ui5-v2-9-0_input_width: 100%;min-width:6.25rem;min-height:2rem}:host([on-phone]){display:contents}.ui5-responsive-popover-header{height:var(--_ui5-v2-9-0-responsive_popover_header_height);display:flex;justify-content:var(--_ui5-v2-9-0_popup_header_prop_header_text_alignment);align-items:center;width:100%}.ui5-responsive-popover-header-text{width:calc(100% - var(--_ui5-v2-9-0_button_base_min_width))}.ui5-responsive-popover-header-no-title{justify-content:flex-end}
`;

// node_modules/@ui5/webcomponents/dist/ResponsivePopover.js
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ResponsivePopover_1;
var ResponsivePopover = ResponsivePopover_1 = class ResponsivePopover2 extends Popover_default {
  constructor() {
    super();
    this.contentOnlyOnDesktop = false;
    this._hideHeader = false;
    this._hideCloseButton = false;
  }
  async openPopup() {
    if (!isPhone()) {
      await super.openPopup();
    } else if (this._dialog) {
      this._dialog.open = true;
    }
  }
  async _show() {
    if (!isPhone()) {
      return super._show();
    }
  }
  _dialogCloseButtonClick() {
    this.closePopup();
  }
  /**
   * Closes the popover/dialog.
   * @override
   */
  closePopup(escPressed = false, preventRegistryUpdate = false, preventFocusRestore = false) {
    var _a2;
    if (!isPhone()) {
      super.closePopup(escPressed, preventRegistryUpdate, preventFocusRestore);
    } else {
      (_a2 = this._dialog) == null ? void 0 : _a2.closePopup(escPressed, preventRegistryUpdate, preventFocusRestore);
    }
  }
  toggle(opener) {
    if (this.open) {
      this.closePopup();
      return;
    }
    this.opener = opener;
    this.open = true;
  }
  get classes() {
    const allClasses = super.classes;
    allClasses.header = {
      "ui5-responsive-popover-header": true,
      "ui5-responsive-popover-header-no-title": !this.headerText
    };
    return allClasses;
  }
  get _dialog() {
    return this.shadowRoot.querySelector("[ui5-dialog]");
  }
  get contentDOM() {
    return isPhone() ? this._dialog.contentDOM : super.contentDOM;
  }
  get _isPhone() {
    return isPhone();
  }
  get _displayHeader() {
    return (isPhone() || !this.contentOnlyOnDesktop) && super._displayHeader;
  }
  get _displayFooter() {
    return isPhone() || !this.contentOnlyOnDesktop;
  }
  get _closeDialogAriaLabel() {
    return ResponsivePopover_1.i18nBundle.getText(RESPONSIVE_POPOVER_CLOSE_DIALOG_BUTTON);
  }
  _beforeDialogOpen() {
    this._opened = true;
    this.open = true;
    this.fireDecoratorEvent("before-open");
  }
  _afterDialogOpen() {
    this.fireDecoratorEvent("open");
  }
  _beforeDialogClose(e) {
    this.fireDecoratorEvent("before-close", e.detail);
  }
  _afterDialogClose() {
    this._opened = false;
    this.open = false;
    this.fireDecoratorEvent("close");
  }
  get isModal() {
    if (!isPhone()) {
      return super.isModal;
    }
    return this._dialog.isModal;
  }
};
__decorate9([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "contentOnlyOnDesktop", void 0);
__decorate9([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "_hideHeader", void 0);
__decorate9([
  property_default({ type: Boolean })
], ResponsivePopover.prototype, "_hideCloseButton", void 0);
__decorate9([
  i18n_default("@ui5/webcomponents")
], ResponsivePopover, "i18nBundle", void 0);
ResponsivePopover = ResponsivePopover_1 = __decorate9([
  customElement_default({
    tag: "ui5-responsive-popover",
    styles: [Popover_default.styles, ResponsivePopover_css_default],
    template: ResponsivePopoverTemplate
  })
], ResponsivePopover);
ResponsivePopover.define();
var ResponsivePopover_default = ResponsivePopover;

// node_modules/@ui5/webcomponents-icons/dist/v4/slim-arrow-down.js
var name13 = "slim-arrow-down";
var pathData13 = "M420.5 187q11-12 23 0 5 5 5 11t-5 11l-165 165q-10 9-23 9t-22-9l-166-165q-5-5-5-11.5t5-11.5 11.5-5 11.5 5l160 160q5 6 11 0z";
var ltr13 = false;
var collection13 = "SAP-icons-v4";
var packageName13 = "@ui5/webcomponents-icons";
registerIcon(name13, { pathData: pathData13, ltr: ltr13, collection: collection13, packageName: packageName13 });

// node_modules/@ui5/webcomponents-icons/dist/v5/slim-arrow-down.js
var name14 = "slim-arrow-down";
var pathData14 = "M96 186q0-11 7.5-18.5T122 160q10 0 18 8l116 121 116-121q8-8 18-8 11 0 18.5 7.5T416 186q0 10-7 17L275 344q-8 8-19 8-12 0-18-8L103 203q-7-7-7-17z";
var ltr14 = false;
var collection14 = "SAP-icons-v5";
var packageName14 = "@ui5/webcomponents-icons";
registerIcon(name14, { pathData: pathData14, ltr: ltr14, collection: collection14, packageName: packageName14 });

// node_modules/@ui5/webcomponents-icons/dist/slim-arrow-down.js
var slim_arrow_down_default = "slim-arrow-down";

// node_modules/@ui5/webcomponents/dist/SelectPopoverTemplate.js
function SelectPopoverTemplate() {
  return jsxs(Fragment, { children: [this.options.length > 0 && jsxs(ResponsivePopover_default, { class: {
    "ui5-select-popover": true,
    ...this.classes.popover
  }, part: "popover", style: this.styles.responsivePopover, placement: "Bottom", horizontalAlign: "Start", hideArrow: true, preventInitialFocus: true, onOpen: this._afterOpen, onBeforeOpen: this._beforeOpen, onClose: this._afterClose, onKeyDown: this._onkeydown, children: [this._isPhone && jsxs("div", { slot: "header", class: "ui5-responsive-popover-header", children: [jsxs("div", { class: "row", children: [jsx("span", { children: this._headerTitleText }), jsx(Button_default, { class: "ui5-responsive-popover-close-btn", icon: decline_default, design: "Transparent", onClick: this._toggleRespPopover })] }), this.hasValueStateText && jsx("div", { class: {
    "row": true,
    "ui5-select-value-state-dialog-header": true,
    ...this.classes.popoverValueState
  }, children: this._isPickerOpen && valueStateMessage.call(this) })] }), !this._isPhone && this.hasValueStateText && jsxs("div", { class: this.classes.popoverValueState, style: this.styles.responsivePopoverHeader, children: [jsx(Icon_default, { class: "ui5-input-value-state-message-icon", name: this._valueStateMessageInputIcon }), this._isPickerOpen && valueStateMessage.call(this)] }), jsx(List_default, { separators: "None", onMouseDown: this._itemMousedown, onItemClick: this._handleItemPress, accessibleRole: "ListBox", children: jsx("slot", {}) })] }), this.shouldOpenValueStateMessagePopover && jsx(Popover_default, { part: "popover", class: "ui5-valuestatemessage-popover", preventInitialFocus: true, preventFocusRestore: true, hideArrow: true, placement: "Bottom", horizontalAlign: "Start", children: jsxs("div", { class: this.classes.popoverValueState, style: this.styles.popoverHeader, children: [jsx(Icon_default, { class: "ui5-input-value-state-message-icon", name: this._valueStateMessageInputIcon }), valueStateMessage.call(this)] }) })] });
}
function valueStateMessage() {
  return jsx(Fragment, { children: this.shouldDisplayDefaultValueStateMessage ? this.valueStateText : jsx("slot", { onClick: this._applyFocus, name: "valueStateMessage" }) });
}

// node_modules/@ui5/webcomponents/dist/SelectTemplate.js
function SelectTemplate() {
  return jsxs(Fragment, { children: [jsxs("div", { class: {
    "ui5-select-root": true,
    "ui5-input-focusable-element": true
  }, id: `${this._id}-select`, onClick: this._onclick, title: this.tooltip, children: [!this.icon && this.selectedOptionIcon && jsx(Icon_default, { mode: "Decorative", class: "ui5-select-option-icon", name: this.selectedOptionIcon }), jsx("div", { class: "ui5-select-label-root", "data-sap-focus-ref": true, tabindex: this._effectiveTabIndex, role: "combobox", "aria-haspopup": "listbox", "aria-label": this.ariaLabelText, "aria-describedby": this.valueStateTextId, "aria-disabled": this.isDisabled, "aria-required": this.required, "aria-readonly": this.readonly, "aria-expanded": this._isPickerOpen, "aria-roledescription": this._ariaRoleDescription, onKeyDown: this._onkeydown, onKeyPress: this._handleKeyboardNavigation, onKeyUp: this._onkeyup, onFocusIn: this._onfocusin, onFocusOut: this._onfocusout, children: this.hasCustomLabel ? jsx("slot", { name: "label" }) : this.text }), this.icon && jsx(Icon_default, { name: this.icon, class: {
    "inputIcon": true,
    "inputIcon--pressed": this._iconPressed
  } }), !this.icon && !this.readonly && jsx(Icon_default, { part: "icon", name: slim_arrow_down_default, class: {
    "inputIcon": true,
    "inputIcon--pressed": this._iconPressed
  } }), this.hasValueState && jsx("span", { id: `${this._id}-valueStateDesc`, class: "ui5-hidden-text", children: this.valueStateText })] }), SelectPopoverTemplate.call(this)] });
}

// node_modules/@ui5/webcomponents/dist/generated/themes/Select.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Select_css_default = `:host{vertical-align:middle}.ui5-hidden-text{position:absolute;clip:rect(1px,1px,1px,1px);user-select:none;left:-1000px;top:-1000px;pointer-events:none;font-size:0}.inputIcon{color:var(--_ui5-v2-9-0_input_icon_color);cursor:pointer;outline:none;padding:var(--_ui5-v2-9-0_input_icon_padding);border-inline-start:var(--_ui5-v2-9-0_input_icon_border);min-width:1rem;min-height:1rem;border-radius:var(--_ui5-v2-9-0_input_icon_border_radius)}.inputIcon.inputIcon--pressed{background:var(--_ui5-v2-9-0_input_icon_pressed_bg);box-shadow:var(--_ui5-v2-9-0_input_icon_box_shadow);border-inline-start:var(--_ui5-v2-9-0_select_hover_icon_left_border);color:var(--_ui5-v2-9-0_input_icon_pressed_color)}.inputIcon:active{background-color:var(--sapButton_Active_Background);box-shadow:var(--_ui5-v2-9-0_input_icon_box_shadow);border-inline-start:var(--_ui5-v2-9-0_select_hover_icon_left_border);color:var(--_ui5-v2-9-0_input_icon_pressed_color)}.inputIcon:not(.inputIcon--pressed):not(:active):hover{background:var(--_ui5-v2-9-0_input_icon_hover_bg);box-shadow:var(--_ui5-v2-9-0_input_icon_box_shadow)}.inputIcon:hover{border-inline-start:var(--_ui5-v2-9-0_select_hover_icon_left_border);box-shadow:var(--_ui5-v2-9-0_input_icon_box_shadow)}:host(:not([hidden])){display:inline-block}:host{width:var(--_ui5-v2-9-0_input_width);min-width:calc(var(--_ui5-v2-9-0_input_min_width) + (var(--_ui5-v2-9-0-input-icons-count)*var(--_ui5-v2-9-0_input_icon_width)));margin:var(--_ui5-v2-9-0_input_margin_top_bottom) 0;height:var(--_ui5-v2-9-0_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);font-style:normal;border:var(--_ui5-v2-9-0-input-border);border-radius:var(--_ui5-v2-9-0_input_border_radius);box-sizing:border-box;text-align:start;transition:var(--_ui5-v2-9-0_input_transition);background:var(--sapField_BackgroundStyle);background-color:var(--_ui5-v2-9-0_input_background_color)}:host(:not([readonly])),:host([readonly][disabled]){box-shadow:var(--sapField_Shadow)}:host([focused]:not([opened])){border-color:var(--_ui5-v2-9-0_input_focused_border_color);background-color:var(--sapField_Focus_Background)}.ui5-input-focusable-element{position:relative}:host([focused]:not([opened])) .ui5-input-focusable-element:after{content:var(--ui5-v2-9-0_input_focus_pseudo_element_content);position:absolute;pointer-events:none;z-index:2;border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--_ui5-v2-9-0_input_focus_outline_color);border-radius:var(--_ui5-v2-9-0_input_focus_border_radius);top:var(--_ui5-v2-9-0_input_focus_offset);bottom:var(--_ui5-v2-9-0_input_focus_offset);left:var(--_ui5-v2-9-0_input_focus_offset);right:var(--_ui5-v2-9-0_input_focus_offset)}:host([focused][readonly]:not([opened])) .ui5-input-focusable-element:after{top:var(--_ui5-v2-9-0_input_readonly_focus_offset);bottom:var(--_ui5-v2-9-0_input_readonly_focus_offset);left:var(--_ui5-v2-9-0_input_readonly_focus_offset);right:var(--_ui5-v2-9-0_input_readonly_focus_offset);border-radius:var(--_ui5-v2-9-0_input_readonly_focus_border_radius)}.ui5-input-root:before{content:"";position:absolute;width:calc(100% - 2px);left:1px;bottom:-2px;border-bottom-left-radius:8px;border-bottom-right-radius:8px;height:var(--_ui5-v2-9-0_input_bottom_border_height);transition:var(--_ui5-v2-9-0_input_transition);background-color:var(--_ui5-v2-9-0_input_bottom_border_color)}.ui5-input-root{width:100%;height:100%;position:relative;background:transparent;display:inline-block;outline:none;box-sizing:border-box;color:inherit;transition:border-color .2s ease-in-out;border-radius:var(--_ui5-v2-9-0_input_border_radius);overflow:hidden}:host([disabled]){opacity:var(--_ui5-v2-9-0_input_disabled_opacity);cursor:default;pointer-events:none;background-color:var(--_ui5-v2-9-0-input_disabled_background);border-color:var(--_ui5-v2-9-0_input_disabled_border_color)}:host([disabled]) .ui5-input-root:before,:host([readonly]) .ui5-input-root:before{content:none}[inner-input]{background:transparent;color:inherit;border:none;font-style:inherit;-webkit-appearance:none;-moz-appearance:textfield;padding:var(--_ui5-v2-9-0_input_inner_padding);box-sizing:border-box;width:100%;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit;line-height:inherit;letter-spacing:inherit;word-spacing:inherit;text-align:inherit}[inner-input][inner-input-with-icon]{padding:var(--_ui5-v2-9-0_input_inner_padding_with_icon)}[inner-input][type=search]::-webkit-search-decoration,[inner-input][type=search]::-webkit-search-cancel-button,[inner-input][type=search]::-webkit-search-results-button,[inner-input][type=search]::-webkit-search-results-decoration{display:none}[inner-input]::-ms-reveal,[inner-input]::-ms-clear{display:none}.ui5-input-value-state-icon{height:100%;display:var(--_ui5-v2-9-0-input-value-state-icon-display);align-items:center}.ui5-input-value-state-icon>svg{margin-right:8px}[inner-input]::selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}:host([disabled]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-webkit-input-placeholder{visibility:hidden}:host([disabled]) [inner-input]::-moz-placeholder{visibility:hidden}:host([readonly]) [inner-input]::-moz-placeholder{visibility:hidden}[inner-input]::-webkit-input-placeholder{font-weight:400;font-style:var(--_ui5-v2-9-0_input_placeholder_style);color:var(--_ui5-v2-9-0_input_placeholder_color);padding-right:.125rem}[inner-input]::-moz-placeholder{font-weight:400;font-style:var(--_ui5-v2-9-0_input_placeholder_style);color:var(--_ui5-v2-9-0_input_placeholder_color);padding-right:.125rem}:host([value-state="Negative"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-9-0-input_error_placeholder_color);font-weight:var(--_ui5-v2-9-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Negative"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-9-0-input_error_placeholder_color);font-weight:var(--_ui5-v2-9-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Critical"]) [inner-input]::-webkit-input-placeholder{font-weight:var(--_ui5-v2-9-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Critical"]) [inner-input]::-moz-placeholder{font-weight:var(--_ui5-v2-9-0_input_value_state_error_warning_placeholder_font_weight)}:host([value-state="Positive"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-9-0_input_placeholder_color)}:host([value-state="Positive"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-9-0_input_placeholder_color)}:host([value-state="Information"]) [inner-input]::-webkit-input-placeholder{color:var(--_ui5-v2-9-0_input_placeholder_color)}:host([value-state="Information"]) [inner-input]::-moz-placeholder{color:var(--_ui5-v2-9-0_input_placeholder_color)}.ui5-input-content{height:100%;box-sizing:border-box;display:flex;flex-direction:row;justify-content:flex-end;overflow:hidden;outline:none;background:transparent;color:inherit;border-radius:var(--_ui5-v2-9-0_input_border_radius)}:host([readonly]:not([disabled])){border:var(--_ui5-v2-9-0_input_readonly_border);background:var(--sapField_ReadOnly_BackgroundStyle);background-color:var(--_ui5-v2-9-0_input_readonly_background)}:host([value-state="None"]:not([readonly]):hover),:host(:not([value-state]):not([readonly]):hover){border:var(--_ui5-v2-9-0_input_hover_border);border-color:var(--_ui5-v2-9-0_input_focused_border_color);box-shadow:var(--sapField_Hover_Shadow);background:var(--sapField_Hover_BackgroundStyle);background-color:var(--sapField_Hover_Background)}:host(:not([value-state]):not([readonly])[focused]:not([opened]):hover),:host([value-state="None"]:not([readonly])[focused]:not([opened]):hover){box-shadow:none}:host([focused]):not([opened]) .ui5-input-root:before{content:none}:host(:not([readonly]):not([disabled])[value-state]:not([value-state="None"])){border-width:var(--_ui5-v2-9-0_input_state_border_width)}:host([value-state="Negative"]) [inner-input],:host([value-state="Critical"]) [inner-input]{font-style:var(--_ui5-v2-9-0_input_error_warning_font_style);text-indent:var(--_ui5-v2-9-0_input_error_warning_text_indent)}:host([value-state="Negative"]) [inner-input]{font-weight:var(--_ui5-v2-9-0_input_error_font_weight)}:host([value-state="Critical"]) [inner-input]{font-weight:var(--_ui5-v2-9-0_input_warning_font_weight)}:host([value-state="Negative"]:not([readonly]):not([disabled])){background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border-color:var(--_ui5-v2-9-0_input_value_state_error_border_color);box-shadow:var(--sapField_InvalidShadow)}:host([value-state="Negative"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-9-0_input_focused_value_state_error_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_error_border_color)}:host([value-state="Negative"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-9-0_input_focused_value_state_error_focus_outline_color)}:host([value-state="Negative"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-9-0-input-value-state-error-border-botom-color)}:host([value-state="Negative"]:not([readonly]):not([focused]):hover),:host([value-state="Negative"]:not([readonly])[focused][opened]:hover){background-color:var(--_ui5-v2-9-0_input_value_state_error_hover_background);box-shadow:var(--sapField_Hover_InvalidShadow)}:host([value-state="Negative"]:not([readonly]):not([disabled])),:host([value-state="Critical"]:not([readonly]):not([disabled])),:host([value-state="Information"]:not([readonly]):not([disabled])){border-style:var(--_ui5-v2-9-0_input_error_warning_border_style)}:host([value-state="Critical"]:not([readonly]):not([disabled])){background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border-color:var(--_ui5-v2-9-0_input_value_state_warning_border_color);box-shadow:var(--sapField_WarningShadow)}:host([value-state="Critical"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_border_color)}:host([value-state="Critical"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_focus_outline_color)}:host([value-state="Critical"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-9-0_input_value_state_warning_border_botom_color)}:host([value-state="Critical"]:not([readonly]):not([focused]):hover),:host([value-state="Critical"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_WarningShadow)}:host([value-state="Positive"]:not([readonly]):not([disabled])){background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border-color:var(--_ui5-v2-9-0_input_value_state_success_border_color);border-width:var(--_ui5-v2-9-0_input_value_state_success_border_width);box-shadow:var(--sapField_SuccessShadow)}:host([value-state="Positive"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-9-0_input_focused_value_state_success_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_success_border_color)}:host([value-state="Positive"][focused]:not([opened]):not([readonly])) .ui5-input-focusable-element:after{border-color:var(--_ui5-v2-9-0_input_focused_value_state_success_focus_outline_color)}:host([value-state="Positive"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-9-0_input_value_state_success_border_botom_color)}:host([value-state="Positive"]:not([readonly]):not([focused]):hover),:host([value-state="Positive"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_SuccessShadow)}:host([value-state="Information"]:not([readonly]):not([disabled])){background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border-color:var(--_ui5-v2-9-0_input_value_state_information_border_color);border-width:var(--_ui5-v2-9-0_input_information_border_width);box-shadow:var(--sapField_InformationShadow)}:host([value-state="Information"][focused]:not([opened]):not([readonly])){background-color:var(--_ui5-v2-9-0_input_focused_value_state_information_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_information_border_color)}:host([value-state="Information"]:not([readonly])) .ui5-input-root:before{background-color:var(--_ui5-v2-9-0_input_value_success_information_border_botom_color)}:host([value-state="Information"]:not([readonly]):not([focused]):hover),:host([value-state="Information"]:not([readonly])[focused][opened]:hover){background-color:var(--sapField_Hover_Background);box-shadow:var(--sapField_Hover_InformationShadow)}.ui5-input-icon-root{min-width:var(--_ui5-v2-9-0_input_icon_min_width);height:100%;display:flex;justify-content:center;align-items:center}::slotted([ui5-icon][slot="icon"]){align-self:start;padding:var(--_ui5-v2-9-0_input_custom_icon_padding);box-sizing:content-box!important}:host([value-state="Negative"]) .inputIcon,:host([value-state="Critical"]) .inputIcon{padding:var(--_ui5-v2-9-0_input_error_warning_icon_padding)}:host([value-state="Negative"][focused]) .inputIcon,:host([value-state="Critical"][focused]) .inputIcon{padding:var(--_ui5-v2-9-0_input_error_warning_focused_icon_padding)}:host([value-state="Information"]) .inputIcon{padding:var(--_ui5-v2-9-0_input_information_icon_padding)}:host([value-state="Information"][focused]) .inputIcon{padding:var(--_ui5-v2-9-0_input_information_focused_icon_padding)}:host([value-state="Negative"]) ::slotted(.inputIcon[ui5-icon]),:host([value-state="Negative"]) ::slotted([ui5-icon][slot="icon"]),:host([value-state="Critical"]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-9-0_input_error_warning_custom_icon_padding)}:host([value-state="Negative"][focused]) ::slotted(.inputIcon[ui5-icon]),:host([value-state="Negative"][focused]) ::slotted([ui5-icon][slot="icon"]),:host([value-state="Critical"][focused]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-9-0_input_error_warning_custom_focused_icon_padding)}:host([value-state="Information"]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-9-0_input_information_custom_icon_padding)}:host([value-state="Information"][focused]) ::slotted([ui5-icon][slot="icon"]){padding:var(--_ui5-v2-9-0_input_information_custom_focused_icon_padding)}:host([value-state="Negative"]) .inputIcon:active,:host([value-state="Negative"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-9-0_input_error_icon_box_shadow);color:var(--_ui5-v2-9-0_input_icon_error_pressed_color)}:host([value-state="Negative"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-9-0_input_error_icon_box_shadow)}:host([value-state="Critical"]) .inputIcon:active,:host([value-state="Critical"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-9-0_input_warning_icon_box_shadow);color:var(--_ui5-v2-9-0_input_icon_warning_pressed_color)}:host([value-state="Critical"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-9-0_input_warning_icon_box_shadow)}:host([value-state="Information"]) .inputIcon:active,:host([value-state="Information"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-9-0_input_information_icon_box_shadow);color:var(--_ui5-v2-9-0_input_icon_information_pressed_color)}:host([value-state="Information"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-9-0_input_information_icon_box_shadow)}:host([value-state="Positive"]) .inputIcon:active,:host([value-state="Positive"]) .inputIcon.inputIcon--pressed{box-shadow:var(--_ui5-v2-9-0_input_success_icon_box_shadow);color:var(--_ui5-v2-9-0_input_icon_success_pressed_color)}:host([value-state="Positive"]) .inputIcon:not(.inputIcon--pressed):not(:active):hover{box-shadow:var(--_ui5-v2-9-0_input_success_icon_box_shadow)}.ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-9-0_input_icon_wrapper_height);padding:0;width:var(--_ui5-v2-9-0_input_icon_width);min-width:var(--_ui5-v2-9-0_input_icon_width);display:flex;justify-content:center;align-items:center;box-sizing:border-box}:host([value-state]:not([value-state="None"]):not([value-state="Positive"])) .ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-9-0_input_icon_wrapper_state_height);vertical-align:top}:host([value-state="Positive"]) .ui5-input-clear-icon-wrapper{height:var(--_ui5-v2-9-0_input_icon_wrapper_success_state_height)}[ui5-icon].ui5-input-clear-icon{padding:0;color:inherit}[inner-input]::-webkit-outer-spin-button,[inner-input]::-webkit-inner-spin-button{-webkit-appearance:inherit;margin:inherit}:host([icon]){min-width:var(--_ui5-v2-9-0_button_base_min_width);width:var(--_ui5-v2-9-0_button_base_min_width)}:host([icon]) .ui5-select-root{min-width:var(--_ui5-v2-9-0_button_base_min_width)}:host([icon]) .ui5-select-label-root{min-width:0;padding-inline-start:0}.ui5-select-root{min-width:calc(var(--_ui5-v2-9-0_input_min_width) + (var(--_ui5-v2-9-0-input-icons-count)*var(--_ui5-v2-9-0_input_icon_width)));width:100%;height:100%;display:flex;outline:none;cursor:pointer;overflow:hidden;border-radius:var(--_ui5-v2-9-0_input_border_radius)}.ui5-select-label-root{flex-shrink:1;flex-grow:1;align-self:center;min-width:1rem;padding-inline-start:.5rem;cursor:pointer;outline:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--_ui5-v2-9-0_select_label_color);font-family:"72override",var(--sapFontFamily);font-size:var(--sapFontSize);font-weight:400}.ui5-select-option-icon{padding-inline-start:.5rem;color:var(--sapField_TextColor);align-self:center}:host(:not([disabled])){cursor:pointer}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/ResponsivePopoverCommon.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ResponsivePopoverCommon_css_default = `.input-root-phone{flex:1;position:relative;height:var(--_ui5-v2-9-0_input_height);color:var(--sapField_TextColor);font-size:var(--sapFontSize);font-family:"72override",var(--sapFontFamily);background:var(--sapField_BackgroundStyle);background-color:var(--_ui5-v2-9-0_input_background_color);border:var(--_ui5-v2-9-0-input-border);border-radius:var(--_ui5-v2-9-0_input_border_radius);box-sizing:border-box}.input-root-phone [inner-input]{padding:0 .5rem;width:100%;height:100%}.input-root-phone [inner-input]:focus{background-color:var(--sapField_Focus_Background)}.input-root-phone:focus-within:before{content:"";position:absolute;pointer-events:none;z-index:2;border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);border-radius:var(--_ui5-v2-9-0_input_focus_border_radius);top:var(--_ui5-v2-9-0_input_focus_offset);bottom:var(--_ui5-v2-9-0_input_focus_offset);left:var(--_ui5-v2-9-0_input_focus_offset);right:var(--_ui5-v2-9-0_input_focus_offset)}.input-root-phone [value-state=Negative] .inputIcon[data-ui5-compact-size],.input-root-phone [value-state=Positive] .inputIcon[data-ui5-compact-size],.input-root-phone [value-state=Critical] .inputIcon[data-ui5-compact-size]{padding:.1875rem .5rem}[inner-input]{background:transparent;color:inherit;border:none;font-style:normal;-webkit-appearance:none;-moz-appearance:textfield;line-height:normal;padding:var(--_ui5-v2-9-0_input_inner_padding);box-sizing:border-box;min-width:3rem;text-overflow:ellipsis;flex:1;outline:none;font-size:inherit;font-family:inherit;border-radius:var(--_ui5-v2-9-0_input_border_radius)}[inner-input]::selection,[inner-input]::-moz-selection{background:var(--sapSelectedColor);color:var(--sapContent_ContrastTextColor)}[inner-input]::-webkit-input-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}[inner-input]::-moz-placeholder{font-style:italic;color:var(--sapField_PlaceholderTextColor)}.input-root-phone[value-state]:not([value-state=None]){border-width:var(--_ui5-v2-9-0_input_state_border_width)}.input-root-phone[value-state=Negative] [inner-input],.input-root-phone[value-state=Critical] [inner-input]{font-style:var(--_ui5-v2-9-0_input_error_warning_font_style)}.input-root-phone[value-state=Negative] [inner-input]{font-weight:var(--_ui5-v2-9-0_input_error_font_weight)}.input-root-phone[value-state=Negative]:not([readonly]){background:var(--sapField_InvalidBackgroundStyle);background-color:var(--sapField_InvalidBackground);border-color:var(--_ui5-v2-9-0_input_value_state_error_border_color)}.input-root-phone[value-state=Negative]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-9-0_input_focused_value_state_error_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_error_border_color)}.input-root-phone[value-state=Negative]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-9-0_input_focused_value_state_error_focus_outline_color)}.input-root-phone[value-state=Negative]:not([readonly]):not([disabled]),.input-root-phone[value-state=Critical]:not([readonly]):not([disabled]),.input-root-phone[value-state=Information]:not([readonly]):not([disabled]){border-style:var(--_ui5-v2-9-0_input_error_warning_border_style)}.input-root-phone[value-state=Critical]:not([readonly]){background:var(--sapField_WarningBackgroundStyle);background-color:var(--sapField_WarningBackground);border-color:var(--_ui5-v2-9-0_input_value_state_warning_border_color)}.input-root-phone[value-state=Critical]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_border_color)}.input-root-phone[value-state=Critical]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-9-0_input_focused_value_state_warning_focus_outline_color)}.input-root-phone[value-state=Positive]:not([readonly]){background:var(--sapField_SuccessBackgroundStyle);background-color:var(--sapField_SuccessBackground);border-color:var(--_ui5-v2-9-0_input_value_state_success_border_color);border-width:var(--_ui5-v2-9-0_input_value_state_success_border_width)}.input-root-phone[value-state=Positive]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-9-0_input_focused_value_state_success_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_success_border_color)}.input-root-phone[value-state=Positive]:not([readonly]):focus-within:before{border-color:var(--_ui5-v2-9-0_input_focused_value_state_success_focus_outline_color)}.input-root-phone[value-state=Information]:not([readonly]){background:var(--sapField_InformationBackgroundStyle);background-color:var(--sapField_InformationBackground);border-color:var(--_ui5-v2-9-0_input_value_state_information_border_color);border-width:var(--_ui5-v2-9-0_input_information_border_width)}.input-root-phone[value-state=Information]:not([readonly]) [inner-input]:focus{background-color:var(--_ui5-v2-9-0_input_focused_value_state_information_background);border-color:var(--_ui5-v2-9-0_input_focused_value_state_information_border_color)}.ui5-multi-combobox-toggle-button{margin-left:.5rem}.ui5-responsive-popover-header{width:100%;min-height:2.5rem;display:flex;flex-direction:column}.ui5-responsive-popover-header-text{width:calc(100% - var(--_ui5-v2-9-0_button_base_min_width))}.ui5-responsive-popover-header .row{box-sizing:border-box;padding:.25rem 1rem;min-height:2.5rem;display:flex;justify-content:center;align-items:center;font-size:var(--sapFontHeader5Size)}.ui5-responsive-popover-footer{display:flex;justify-content:flex-end;padding:.25rem 0;width:100%}.ui5-responsive-popover-close-btn{position:absolute;right:1rem}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/ValueStateMessage.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ValueStateMessage_css_default = `.ui5-valuestatemessage-popover{border-radius:var(--_ui5-v2-9-0_value_state_message_popover_border_radius);box-shadow:var(--_ui5-v2-9-0_value_state_message_popover_box_shadow)}.ui5-input-value-state-message-icon{width:var(--_ui5-v2-9-0_value_state_message_icon_width);height:var(--_ui5-v2-9-0_value_state_message_icon_height);display:var(--_ui5-v2-9-0_input_value_state_icon_display);position:absolute;padding-right:.375rem}.ui5-valuestatemessage-root .ui5-input-value-state-message-icon{left:var(--_ui5-v2-9-0_input_value_state_icon_offset)}.ui5-input-value-state-message-icon[name=error]{color:var(--sapNegativeElementColor)}.ui5-input-value-state-message-icon[name=alert]{color:var(--sapCriticalElementColor)}.ui5-input-value-state-message-icon[name=success]{color:var(--sapPositiveElementColor)}.ui5-input-value-state-message-icon[name=information]{color:var(--sapInformativeElementColor)}.ui5-valuestatemessage-root{box-sizing:border-box;display:inline-block;color:var(--sapTextColor);font-size:var(--sapFontSmallSize);font-family:"72override",var(--sapFontFamily);height:auto;padding:var(--_ui5-v2-9-0_value_state_message_padding);overflow:hidden;text-overflow:ellipsis;min-width:6.25rem;border:var(--_ui5-v2-9-0_value_state_message_border);line-height:var(--_ui5-v2-9-0_value_state_message_line_height)}[ui5-responsive-popover] .ui5-valuestatemessage-header,[ui5-popover] .ui5-valuestatemessage-header{min-height:2rem}[ui5-responsive-popover] .ui5-valuestatemessage-header{padding:var(--_ui5-v2-9-0_value_state_header_padding);border:var(--_ui5-v2-9-0_value_state_header_border);border-bottom:var(--_ui5-v2-9-0_value_state_header_border_bottom);flex-grow:1;position:relative}.ui5-valuestatemessage--success{background:var(--sapSuccessBackground)}.ui5-valuestatemessage--warning{background:var(--sapWarningBackground)}.ui5-valuestatemessage--error{background:var(--sapErrorBackground)}.ui5-valuestatemessage--information{background:var(--sapInformationBackground)}.ui5-responsive-popover-header.ui5-responsive-popover-header--focused,.ui5-responsive-popover-header:focus{outline-offset:var(--_ui5-v2-9-0_value_state_header_offset);outline:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor)}.ui5-valuestatemessage-popover::part(header),.ui5-valuestatemessage-popover::part(content){padding:0}.ui5-valuestatemessage-popover::part(header),.ui5-valuestatemessage-popover::part(footer){min-height:0}.ui5-valuestatemessage-popover::part(header),.ui5-popover-with-value-state-header::part(header),.ui5-popover-with-value-state-header-phone::part(header){margin-bottom:0}.ui5-popover-with-value-state-header-phone .ui5-valuestatemessage-root{padding:var(--_ui5-v2-9-0_value_state_message_padding_phone);width:100%}.ui5-popover-with-value-state-header-phone .ui5-input-value-state-message-icon{left:var(--_ui5-v2-9-0_value_state_message_icon_offset_phone)}.ui5-popover-with-value-state-header-phone .ui5-valuestatemessage-header{position:relative;flex:none;top:0;left:0}.ui5-popover-with-value-state-header-phone::part(content){padding:0;overflow:hidden;display:flex;flex-direction:column}.ui5-popover-with-value-state-header-phone [ui5-list]{overflow:auto}[ui5-responsive-popover] .ui5-valuestatemessage--error{box-shadow:var(--_ui5-v2-9-0_value_state_header_box_shadow_error)}[ui5-responsive-popover] .ui5-valuestatemessage--information{box-shadow:var(--_ui5-v2-9-0_value_state_header_box_shadow_information)}[ui5-responsive-popover] .ui5-valuestatemessage--success{box-shadow:var(--_ui5-v2-9-0_value_state_header_box_shadow_success)}[ui5-responsive-popover] .ui5-valuestatemessage--warning{box-shadow:var(--_ui5-v2-9-0_value_state_header_box_shadow_warning)}[ui5-responsive-popover].ui5-popover-with-value-state-header .ui5-valuestatemessage-root:has(+[ui5-list]:empty){box-shadow:none}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/SelectPopover.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var SelectPopover_css_default = `.ui5-select-popover::part(content),.ui5-select-popover::part(header){padding:0}
`;

// node_modules/@ui5/webcomponents/dist/Select.js
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d2 = decorators[i]) r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Select_1;
var Select = Select_1 = class Select2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.valueState = "None";
    this.required = false;
    this.readonly = false;
    this._iconPressed = false;
    this.opened = false;
    this._listWidth = 0;
    this.focused = false;
    this._selectedIndexBeforeOpen = -1;
    this._escapePressed = false;
    this._lastSelectedOption = null;
    this._typedChars = "";
  }
  get formValidityMessage() {
    return Select_1.i18nBundle.getText(FORM_SELECTABLE_REQUIRED);
  }
  get formValidity() {
    var _a2;
    return { valueMissing: this.required && ((_a2 = this.selectedOption) == null ? void 0 : _a2.getAttribute("value")) === "" };
  }
  async formElementAnchor() {
    return this.getFocusDomRefAsync();
  }
  get formFormattedValue() {
    if (this._valueStorage !== void 0) {
      return this._valueStorage;
    }
    const selectedOption = this.selectedOption;
    if (selectedOption) {
      if ("value" in selectedOption && selectedOption.value) {
        return selectedOption.value;
      }
      return selectedOption.hasAttribute("value") ? selectedOption.getAttribute("value") : selectedOption.textContent;
    }
    return "";
  }
  onBeforeRendering() {
    this._applySelection();
    this.style.setProperty(getScopedVarName("--_ui5-input-icons-count"), `${this.iconsCount}`);
  }
  onAfterRendering() {
    this.toggleValueStatePopover(this.shouldOpenValueStateMessagePopover);
    if (this._isPickerOpen) {
      if (!this._listWidth) {
        this._listWidth = this.responsivePopover.offsetWidth;
      }
    }
  }
  /**
   * Selects an option, based on the Select's "value" property,
   * or the options' "selected" property.
   */
  _applySelection() {
    if (this._valueStorage === void 0) {
      this._applyAutoSelection();
      return;
    }
    this._applySelectionByValue(this._valueStorage);
  }
  /**
   * Selects an option by given value.
   */
  _applySelectionByValue(value) {
    var _a2, _b2;
    if (value !== (((_a2 = this.selectedOption) == null ? void 0 : _a2.value) || ((_b2 = this.selectedOption) == null ? void 0 : _b2.textContent))) {
      const options = Array.from(this.children);
      options.forEach((option) => {
        option.selected = !!((option.getAttribute("value") || option.textContent) === value);
      });
    }
  }
  /**
   * Selects the first option if no option is selected,
   * or selects the last option if multiple options are selected.
   */
  _applyAutoSelection() {
    let selectedIndex = this.options.findLastIndex((option) => option.selected);
    selectedIndex = selectedIndex === -1 ? 0 : selectedIndex;
    for (let i = 0; i < this.options.length; i++) {
      this.options[i].selected = selectedIndex === i;
      if (selectedIndex === i) {
        break;
      }
    }
  }
  /**
   * Sets value by given option.
   */
  _setValueByOption(option) {
    this.value = option.value || option.textContent || "";
  }
  _applyFocus() {
    this.focus();
  }
  _onfocusin() {
    this.focused = true;
  }
  _onfocusout() {
    this.focused = false;
  }
  get _isPickerOpen() {
    return !!this.responsivePopover && this.responsivePopover.open;
  }
  _respPopover() {
    return this.shadowRoot.querySelector("[ui5-responsive-popover]");
  }
  /**
   * Defines the value of the component:
   *
   * - when get - returns the value of the component or the value/text content of the selected option.
   * - when set - selects the option with matching `value` property or text content.
   *
   * **Note:** Use either the Select's value or the Options' selected property.
   * Mixed usage could result in unexpected behavior.
   *
   * **Note:** If the given value does not match any existing option,
   * no option will be selected and the Select component will be displayed as empty.
   * @public
   * @default ""
   * @since 1.20.0
   * @formProperty
   * @formEvents change liveChange
   */
  set value(newValue) {
    this._valueStorage = newValue;
  }
  get value() {
    var _a2, _b2;
    if (this._valueStorage !== void 0) {
      return this._valueStorage;
    }
    return ((_a2 = this.selectedOption) == null ? void 0 : _a2.value) || ((_b2 = this.selectedOption) == null ? void 0 : _b2.textContent) || "";
  }
  get _selectedIndex() {
    return this.options.findIndex((option) => option.selected);
  }
  /**
   * Currently selected `ui5-option` element.
   * @public
   * @default undefined
   */
  get selectedOption() {
    return this.options.find((option) => option.selected);
  }
  get text() {
    var _a2;
    return (_a2 = this.selectedOption) == null ? void 0 : _a2.effectiveDisplayText;
  }
  _toggleRespPopover() {
    if (this.disabled || this.readonly) {
      return;
    }
    this._iconPressed = true;
    this.responsivePopover = this._respPopover();
    if (this._isPickerOpen) {
      this.responsivePopover.open = false;
    } else {
      this.responsivePopover.opener = this;
      this.responsivePopover.open = true;
    }
  }
  _onkeydown(e) {
    const isTab = isTabNext(e) || isTabPrevious(e);
    if (isTab && this._isPickerOpen) {
      this.responsivePopover.open = false;
    } else if (isShow(e)) {
      e.preventDefault();
      this._toggleRespPopover();
    } else if (isSpace(e)) {
      e.preventDefault();
    } else if (isEscape(e) && this._isPickerOpen) {
      this._escapePressed = true;
    } else if (isHome(e)) {
      this._handleHomeKey(e);
    } else if (isEnd(e)) {
      this._handleEndKey(e);
    } else if (isEnter(e)) {
      this._handleSelectionChange();
    } else if (isUp(e) || isDown(e)) {
      this._handleArrowNavigation(e);
    }
  }
  _handleKeyboardNavigation(e) {
    if (isEnter(e) || this.readonly) {
      return;
    }
    const typedCharacter = e.key.toLowerCase();
    this._typedChars += typedCharacter;
    const text = /^(.)\1+$/i.test(this._typedChars) ? typedCharacter : this._typedChars;
    clearTimeout(this._typingTimeoutID);
    this._typingTimeoutID = setTimeout(() => {
      this._typedChars = "";
      this._typingTimeoutID = -1;
    }, 1e3);
    this._selectTypedItem(text);
  }
  _selectTypedItem(text) {
    const currentIndex = this._selectedIndex;
    const itemToSelect = this._searchNextItemByText(text);
    if (itemToSelect) {
      const nextIndex = this.options.indexOf(itemToSelect);
      this._changeSelectedItem(this._selectedIndex, nextIndex);
      if (currentIndex !== this._selectedIndex) {
        this.itemSelectionAnnounce();
        this._scrollSelectedItem();
      }
    }
  }
  _searchNextItemByText(text) {
    let orderedOptions = this.options.slice(0);
    const optionsAfterSelected = orderedOptions.splice(this._selectedIndex + 1, orderedOptions.length - this._selectedIndex);
    const optionsBeforeSelected = orderedOptions.splice(0, orderedOptions.length - 1);
    orderedOptions = optionsAfterSelected.concat(optionsBeforeSelected);
    return orderedOptions.find((option) => option.effectiveDisplayText.toLowerCase().startsWith(text));
  }
  _handleHomeKey(e) {
    e.preventDefault();
    if (this.readonly) {
      return;
    }
    this._changeSelectedItem(this._selectedIndex, 0);
  }
  _handleEndKey(e) {
    e.preventDefault();
    if (this.readonly) {
      return;
    }
    const lastIndex = this.options.length - 1;
    this._changeSelectedItem(this._selectedIndex, lastIndex);
  }
  _onkeyup(e) {
    if (isSpace(e)) {
      if (this._isPickerOpen) {
        this._handleSelectionChange();
      } else {
        this._toggleRespPopover();
      }
    }
  }
  _getItemIndex(item) {
    return this.options.indexOf(item);
  }
  _select(index) {
    const selectedIndex = this._selectedIndex;
    if (index < 0 || index >= this.options.length || this.options.length === 0) {
      return;
    }
    if (this.options[selectedIndex]) {
      this.options[selectedIndex].selected = false;
    }
    const selectedOption = this.options[index];
    if (selectedIndex !== index) {
      this.fireDecoratorEvent("live-change", { selectedOption });
    }
    selectedOption.selected = true;
    if (this._valueStorage !== void 0) {
      this._setValueByOption(selectedOption);
    }
  }
  /**
   * The user clicked on an item from the list
   * @private
   */
  _handleItemPress(e) {
    const listItem = e.detail.item;
    const selectedItemIndex = this._getItemIndex(listItem);
    this._handleSelectionChange(selectedItemIndex);
  }
  _itemMousedown(e) {
    e.preventDefault();
  }
  _onclick() {
    this.getFocusDomRef().focus();
    this._toggleRespPopover();
  }
  /**
   * The user selected an item with Enter or Space
   * @private
   */
  _handleSelectionChange(index = this._selectedIndex) {
    this._typedChars = "";
    this._select(index);
    this._toggleRespPopover();
  }
  _scrollSelectedItem() {
    var _a2;
    if (this._isPickerOpen) {
      const itemRef = (_a2 = this._currentlySelectedOption) == null ? void 0 : _a2.getDomRef();
      if (itemRef) {
        itemRef.scrollIntoView({
          behavior: "auto",
          block: "nearest",
          inline: "nearest"
        });
      }
    }
  }
  _handleArrowNavigation(e) {
    e.preventDefault();
    if (this.readonly) {
      return;
    }
    let nextIndex = -1;
    const currentIndex = this._selectedIndex;
    const isDownKey = isDown(e);
    if (isDownKey) {
      nextIndex = this._getNextOptionIndex();
    } else {
      nextIndex = this._getPreviousOptionIndex();
    }
    this._changeSelectedItem(this._selectedIndex, nextIndex);
    if (currentIndex !== this._selectedIndex) {
      this.itemSelectionAnnounce();
      this._scrollSelectedItem();
    }
  }
  _changeSelectedItem(oldIndex, newIndex) {
    const options = this.options;
    const previousOption = options[oldIndex];
    const nextOption = options[newIndex];
    if (previousOption === nextOption) {
      return;
    }
    previousOption.selected = false;
    previousOption.focused = false;
    nextOption.selected = true;
    nextOption.focused = true;
    if (this._valueStorage !== void 0) {
      this._setValueByOption(nextOption);
    }
    this.fireDecoratorEvent("live-change", { selectedOption: nextOption });
    if (!this._isPickerOpen) {
      this._fireChangeEvent(nextOption);
    }
  }
  _getNextOptionIndex() {
    return this._selectedIndex === this.options.length - 1 ? this._selectedIndex : this._selectedIndex + 1;
  }
  _getPreviousOptionIndex() {
    return this._selectedIndex === 0 ? this._selectedIndex : this._selectedIndex - 1;
  }
  _beforeOpen() {
    this._selectedIndexBeforeOpen = this._selectedIndex;
    this._lastSelectedOption = this.options[this._selectedIndex];
  }
  _afterOpen() {
    this.opened = true;
    this.fireDecoratorEvent("open");
    this.itemSelectionAnnounce();
    this._scrollSelectedItem();
    this._applyFocusToSelectedItem();
  }
  _applyFocusToSelectedItem() {
    this.options.forEach((option) => {
      option.focused = option.selected;
    });
  }
  _afterClose() {
    this.opened = false;
    this._iconPressed = false;
    this._listWidth = 0;
    if (this._escapePressed) {
      this._select(this._selectedIndexBeforeOpen);
      this._escapePressed = false;
    } else if (this._lastSelectedOption !== this.options[this._selectedIndex]) {
      this._fireChangeEvent(this.options[this._selectedIndex]);
      this._lastSelectedOption = this.options[this._selectedIndex];
    }
    this.fireDecoratorEvent("close");
  }
  get hasCustomLabel() {
    return !!this.label.length;
  }
  _fireChangeEvent(selectedOption) {
    const changePrevented = !this.fireDecoratorEvent("change", { selectedOption });
    this.fireDecoratorEvent("selected-item-changed");
    this.fireDecoratorEvent("input");
    if (changePrevented) {
      this._select(this._selectedIndexBeforeOpen);
    }
  }
  get valueStateTextMappings() {
    return {
      [ValueState_default.Positive]: Select_1.i18nBundle.getText(VALUE_STATE_SUCCESS),
      [ValueState_default.Information]: Select_1.i18nBundle.getText(VALUE_STATE_INFORMATION),
      [ValueState_default.Negative]: Select_1.i18nBundle.getText(VALUE_STATE_ERROR),
      [ValueState_default.Critical]: Select_1.i18nBundle.getText(VALUE_STATE_WARNING)
    };
  }
  get valueStateTypeMappings() {
    return {
      [ValueState_default.Positive]: Select_1.i18nBundle.getText(VALUE_STATE_TYPE_SUCCESS),
      [ValueState_default.Information]: Select_1.i18nBundle.getText(VALUE_STATE_TYPE_INFORMATION),
      [ValueState_default.Negative]: Select_1.i18nBundle.getText(VALUE_STATE_TYPE_ERROR),
      [ValueState_default.Critical]: Select_1.i18nBundle.getText(VALUE_STATE_TYPE_WARNING)
    };
  }
  get valueStateText() {
    let valueStateText;
    if (this.shouldDisplayDefaultValueStateMessage) {
      valueStateText = this.valueStateDefaultText;
    } else {
      valueStateText = this.valueStateMessage.map((el) => el.textContent).join(" ");
    }
    return `${this.valueStateTypeText} ${valueStateText}`;
  }
  get valueStateDefaultText() {
    return this.valueState !== ValueState_default.None ? this.valueStateTextMappings[this.valueState] : "";
  }
  get valueStateTypeText() {
    return this.valueState !== ValueState_default.None ? this.valueStateTypeMappings[this.valueState] : "";
  }
  get hasValueState() {
    return this.valueState !== ValueState_default.None;
  }
  get valueStateTextId() {
    return this.hasValueState ? `${this._id}-valueStateDesc` : void 0;
  }
  get isDisabled() {
    return this.disabled || void 0;
  }
  get _headerTitleText() {
    return Select_1.i18nBundle.getText(INPUT_SUGGESTIONS_TITLE);
  }
  get _currentlySelectedOption() {
    return this.options[this._selectedIndex];
  }
  get _effectiveTabIndex() {
    return this.disabled || this.responsivePopover && this.responsivePopover.open ? -1 : 0;
  }
  /**
  * This method is relevant for sap_horizon theme only
  */
  get _valueStateMessageInputIcon() {
    const iconPerValueState = {
      Negative: "error",
      Critical: "alert",
      Positive: "sys-enter-2",
      Information: "information"
    };
    return this.valueState !== ValueState_default.None ? iconPerValueState[this.valueState] : "";
  }
  get iconsCount() {
    return this.selectedOptionIcon ? 2 : 1;
  }
  get classes() {
    return {
      popoverValueState: {
        "ui5-valuestatemessage-root": true,
        "ui5-valuestatemessage--success": this.valueState === ValueState_default.Positive,
        "ui5-valuestatemessage--error": this.valueState === ValueState_default.Negative,
        "ui5-valuestatemessage--warning": this.valueState === ValueState_default.Critical,
        "ui5-valuestatemessage--information": this.valueState === ValueState_default.Information
      },
      popover: {
        "ui5-select-popover-valuestate": this.hasValueState
      }
    };
  }
  get styles() {
    return {
      popoverHeader: {
        "max-width": `${this.offsetWidth}px`
      },
      responsivePopoverHeader: {
        "display": this.options.length && this._listWidth === 0 ? "none" : "inline-block",
        "width": `${this.options.length ? this._listWidth : this.offsetWidth}px`
      },
      responsivePopover: {
        "min-width": `${this.offsetWidth}px`
      }
    };
  }
  get ariaLabelText() {
    return getEffectiveAriaLabelText(this);
  }
  get shouldDisplayDefaultValueStateMessage() {
    return !this.valueStateMessage.length && this.hasValueStateText;
  }
  get hasValueStateText() {
    return this.hasValueState && this.valueState !== ValueState_default.Positive;
  }
  get shouldOpenValueStateMessagePopover() {
    return this.focused && this.hasValueStateText && !this._iconPressed && !this._isPickerOpen && !this._isPhone;
  }
  get _ariaRoleDescription() {
    return Select_1.i18nBundle.getText(SELECT_ROLE_DESCRIPTION);
  }
  get _isPhone() {
    return isPhone();
  }
  itemSelectionAnnounce() {
    let text;
    const optionsCount = this.options.length;
    const itemPositionText = Select_1.i18nBundle.getText(LIST_ITEM_POSITION, this._selectedIndex + 1, optionsCount);
    if (this.focused && this._currentlySelectedOption) {
      text = `${this._currentlySelectedOption.textContent} ${this._isPickerOpen ? itemPositionText : ""}`;
      InvisibleMessage_default(text, InvisibleMessageMode_default.Polite);
    }
  }
  openValueStatePopover() {
    this.valueStatePopover = this._getPopover();
    if (this.valueStatePopover) {
      this.valueStatePopover.opener = this;
      this.valueStatePopover.open = true;
    }
  }
  closeValueStatePopover() {
    this.valueStatePopover && (this.valueStatePopover.open = false);
  }
  toggleValueStatePopover(open) {
    if (open) {
      this.openValueStatePopover();
    } else {
      this.closeValueStatePopover();
    }
  }
  get selectedOptionIcon() {
    return this.selectedOption && this.selectedOption.icon;
  }
  _getPopover() {
    return this.shadowRoot.querySelector("[ui5-popover]");
  }
};
__decorate10([
  property_default({ type: Boolean })
], Select.prototype, "disabled", void 0);
__decorate10([
  property_default()
], Select.prototype, "icon", void 0);
__decorate10([
  property_default()
], Select.prototype, "name", void 0);
__decorate10([
  property_default()
], Select.prototype, "valueState", void 0);
__decorate10([
  property_default({ type: Boolean })
], Select.prototype, "required", void 0);
__decorate10([
  property_default({ type: Boolean })
], Select.prototype, "readonly", void 0);
__decorate10([
  property_default()
], Select.prototype, "accessibleName", void 0);
__decorate10([
  property_default()
], Select.prototype, "accessibleNameRef", void 0);
__decorate10([
  property_default()
], Select.prototype, "tooltip", void 0);
__decorate10([
  property_default({ type: Boolean, noAttribute: true })
], Select.prototype, "_iconPressed", void 0);
__decorate10([
  property_default({ type: Boolean })
], Select.prototype, "opened", void 0);
__decorate10([
  property_default({ type: Number, noAttribute: true })
], Select.prototype, "_listWidth", void 0);
__decorate10([
  property_default({ type: Boolean })
], Select.prototype, "focused", void 0);
__decorate10([
  slot_default({ "default": true, type: HTMLElement, invalidateOnChildChange: true })
], Select.prototype, "options", void 0);
__decorate10([
  slot_default()
], Select.prototype, "valueStateMessage", void 0);
__decorate10([
  slot_default()
], Select.prototype, "label", void 0);
__decorate10([
  property_default()
], Select.prototype, "value", null);
__decorate10([
  i18n_default("@ui5/webcomponents")
], Select, "i18nBundle", void 0);
Select = Select_1 = __decorate10([
  customElement_default({
    tag: "ui5-select",
    languageAware: true,
    formAssociated: true,
    renderer: JsxRenderer_default,
    template: SelectTemplate,
    styles: [
      Select_css_default,
      ResponsivePopoverCommon_css_default,
      ValueStateMessage_css_default,
      SelectPopover_css_default
    ],
    dependencies: [
      Label_default,
      ResponsivePopover_default,
      Popover_default,
      List_default,
      Icon_default,
      Button_default
    ]
  }),
  event_strict_default("change", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("live-change", {
    bubbles: true
  }),
  event_strict_default("open"),
  event_strict_default("close"),
  event_strict_default("selected-item-changed", {
    bubbles: true
  }),
  event_strict_default("input", {
    bubbles: true
  })
], Select);
Select.define();
var Select_default = Select;
export {
  Select_default as default
};
/*! Bundled license information:

lit-html/development/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/static.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=@ui5_webcomponents_dist_Select__js.js.map
