import {
  event_strict_default
} from "./chunk-4CSORQWJ.js";
import {
  isEnter,
  isSpace,
  isTabNext,
  isTabPrevious
} from "./chunk-ZXYB53A5.js";
import {
  JsxRenderer_default,
  UI5Element_default,
  customElement_default,
  isDesktop,
  parameters_bundle_css_default,
  parameters_bundle_css_default2,
  property_default,
  registerThemePropertiesLoader
} from "./chunk-NS46QOBH.js";

// node_modules/@ui5/webcomponents-base/dist/util/isElementHidden.js
var isElementHidden = (el) => {
  if (el.nodeName === "SLOT") {
    return false;
  }
  return el.offsetWidth <= 0 && el.offsetHeight <= 0 || el.style && el.style.visibility === "hidden";
};
var isElementHidden_default = isElementHidden;

// node_modules/@ui5/webcomponents-base/dist/util/isElementTabbable.js
var isElementTabbable = (el) => {
  if (!el) {
    return false;
  }
  if (el.hasAttribute("data-sap-no-tab-ref")) {
    return false;
  }
  if (isElementHidden_default(el)) {
    return false;
  }
  const tabIndex = el.getAttribute("tabindex");
  if (tabIndex !== null && tabIndex !== void 0) {
    return parseInt(tabIndex) >= 0;
  }
  const nodeName = el.nodeName.toLowerCase();
  if (nodeName === "a" || /^(input|select|textarea|button|object)$/.test(nodeName)) {
    return !el.disabled;
  }
  return false;
};
var isElementTabbable_default = isElementTabbable;

// node_modules/@ui5/webcomponents-base/dist/util/TabbableElements.js
var getTabbableElements = (el) => {
  return getTabbables([...el.children]);
};
var getTabbables = (nodes, tabbables) => {
  const tabbableElements = tabbables || [];
  if (!nodes) {
    return tabbableElements;
  }
  nodes.forEach((currentNode) => {
    if (currentNode.nodeType === Node.TEXT_NODE || currentNode.nodeType === Node.COMMENT_NODE) {
      return;
    }
    const currentElement = currentNode;
    if (currentElement.hasAttribute("data-sap-no-tab-ref")) {
      return;
    }
    if (isElementTabbable_default(currentElement)) {
      tabbableElements.push(currentElement);
    }
    if (currentElement.tagName === "SLOT") {
      getTabbables(currentElement.assignedNodes(), tabbableElements);
    } else {
      const children = currentElement.shadowRoot ? currentElement.shadowRoot.children : currentElement.children;
      getTabbables([...children], tabbableElements);
    }
  });
  return tabbableElements;
};

// node_modules/@ui5/webcomponents-base/dist/util/getActiveElement.js
var getActiveElement = () => {
  let element = document.activeElement;
  while (element && element.shadowRoot && element.shadowRoot.activeElement) {
    element = element.shadowRoot.activeElement;
  }
  return element;
};
var getActiveElement_default = getActiveElement;

// node_modules/@ui5/webcomponents/dist/generated/themes/ListItemBase.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var ListItemBase_css_default = `:host{box-sizing:border-box;height:var(--_ui5-v2-9-0_list_item_base_height);background-color:var(--ui5-v2-9-0-listitem-background-color);border-bottom:.0625rem solid transparent}:host(:not([hidden])){display:block}:host([disabled]){opacity:var(--_ui5-v2-9-0-listitembase_disabled_opacity);pointer-events:none}:host([actionable]:not([disabled]):not([ui5-li-group-header])){cursor:pointer}:host([has-border]){border-bottom:var(--ui5-v2-9-0-listitem-border-bottom)}:host([selected]){background-color:var(--sapList_SelectionBackgroundColor);border-bottom:var(--ui5-v2-9-0-listitem-selected-border-bottom)}:host([selected]) .ui5-li-additional-text{text-shadow:var(--sapContent_TextShadow)}:host([actionable]:not([active]):not([selected]):not([ui5-li-group-header]):hover){background-color:var(--sapList_Hover_Background)}:host([actionable]:not([active]):not([selected]):not([ui5-li-group-header]):hover) .ui5-li-additional-text{text-shadow:var(--sapContent_TextShadow)}:host([actionable][selected]:not([active],[data-moving]):hover){background-color:var(--sapList_Hover_SelectionBackground)}:host([active][actionable]:not([data-moving])),:host([active][actionable][selected]:not([data-moving])){background-color:var(--sapList_Active_Background)}:host([desktop]:not([data-moving])) .ui5-li-root.ui5-li--focusable:focus:after,:host([desktop][focused]:not([data-moving])) .ui5-li-root.ui5-li--focusable:after,:host(:not([data-moving])) .ui5-li-root.ui5-li--focusable:focus-visible:after,:host([desktop]:not([data-moving])) .ui5-li-root .ui5-li-content:focus:after,:host([desktop][focused]:not([data-moving])) .ui5-li-root .ui5-li-content:after,:host(:not([data-moving])) .ui5-li-root .ui5-li-content:focus-visible:after{content:"";border:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);position:absolute;inset:.125rem;pointer-events:none}.ui5-li-root{position:relative;display:flex;align-items:center;width:100%;height:100%;padding:var(--_ui5-v2-9-0_list_item_base_padding);box-sizing:border-box;background-color:inherit}.ui5-li-root.ui5-li--focusable{outline:none}.ui5-li-content{display:flex;align-items:center;flex:auto;overflow:hidden;max-width:100%;font-family:"72override",var(--sapFontFamily);color:var(--sapList_TextColor)}.ui5-li-content .ui5-li-title{color:var(--sapList_TextColor);font-size:var(--_ui5-v2-9-0_list_item_title_size)}.ui5-li-text-wrapper{display:flex;flex-direction:row;justify-content:space-between;flex:auto;min-width:1px;line-height:normal}
`;

// node_modules/@ui5/webcomponents/dist/generated/themes/DraggableElement.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var DraggableElement_css_default = `[draggable=true]{cursor:grab!important}[draggable=true][data-moving]{cursor:grabbing!important;opacity:var(--sapContent_DisabledOpacity)}
`;

// node_modules/@ui5/webcomponents/dist/ListItemBase.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListItemBase = class ListItemBase2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.selected = false;
    this.movable = false;
    this.hasBorder = false;
    this.disabled = false;
    this.focused = false;
    this.actionable = false;
  }
  onEnterDOM() {
    if (isDesktop()) {
      this.setAttribute("desktop", "");
    }
  }
  onBeforeRendering() {
    this.actionable = true;
  }
  _onfocusin(e) {
    this.fireDecoratorEvent("request-tabindex-change", e);
    if (e.target !== this.getFocusDomRef()) {
      return;
    }
    this.fireDecoratorEvent("_focused", e);
  }
  _onkeydown(e) {
    if (isTabNext(e)) {
      return this._handleTabNext(e);
    }
    if (isTabPrevious(e)) {
      return this._handleTabPrevious(e);
    }
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    if (isSpace(e)) {
      e.preventDefault();
    }
    if (isEnter(e)) {
      this.fireItemPress(e);
    }
  }
  _onkeyup(e) {
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    if (isSpace(e)) {
      this.fireItemPress(e);
    }
  }
  _onclick(e) {
    if (this.getFocusDomRef().matches(":has(:focus-within)")) {
      return;
    }
    this.fireItemPress(e);
  }
  fireItemPress(e) {
    if (this.disabled || !this._pressable) {
      return;
    }
    if (isEnter(e)) {
      e.preventDefault();
    }
    this.fireDecoratorEvent("_press", { item: this, selected: this.selected, key: e.key });
  }
  _handleTabNext(e) {
    if (this.shouldForwardTabAfter()) {
      if (!this.fireDecoratorEvent("forward-after")) {
        e.preventDefault();
      }
    }
  }
  _handleTabPrevious(e) {
    const target = e.target;
    if (this.shouldForwardTabBefore(target)) {
      this.fireDecoratorEvent("forward-before");
    }
  }
  /**
   * Determines if th current list item either has no tabbable content or
   * [Tab] is performed onto the last tabbale content item.
   */
  shouldForwardTabAfter() {
    const aContent = getTabbableElements(this.getFocusDomRef());
    return aContent.length === 0 || aContent[aContent.length - 1] === getActiveElement_default();
  }
  /**
   * Determines if the current list item is target of [SHIFT+TAB].
   */
  shouldForwardTabBefore(target) {
    return this.getFocusDomRef() === target;
  }
  get classes() {
    return {
      main: {
        "ui5-li-root": true,
        "ui5-li--focusable": this._focusable
      }
    };
  }
  get _ariaDisabled() {
    return this.disabled ? true : void 0;
  }
  get _focusable() {
    return !this.disabled;
  }
  get _pressable() {
    return true;
  }
  get hasConfigurableMode() {
    return false;
  }
  get _effectiveTabIndex() {
    if (!this._focusable) {
      return -1;
    }
    if (this.selected) {
      return 0;
    }
    return this.forcedTabIndex ? parseInt(this.forcedTabIndex) : void 0;
  }
};
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "selected", void 0);
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "movable", void 0);
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "hasBorder", void 0);
__decorate([
  property_default()
], ListItemBase.prototype, "forcedTabIndex", void 0);
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "disabled", void 0);
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "focused", void 0);
__decorate([
  property_default({ type: Boolean })
], ListItemBase.prototype, "actionable", void 0);
ListItemBase = __decorate([
  customElement_default({
    renderer: JsxRenderer_default,
    styles: [ListItemBase_css_default, DraggableElement_css_default]
  }),
  event_strict_default("request-tabindex-change", {
    bubbles: true
  }),
  event_strict_default("_press", {
    bubbles: true
  }),
  event_strict_default("_focused", {
    bubbles: true
  }),
  event_strict_default("forward-after", {
    bubbles: true,
    cancelable: true
  }),
  event_strict_default("forward-before", {
    bubbles: true
  })
], ListItemBase);
var ListItemBase_default = ListItemBase;

export {
  getActiveElement_default,
  isElementHidden_default,
  ListItemBase_default
};
//# sourceMappingURL=chunk-KQHYQSG3.js.map
