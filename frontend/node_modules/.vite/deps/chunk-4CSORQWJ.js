import {
  isEnter,
  isSpace
} from "./chunk-ZXYB53A5.js";
import {
  JsxRenderer_default,
  UI5Element_default,
  customElement_default,
  executeTemplate_default,
  getI18nBundle,
  getSharedResource_default,
  getTheme,
  isDesktop,
  isLegacyThemeFamily,
  jsx,
  jsxs,
  parameters_bundle_css_default,
  parameters_bundle_css_default2,
  property_default,
  registerThemePropertiesLoader
} from "./chunk-NS46QOBH.js";

// node_modules/@ui5/webcomponents-base/dist/decorators/event-strict.js
var event = (name, data = {}) => {
  return (target) => {
    if (!Object.prototype.hasOwnProperty.call(target, "metadata")) {
      target.metadata = {};
    }
    const metadata = target.metadata;
    if (!metadata.events) {
      metadata.events = {};
    }
    const eventsMetadata = metadata.events;
    if (!eventsMetadata[name]) {
      data.bubbles = !!data.bubbles;
      data.cancelable = !!data.cancelable;
      eventsMetadata[name] = data;
    }
  };
};
var event_strict_default = event;

// node_modules/@ui5/webcomponents-base/dist/asset-registries/util/IconCollectionsAlias.js
var IconCollectionsAlias;
(function(IconCollectionsAlias2) {
  IconCollectionsAlias2["SAP-icons"] = "SAP-icons-v4";
  IconCollectionsAlias2["horizon"] = "SAP-icons-v5";
  IconCollectionsAlias2["SAP-icons-TNT"] = "tnt";
  IconCollectionsAlias2["BusinessSuiteInAppSymbols"] = "business-suite";
})(IconCollectionsAlias || (IconCollectionsAlias = {}));
var getIconCollectionByAlias = (collectionName) => {
  if (IconCollectionsAlias[collectionName]) {
    return IconCollectionsAlias[collectionName];
  }
  return collectionName;
};

// node_modules/@ui5/webcomponents-base/dist/asset-registries/util/IconCollectionsByTheme.js
var RegisteredIconCollection;
(function(RegisteredIconCollection2) {
  RegisteredIconCollection2["SAPIconsV4"] = "SAP-icons-v4";
  RegisteredIconCollection2["SAPIconsV5"] = "SAP-icons-v5";
  RegisteredIconCollection2["SAPIconsTNTV2"] = "tnt-v2";
  RegisteredIconCollection2["SAPIconsTNTV3"] = "tnt-v3";
  RegisteredIconCollection2["SAPBSIconsV1"] = "business-suite-v1";
  RegisteredIconCollection2["SAPBSIconsV2"] = "business-suite-v2";
})(RegisteredIconCollection || (RegisteredIconCollection = {}));
var iconCollections = /* @__PURE__ */ new Map();
iconCollections.set("SAP-icons", {
  "legacy": RegisteredIconCollection.SAPIconsV4,
  "sap_horizon": RegisteredIconCollection.SAPIconsV5
});
iconCollections.set("tnt", {
  "legacy": RegisteredIconCollection.SAPIconsTNTV2,
  "sap_horizon": RegisteredIconCollection.SAPIconsTNTV3
});
iconCollections.set("business-suite", {
  "legacy": RegisteredIconCollection.SAPBSIconsV1,
  "sap_horizon": RegisteredIconCollection.SAPBSIconsV2
});
var registerIconCollectionForTheme = (collectionName, themeCollectionMap) => {
  if (iconCollections.has(collectionName)) {
    iconCollections.set(collectionName, { ...themeCollectionMap, ...iconCollections.get(collectionName) });
    return;
  }
  iconCollections.set(collectionName, themeCollectionMap);
};
var getIconCollectionForTheme = (collectionName) => {
  const themeFamily = isLegacyThemeFamily() ? "legacy" : "sap_horizon";
  return iconCollections.has(collectionName) ? iconCollections.get(collectionName)[themeFamily] : collectionName;
};

// node_modules/@ui5/webcomponents-base/dist/config/Icons.js
var IconCollectionConfiguration = /* @__PURE__ */ new Map();
var getDefaultIconCollection = (theme) => {
  return IconCollectionConfiguration.get(theme);
};

// node_modules/@ui5/webcomponents-base/dist/asset-registries/util/getIconCollectionByTheme.js
var getEffectiveIconCollection = (collectionName) => {
  const defaultIconCollection = getDefaultIconCollection(getTheme());
  if (!collectionName && defaultIconCollection) {
    return getIconCollectionByAlias(defaultIconCollection);
  }
  if (!collectionName) {
    return getIconCollectionForTheme("SAP-icons");
  }
  return getIconCollectionForTheme(collectionName);
};
var getIconCollectionByTheme_default = getEffectiveIconCollection;

// node_modules/@ui5/webcomponents-base/dist/asset-registries/Icons.js
var DEFAULT_THEME_FAMILY = "legacy";
var loaders = /* @__PURE__ */ new Map();
var registry = getSharedResource_default("SVGIcons.registry", /* @__PURE__ */ new Map());
var iconCollectionPromises = getSharedResource_default("SVGIcons.promises", /* @__PURE__ */ new Map());
var ICON_NOT_FOUND = "ICON_NOT_FOUND";
var _loadIconCollectionOnce = async (collectionName) => {
  if (!iconCollectionPromises.has(collectionName)) {
    if (!loaders.has(collectionName)) {
      throw new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the "AllIcons.js" module for the respective package.`);
    }
    const loadIcons = loaders.get(collectionName);
    iconCollectionPromises.set(collectionName, loadIcons(collectionName));
  }
  return iconCollectionPromises.get(collectionName);
};
var _fillRegistry = (bundleData) => {
  Object.keys(bundleData.data).forEach((iconName) => {
    const iconData = bundleData.data[iconName];
    registerIcon(iconName, {
      pathData: iconData.path || iconData.paths,
      ltr: iconData.ltr,
      accData: iconData.acc,
      collection: bundleData.collection,
      packageName: bundleData.packageName
    });
  });
};
var registerIcon = (name, iconData) => {
  const key = `${iconData.collection}/${name}`;
  registry.set(key, {
    pathData: iconData.pathData,
    ltr: iconData.ltr,
    accData: iconData.accData,
    packageName: iconData.packageName,
    customTemplate: iconData.customTemplate,
    viewBox: iconData.viewBox,
    collection: iconData.collection
  });
};
var processName = (name) => {
  if (name.startsWith("sap-icon://")) {
    name = name.replace("sap-icon://", "");
  }
  let collection;
  [name, collection] = name.split("/").reverse();
  name = name.replace("icon-", "");
  if (collection) {
    collection = getIconCollectionByAlias(collection);
  }
  return { name, collection };
};
var getIconDataSync = (iconName) => {
  const { name, collection } = processName(iconName);
  return getRegisteredIconData(collection, name);
};
var getIconData = async (iconName) => {
  const { name, collection } = processName(iconName);
  let iconData = ICON_NOT_FOUND;
  try {
    iconData = await _loadIconCollectionOnce(getIconCollectionByTheme_default(collection));
  } catch (error) {
    const e = error;
    console.error(e.message);
  }
  if (iconData === ICON_NOT_FOUND) {
    return iconData;
  }
  const registeredIconData = getRegisteredIconData(collection, name);
  if (registeredIconData) {
    return registeredIconData;
  }
  if (Array.isArray(iconData)) {
    iconData.forEach((data) => {
      _fillRegistry(data);
      registerIconCollectionForTheme(collection, { [data.themeFamily || DEFAULT_THEME_FAMILY]: data.collection });
    });
  } else {
    _fillRegistry(iconData);
  }
  return getRegisteredIconData(collection, name);
};
var getRegisteredIconData = (collection, name) => {
  const registryKey = `${getIconCollectionByTheme_default(collection)}/${name}`;
  return registry.get(registryKey);
};
var getIconAccessibleName = async (name) => {
  if (!name) {
    return;
  }
  let iconData = getIconDataSync(name);
  if (!iconData) {
    iconData = await getIconData(name);
  }
  if (iconData && iconData !== ICON_NOT_FOUND && iconData.accData) {
    const i18nBundle = await getI18nBundle(iconData.packageName);
    return i18nBundle.getText(iconData.accData);
  }
};

// node_modules/@ui5/webcomponents/dist/IconTemplate.js
function IconTemplate() {
  var _a;
  return jsxs("svg", { class: "ui5-icon-root", part: "root", tabindex: this._tabIndex, dir: this._dir, viewBox: this.viewBox, role: this.effectiveAccessibleRole, focusable: "false", preserveAspectRatio: "xMidYMid meet", "aria-label": this.effectiveAccessibleName, "aria-hidden": this.effectiveAriaHidden, xmlns: "http://www.w3.org/2000/svg", onKeyDown: this._onkeydown, onKeyUp: this._onkeyup, children: [this.hasIconTooltip && jsxs("title", { id: `${this._id}-tooltip`, children: [" ", this.effectiveAccessibleName, " "] }), jsxs("g", { role: "presentation", children: [this.customSvg && jsx("g", { dangerouslySetInnerHTML: { __html: ((_a = this.customSvg.strings) == null ? void 0 : _a.join("")) ?? "" } }), this.pathData.map((path) => jsx("path", { d: path }))] })] });
}

// node_modules/@ui5/webcomponents/dist/types/IconMode.js
var IconMode;
(function(IconMode2) {
  IconMode2["Image"] = "Image";
  IconMode2["Decorative"] = "Decorative";
  IconMode2["Interactive"] = "Interactive";
})(IconMode || (IconMode = {}));
var IconMode_default = IconMode;

// node_modules/@ui5/webcomponents/dist/generated/themes/Icon.css.js
registerThemePropertiesLoader("@ui5/webcomponents-theming", "sap_horizon", async () => parameters_bundle_css_default);
registerThemePropertiesLoader("@ui5/webcomponents", "sap_horizon", async () => parameters_bundle_css_default2);
var Icon_css_default = `:host{-webkit-tap-highlight-color:rgba(0,0,0,0)}:host([hidden]){display:none}:host([invalid]){display:none}:host(:not([hidden]).ui5_hovered){opacity:.7}:host{display:inline-block;width:1rem;height:1rem;color:var(--sapContent_IconColor);fill:currentColor;outline:none}:host([design="Contrast"]){color:var(--sapContent_ContrastIconColor)}:host([design="Critical"]){color:var(--sapCriticalElementColor)}:host([design="Information"]){color:var(--sapInformativeElementColor)}:host([design="Negative"]){color:var(--sapNegativeElementColor)}:host([design="Neutral"]){color:var(--sapNeutralElementColor)}:host([design="NonInteractive"]){color:var(--sapContent_NonInteractiveIconColor)}:host([design="Positive"]){color:var(--sapPositiveElementColor)}:host([mode="Interactive"][desktop]) .ui5-icon-root:focus,:host([mode="Interactive"]) .ui5-icon-root:focus-visible{outline:var(--sapContent_FocusWidth) var(--sapContent_FocusStyle) var(--sapContent_FocusColor);border-radius:var(--ui5-v2-9-0-icon-focus-border-radius)}.ui5-icon-root{display:flex;height:100%;width:100%;outline:none;vertical-align:top}:host([mode="Interactive"]){cursor:pointer}.ui5-icon-root:not([dir=ltr]){transform:var(--_ui5-v2-9-0_icon_transform_scale);transform-origin:center}
`;

// node_modules/@ui5/webcomponents/dist/Icon.js
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ICON_NOT_FOUND2 = "ICON_NOT_FOUND";
var Icon = class Icon2 extends UI5Element_default {
  constructor() {
    super(...arguments);
    this.design = "Default";
    this.showTooltip = false;
    this.mode = "Decorative";
    this.pathData = [];
    this.invalid = false;
  }
  _onkeydown(e) {
    if (this.mode !== IconMode_default.Interactive) {
      return;
    }
    if (isEnter(e)) {
      this.fireDecoratorEvent("click");
    }
    if (isSpace(e)) {
      e.preventDefault();
    }
  }
  _onkeyup(e) {
    if (this.mode === IconMode_default.Interactive && isSpace(e)) {
      this.fireDecoratorEvent("click");
    }
  }
  /**
  * Enforce "ltr" direction, based on the icons collection metadata.
  */
  get _dir() {
    return this.ltr ? "ltr" : void 0;
  }
  get effectiveAriaHidden() {
    return this.mode === IconMode_default.Decorative ? "true" : void 0;
  }
  get _tabIndex() {
    return this.mode === IconMode_default.Interactive ? 0 : void 0;
  }
  get effectiveAccessibleRole() {
    switch (this.mode) {
      case IconMode_default.Interactive:
        return "button";
      case IconMode_default.Decorative:
        return "presentation";
      default:
        return "img";
    }
  }
  onEnterDOM() {
    if (isDesktop()) {
      this.setAttribute("desktop", "");
    }
  }
  async onBeforeRendering() {
    const name = this.name;
    if (!name) {
      return;
    }
    let iconData = getIconDataSync(name);
    if (!iconData) {
      iconData = await getIconData(name);
    }
    if (!iconData) {
      this.invalid = true;
      return console.warn(`Required icon is not registered. Invalid icon name: ${this.name}`);
    }
    if (iconData === ICON_NOT_FOUND2) {
      this.invalid = true;
      return console.warn(`Required icon is not registered. You can either import the icon as a module in order to use it e.g. "@ui5/webcomponents-icons/dist/${name.replace("sap-icon://", "")}.js", or setup a JSON build step and import "@ui5/webcomponents-icons/dist/AllIcons.js".`);
    }
    this.viewBox = iconData.viewBox || "0 0 512 512";
    if (iconData.customTemplate) {
      iconData.pathData = [];
      this.customSvg = executeTemplate_default(iconData.customTemplate, this);
    }
    this.invalid = false;
    this.pathData = Array.isArray(iconData.pathData) ? iconData.pathData : [iconData.pathData];
    this.accData = iconData.accData;
    this.ltr = iconData.ltr;
    this.packageName = iconData.packageName;
    if (this.accessibleName) {
      this.effectiveAccessibleName = this.accessibleName;
    } else if (this.accData) {
      const i18nBundle = await getI18nBundle(this.packageName);
      this.effectiveAccessibleName = i18nBundle.getText(this.accData) || void 0;
    } else {
      this.effectiveAccessibleName = void 0;
    }
  }
  get hasIconTooltip() {
    return this.showTooltip && this.effectiveAccessibleName;
  }
};
__decorate([
  property_default()
], Icon.prototype, "design", void 0);
__decorate([
  property_default()
], Icon.prototype, "name", void 0);
__decorate([
  property_default()
], Icon.prototype, "accessibleName", void 0);
__decorate([
  property_default({ type: Boolean })
], Icon.prototype, "showTooltip", void 0);
__decorate([
  property_default()
], Icon.prototype, "mode", void 0);
__decorate([
  property_default({ type: Array })
], Icon.prototype, "pathData", void 0);
__decorate([
  property_default({ type: Object, noAttribute: true })
], Icon.prototype, "accData", void 0);
__decorate([
  property_default({ type: Boolean })
], Icon.prototype, "invalid", void 0);
__decorate([
  property_default({ noAttribute: true })
], Icon.prototype, "effectiveAccessibleName", void 0);
Icon = __decorate([
  customElement_default({
    tag: "ui5-icon",
    languageAware: true,
    themeAware: true,
    renderer: JsxRenderer_default,
    template: IconTemplate,
    styles: Icon_css_default
  }),
  event_strict_default("click", {
    bubbles: true
  })
], Icon);
Icon.define();
var Icon_default = Icon;

export {
  event_strict_default,
  registerIcon,
  getIconAccessibleName,
  Icon_default
};
//# sourceMappingURL=chunk-4CSORQWJ.js.map
