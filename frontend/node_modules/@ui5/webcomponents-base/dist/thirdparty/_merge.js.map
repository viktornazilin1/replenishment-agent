{"version":3,"file":"_merge.js","sourceRoot":"","sources":["../../src/thirdparty/_merge.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,oBAAoB,CAAC;AAC/C,IAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjC,IAAI,OAAO,GAAG,UAAU,IAAU,EAAE,IAAU,EAAE,IAAU,EAAE,IAAU;IAClE,IAAI,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,KAAK,EAAE,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;IAC7L,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAC5D,MAAM,GAAG,EAAE,CAAC;KACf;IACD,OAAO,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;QACpB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;YAClC,KAAK,IAAI,IAAI,OAAO,EAAE;gBAClB,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnB,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;gBACrB,IAAI,IAAI,KAAK,WAAW,IAAI,MAAM,KAAK,IAAI,EAAE;oBACzC,SAAS;iBACZ;gBACD,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAC9E,IAAI,WAAW,EAAE;wBACb,WAAW,GAAG,KAAK,CAAC;wBACpB,KAAK,GAAG,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;qBAChD;yBAAM;wBACH,KAAK,GAAG,GAAG,IAAI,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;qBAChD;oBACD,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC3D;qBAAM,IAAI,IAAI,KAAK,SAAS,EAAE;oBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;iBACvB;aACJ;SACJ;KACJ;IACD,OAAO,MAAM,CAAC;AAClB,CAAC,CAAC;AACF,eAAe,OAAO,CAAC","sourcesContent":["import isPlainObject from './isPlainObject.js';\nvar oToken = Object.create(null);\nvar fnMerge = function (arg1?: any, arg2?: any, arg3?: any, arg4?: any) {\n    var src, copyIsArray, copy, name, options, clone, target = arguments[2] || {}, i = 3, length = arguments.length, deep = arguments[0] || false, skipToken = arguments[1] ? undefined : oToken;\n    if (typeof target !== 'object' && typeof target !== 'function') {\n        target = {};\n    }\n    for (; i < length; i++) {\n        if ((options = arguments[i]) != null) {\n            for (name in options) {\n                src = target[name];\n                copy = options[name];\n                if (name === '__proto__' || target === copy) {\n                    continue;\n                }\n                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                    if (copyIsArray) {\n                        copyIsArray = false;\n                        clone = src && Array.isArray(src) ? src : [];\n                    } else {\n                        clone = src && isPlainObject(src) ? src : {};\n                    }\n                    target[name] = fnMerge(deep, arguments[1], clone, copy);\n                } else if (copy !== skipToken) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n    return target;\n};\nexport default fnMerge;\n"]}