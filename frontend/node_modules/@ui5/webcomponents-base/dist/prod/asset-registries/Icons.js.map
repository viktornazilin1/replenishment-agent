{
  "version": 3,
  "sources": ["../../../src/asset-registries/Icons.ts"],
  "sourcesContent": ["import getSharedResource from \"../getSharedResource.js\";\nimport { getIconCollectionByAlias } from \"./util/IconCollectionsAlias.js\";\nimport { registerIconCollectionForTheme } from \"./util/IconCollectionsByTheme.js\";\nimport getEffectiveIconCollection from \"./util/getIconCollectionByTheme.js\";\nimport { getI18nBundle } from \"../i18nBundle.js\";\nimport type { I18nText } from \"../i18nBundle.js\";\nimport type { TemplateFunction } from \"../renderer/executeTemplate.js\";\n\nconst DEFAULT_THEME_FAMILY = \"legacy\"; // includes sap_fiori_*\n\ntype IconLoader = (collectionName: string) => Promise<CollectionData | Array<CollectionData>>;\n\ntype CollectionData = {\n\tcollection: string,\n\tpackageName: string,\n\tthemeFamily?: \"legacy\" | \"sap_horizon\",\n\tversion?: string,\n\tdata: Record<string, {\n\t\tpath?: string,\n\t\tpaths?: Array<string>,\n\t\tltr?: boolean,\n\t\tacc?: I18nText,\n\t}>,\n};\n\ntype IconData = {\n\tcollection: string,\n\tpackageName: string,\n\tpathData: string | Array<string>,\n\tltr?: boolean,\n\taccData?: I18nText,\n\tcustomTemplate?: TemplateFunction,\n\tviewBox?: string,\n};\n\nconst loaders = new Map<string, IconLoader>();\nconst registry = getSharedResource<Map<string, IconData>>(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource<Map<string, Promise<CollectionData| Array<CollectionData>>>>(\"SVGIcons.promises\", new Map());\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\n\nconst registerIconLoader = (collectionName: string, loader: IconLoader) => {\n\tloaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async (collectionName: string) => {\n\tif (!iconCollectionPromises.has(collectionName)) {\n\t\tif (!loaders.has(collectionName)) {\n\t\t\tthrow new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n\t\t}\n\n\t\tconst loadIcons = loaders.get(collectionName)!;\n\t\ticonCollectionPromises.set(collectionName, loadIcons(collectionName));\n\t}\n\n\treturn iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = (bundleData: CollectionData) => {\n\tObject.keys(bundleData.data).forEach(iconName => {\n\t\tconst iconData = bundleData.data[iconName];\n\n\t\tregisterIcon(iconName, {\n\t\t\tpathData: (iconData.path || iconData.paths)!,\n\t\t\tltr: iconData.ltr,\n\t\t\taccData: iconData.acc,\n\t\t\tcollection: bundleData.collection,\n\t\t\tpackageName: bundleData.packageName,\n\t\t});\n\t});\n};\n\n// set\nconst registerIcon = (name: string, iconData: IconData) => { // eslint-disable-line\n\tconst key = `${iconData.collection}/${name}`;\n\n\tregistry.set(key, {\n\t\tpathData: iconData.pathData,\n\t\tltr: iconData.ltr,\n\t\taccData: iconData.accData,\n\t\tpackageName: iconData.packageName,\n\t\tcustomTemplate: iconData.customTemplate,\n\t\tviewBox: iconData.viewBox,\n\t\tcollection: iconData.collection,\n\t});\n};\n\n/**\n * Processes the full icon name and splits it into - \"name\", \"collection\".\n * - removes legacy protocol (\"sap-icon://\")\n * - resolves aliases (f.e \"SAP-icons-TNT/actor\" => \"tnt/actor\")\n *\n * @param { string } name\n * @return { object }\n */\nconst processName = (name: string) => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t}\n\n\tlet collection: string;\n\t[name, collection] = name.split(\"/\").reverse();\n\n\tname = name.replace(\"icon-\", \"\");\n\tif (collection) {\n\t\tcollection = getIconCollectionByAlias(collection);\n\t}\n\treturn { name, collection };\n};\n\nconst getIconDataSync = (iconName: string) => {\n\tconst { name, collection } = processName(iconName);\n\treturn getRegisteredIconData(collection, name);\n};\n\nconst getIconData = async (iconName: string) => {\n\tconst { name, collection } = processName(iconName);\n\n\tlet iconData: string | CollectionData | Array<CollectionData> = ICON_NOT_FOUND;\n\ttry {\n\t\ticonData = (await _loadIconCollectionOnce(getEffectiveIconCollection(collection)))!;\n\t} catch (error: unknown) {\n\t\tconst e = error as Error;\n\t\tconsole.error(e.message); /* eslint-disable-line */\n\t}\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\tconst registeredIconData = getRegisteredIconData(collection, name);\n\n\tif (registeredIconData) {\n\t\treturn registeredIconData;\n\t}\n\n\t// not filled by another await. many getters will await on the same loader, but fill only once\n\tif (Array.isArray(iconData)) {\n\t\ticonData.forEach(data => {\n\t\t\t_fillRegistry(data);\n\t\t\tregisterIconCollectionForTheme(collection, { [data.themeFamily || DEFAULT_THEME_FAMILY]: data.collection });\n\t\t});\n\t} else {\n\t\t_fillRegistry(iconData as CollectionData);\n\t}\n\n\treturn getRegisteredIconData(collection, name);\n};\n\nconst getRegisteredIconData = (collection: string, name: string) => {\n\tconst registryKey = `${getEffectiveIconCollection(collection)}/${name}`;\n\treturn registry.get(registryKey);\n};\n\n/**\n * Returns the accessible name for the given icon,\n * or undefined if accessible name is not present.\n *\n * @param { string } name\n * @return { Promise }\n */\nconst getIconAccessibleName = async (name: string | undefined): Promise<string | undefined> => {\n\tif (!name) {\n\t\treturn;\n\t}\n\n\tlet iconData: typeof ICON_NOT_FOUND | IconData | undefined = getIconDataSync(name);\n\n\tif (!iconData) {\n\t\ticonData = await getIconData(name);\n\t}\n\n\tif (iconData && iconData !== ICON_NOT_FOUND && iconData.accData) {\n\t\tconst i18nBundle = await getI18nBundle(iconData.packageName);\n\t\treturn i18nBundle.getText(iconData.accData);\n\t}\n};\n\n// test page usage only\nconst _getRegisteredNames = async () => {\n\t// fetch one icon of each collection to trigger the bundle load\n\tawait getIconData(\"edit\");\n\tawait getIconData(\"tnt/arrow\");\n\tawait getIconData(\"business-suite/3d\");\n\treturn Array.from(registry.keys());\n};\n\nexport {\n\tregisterIconLoader,\n\tgetIconData,\n\tgetIconDataSync,\n\tgetIconAccessibleName,\n\tregisterIcon,\n\t_getRegisteredNames,\n};\n\nexport type {\n\tIconData,\n\tCollectionData,\n};\n"],
  "mappings": "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",
  "names": ["getSharedResource", "getIconCollectionByAlias", "registerIconCollectionForTheme", "getEffectiveIconCollection", "getI18nBundle", "DEFAULT_THEME_FAMILY", "loaders", "registry", "iconCollectionPromises", "ICON_NOT_FOUND", "registerIconLoader", "collectionName", "loader", "_loadIconCollectionOnce", "loadIcons", "_fillRegistry", "bundleData", "iconName", "iconData", "registerIcon", "name", "key", "processName", "collection", "getIconDataSync", "getRegisteredIconData", "getIconData", "error", "registeredIconData", "data", "registryKey", "getIconAccessibleName", "_getRegisteredNames"]
}
