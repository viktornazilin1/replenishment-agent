{
  "version": 3,
  "sources": ["../../src/PropertiesFileFormat.ts"],
  "sourcesContent": ["const flatstr = typeof window.chrome === \"object\" || typeof window.v8 === \"object\" ? (s: string, iConcatOps: number) => {\n\tif (iConcatOps > 2 && 40 * iConcatOps > s.length) {\n\t\tNumber(s);\n\t}\n\treturn s;\n} : (s: string) => s;\n\nconst rLines = /(?:\\r\\n|\\r|\\n|^)[ \\t\\f]*/;\nconst rEscapesOrSeparator = /(\\\\u[0-9a-fA-F]{0,4})|(\\\\.)|(\\\\$)|([ \\t\\f]*[ \\t\\f:=][ \\t\\f]*)/g;\nconst rEscapes = /(\\\\u[0-9a-fA-F]{0,4})|(\\\\.)|(\\\\$)/g;\nconst mEscapes = {\n\t\"\\\\f\": \"\\f\",\n\t\"\\\\n\": \"\\n\",\n\t\"\\\\r\": \"\\r\",\n\t\"\\\\t\": \"\\t\",\n};\n\n/**\n * Parses a .properties format\n * @param {string} sText the contents a of a .properties file\n * @returns a object with key/value pairs parsed from the .properties file format\n * @public\n */\nconst parseProperties = (sText: string) => {\n\tconst properties = {},\n\t\taLines = sText.split(rLines);\n\n\tlet sLine,\n\t\trMatcher,\n\t\tsKey,\n\t\tsValue: string,\n\t\ti,\n\t\tm,\n\t\tiLastIndex,\n\t\tiConcatOps: number;\n\n\tconst append = (s: string) => {\n\t\tif (sValue) {\n\t\t\tsValue = `${sValue}${s}`;\n\t\t\tiConcatOps++;\n\t\t} else {\n\t\t\tsValue = s;\n\t\t\tiConcatOps = 0;\n\t\t}\n\t};\n\n\tfor (i = 0; i < aLines.length; i++) {\n\t\tsLine = aLines[i];\n\t\tconst skipLine = sLine === \"\" || sLine.charAt(0) === \"#\" || sLine.charAt(0) === \"!\";\n\n\t\tif (!skipLine) {\n\t\t\trMatcher = rEscapesOrSeparator;\n\t\t\tiLastIndex = 0;\n\t\t\trMatcher.lastIndex = iLastIndex;\n\t\t\tsKey = null;\n\t\t\tsValue = \"\";\n\t\t\tm = rMatcher.exec(sLine);\n\t\t\twhile (m !== null) {\n\t\t\t\tif (iLastIndex < m.index) {\n\t\t\t\t\tappend(sLine.slice(iLastIndex, m.index));\n\t\t\t\t}\n\t\t\t\tiLastIndex = rMatcher.lastIndex;\n\t\t\t\tif (m[1]) {\n\t\t\t\t\tif (m[1].length !== 6) {\n\t\t\t\t\t\tthrow new Error(`Incomplete Unicode Escape '${m[1]}'`);\n\t\t\t\t\t}\n\t\t\t\t\tappend(String.fromCharCode(parseInt(m[1].slice(2), 16)));\n\t\t\t\t} else if (m[2]) {\n\t\t\t\t\tappend(mEscapes[m[2] as keyof typeof mEscapes] || m[2].slice(1));\n\t\t\t\t} else if (m[3]) {\n\t\t\t\t\tsLine = aLines[++i];\n\t\t\t\t\tiLastIndex = 0;\n\t\t\t\t\trMatcher.lastIndex = iLastIndex;\n\t\t\t\t} else if (m[4]) {\n\t\t\t\t\tsKey = sValue;\n\t\t\t\t\tsValue = \"\";\n\t\t\t\t\trMatcher = rEscapes;\n\t\t\t\t\trMatcher.lastIndex = iLastIndex;\n\t\t\t\t}\n\t\t\t\tm = rMatcher.exec(sLine);\n\t\t\t}\n\t\t\tif (iLastIndex < sLine.length) {\n\t\t\t\tappend(sLine.slice(iLastIndex));\n\t\t\t}\n\t\t\tif (sKey == null) {\n\t\t\t\tsKey = sValue;\n\t\t\t\tsValue = \"\";\n\t\t\t}\n\t\t\t(properties as Record<string, any>)[sKey] = flatstr(sValue, sValue ? iConcatOps! : 0);\n\t\t}\n\t}\n\treturn properties;\n};\n\nexport default parseProperties;\n"],
  "mappings": "aAAA,MAAMA,EAAU,OAAO,OAAO,QAAW,UAAY,OAAO,OAAO,IAAO,SAAW,CAACC,EAAWC,KAC5FA,EAAa,GAAK,GAAKA,EAAaD,EAAE,QACzC,OAAOA,CAAC,EAEFA,GACHA,GAAcA,EAEbE,EAAS,2BACTC,EAAsB,iEACtBC,EAAW,qCACXC,EAAW,CAChB,MAAO,KACP,MAAO;AAAA,EACP,MAAO,KACP,MAAO,GACR,EAQMC,EAAmBC,GAAkB,CAC1C,MAAMC,EAAa,CAAC,EACnBC,EAASF,EAAM,MAAML,CAAM,EAE5B,IAAIQ,EACHC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAf,EAED,MAAMgB,EAAUjB,GAAc,CACzBa,GACHA,EAAS,GAAGA,CAAM,GAAGb,CAAC,GACtBC,MAEAY,EAASb,EACTC,EAAa,EAEf,EAEA,IAAKa,EAAI,EAAGA,EAAIL,EAAO,OAAQK,IAI9B,GAHAJ,EAAQD,EAAOK,CAAC,EAGZ,EAFaJ,IAAU,IAAMA,EAAM,OAAO,CAAC,IAAM,KAAOA,EAAM,OAAO,CAAC,IAAM,KAEjE,CAOd,IANAC,EAAWR,EACXa,EAAa,EACbL,EAAS,UAAYK,EACrBJ,EAAO,KACPC,EAAS,GACTE,EAAIJ,EAAS,KAAKD,CAAK,EAChBK,IAAM,MAAM,CAKlB,GAJIC,EAAaD,EAAE,OAClBE,EAAOP,EAAM,MAAMM,EAAYD,EAAE,KAAK,CAAC,EAExCC,EAAaL,EAAS,UAClBI,EAAE,CAAC,EAAG,CACT,GAAIA,EAAE,CAAC,EAAE,SAAW,EACnB,MAAM,IAAI,MAAM,8BAA8BA,EAAE,CAAC,CAAC,GAAG,EAEtDE,EAAO,OAAO,aAAa,SAASF,EAAE,CAAC,EAAE,MAAM,CAAC,EAAG,EAAE,CAAC,CAAC,CACxD,MAAWA,EAAE,CAAC,EACbE,EAAOZ,EAASU,EAAE,CAAC,CAA0B,GAAKA,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC,EACrDA,EAAE,CAAC,GACbL,EAAQD,EAAO,EAAEK,CAAC,EAClBE,EAAa,EACbL,EAAS,UAAYK,GACXD,EAAE,CAAC,IACbH,EAAOC,EACPA,EAAS,GACTF,EAAWP,EACXO,EAAS,UAAYK,GAEtBD,EAAIJ,EAAS,KAAKD,CAAK,CACxB,CACIM,EAAaN,EAAM,QACtBO,EAAOP,EAAM,MAAMM,CAAU,CAAC,EAE3BJ,GAAQ,OACXA,EAAOC,EACPA,EAAS,IAETL,EAAmCI,CAAI,EAAIb,EAAQc,EAAQA,EAASZ,EAAc,CAAC,CACrF,CAED,OAAOO,CACR,EAEA,eAAeF",
  "names": ["flatstr", "s", "iConcatOps", "rLines", "rEscapesOrSeparator", "rEscapes", "mEscapes", "parseProperties", "sText", "properties", "aLines", "sLine", "rMatcher", "sKey", "sValue", "i", "m", "iLastIndex", "append"]
}
