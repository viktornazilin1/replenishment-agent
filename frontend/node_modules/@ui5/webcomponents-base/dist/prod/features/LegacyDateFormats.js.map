{
  "version": 3,
  "sources": ["../../../src/features/LegacyDateFormats.ts"],
  "sourcesContent": ["import { getFormatSettings } from \"../InitialConfiguration.js\";\nimport type { FormatSettings } from \"../config/FormatSettings.js\";\nimport { registerFeature } from \"../FeaturesRegistry.js\";\n\n// Allows specifying the customizing data for Islamic calendar support\n// dateFormat - The date format\n// islamicMonthStart - The Islamic date in string format // 14360101\n// gregDate - Corresponding Gregorian date to the Islamic one in string format // 20141024\ntype IslamicToGregorianMapping = {\n\tdateFormat: string,\n\tislamicMonthStart: string,\n\tgregDate: string,\n};\ntype LegacyDateCalendarCustomizing = Array<IslamicToGregorianMapping>;\n\nlet formatSettings: FormatSettings;\n\nclass LegacyDateFormats {\n\t/**\n\t * Returns the currently set customizing data for Islamic calendar support\n\t *\n\t * @return {object[]} Returns an array that contains the customizing data.\n\t * @public\n\t */\n\tstatic getLegacyDateCalendarCustomizing(this: void): LegacyDateCalendarCustomizing {\n\t\tif (formatSettings === undefined) {\n\t\t\tformatSettings = getFormatSettings();\n\t\t}\n\n\t\treturn formatSettings.legacyDateCalendarCustomizing || [];\n\t}\n}\n\nregisterFeature(\"LegacyDateFormats\", LegacyDateFormats);\n\nexport default LegacyDateFormats;\nexport type {\n\tFormatSettings,\n\tLegacyDateCalendarCustomizing,\n};\n"],
  "mappings": "aAAA,OAAS,qBAAAA,MAAyB,6BAElC,OAAS,mBAAAC,MAAuB,yBAahC,IAAIC,EAEJ,MAAMC,CAAkB,CAOvB,OAAO,kCAA4E,CAClF,OAAID,IAAmB,SACtBA,EAAiBF,EAAkB,GAG7BE,EAAe,+BAAiC,CAAC,CACzD,CACD,CAEAD,EAAgB,oBAAqBE,CAAiB,EAEtD,eAAeA",
  "names": ["getFormatSettings", "registerFeature", "formatSettings", "LegacyDateFormats"]
}
