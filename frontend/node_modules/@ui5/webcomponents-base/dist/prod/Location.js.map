{
  "version": 3,
  "sources": ["../../src/Location.ts"],
  "sourcesContent": ["const isSSR = typeof document === \"undefined\";\n\nconst internals = {\n\tsearch() {\n\t\tif (isSSR) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn window.location.search;\n\t},\n};\n\nconst getLocationHostname = () => {\n\tif (isSSR) {\n\t\treturn \"\";\n\t}\n\n\treturn window.location.hostname;\n};\n\nconst getLocationPort = () => {\n\tif (isSSR) {\n\t\treturn \"\";\n\t}\n\n\treturn window.location.port;\n};\n\nconst getLocationProtocol = () => {\n\tif (isSSR) {\n\t\treturn \"\";\n\t}\n\n\treturn window.location.protocol;\n};\n\nconst getLocationHref = () => {\n\tif (isSSR) {\n\t\treturn \"\";\n\t}\n\n\treturn window.location.href;\n};\n\nconst getLocationSearch = () => {\n\treturn internals.search();\n};\n\nconst locationOpen = (url?: string | URL, target?: string, features?: string) => {\n\tif (isSSR) {\n\t\treturn;\n\t}\n\n\twindow.open(url, target, features);\n};\n\nconst locationReload = () => {\n\tif (!isSSR) {\n\t\twindow.location.reload();\n\t}\n};\n\nexport {\n\tinternals,\n\tlocationReload,\n\tgetLocationHref,\n\tgetLocationSearch,\n\tgetLocationHostname,\n\tgetLocationPort,\n\tgetLocationProtocol,\n\tlocationOpen,\n};\n"],
  "mappings": "aAAA,MAAMA,EAAQ,OAAO,SAAa,IAE5BC,EAAY,CACjB,QAAS,CACR,OAAID,EACI,GAED,OAAO,SAAS,MACxB,CACD,EAEME,EAAsB,IACvBF,EACI,GAGD,OAAO,SAAS,SAGlBG,EAAkB,IACnBH,EACI,GAGD,OAAO,SAAS,KAGlBI,EAAsB,IACvBJ,EACI,GAGD,OAAO,SAAS,SAGlBK,EAAkB,IACnBL,EACI,GAGD,OAAO,SAAS,KAGlBM,EAAoB,IAClBL,EAAU,OAAO,EAGnBM,EAAe,CAACC,EAAoBC,EAAiBC,IAAsB,CAC5EV,GAIJ,OAAO,KAAKQ,EAAKC,EAAQC,CAAQ,CAClC,EAEMC,EAAiB,IAAM,CACvBX,GACJ,OAAO,SAAS,OAAO,CAEzB,EAEA,OACCC,KAAA,UACAU,KAAA,eACAN,KAAA,gBACAC,KAAA,kBACAJ,KAAA,oBACAC,KAAA,gBACAC,KAAA,oBACAG,KAAA",
  "names": ["isSSR", "internals", "getLocationHostname", "getLocationPort", "getLocationProtocol", "getLocationHref", "getLocationSearch", "locationOpen", "url", "target", "features", "locationReload"]
}
