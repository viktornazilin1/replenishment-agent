{
  "version": 3,
  "sources": ["../../../src/util/ColorConversion.ts"],
  "sourcesContent": ["/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\ntype ColorHSL = {\n\th: number,\n\ts: number,\n\tl: number,\n};\n\ntype ColorRGB = {\n\tr: number,\n\tb: number,\n\tg: number,\n};\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = new Map([\n\t[\"aliceblue\", \"f0f8ff\"],\n\t[\"antiquewhite\", \"faebd7\"],\n\t[\"aqua\", \"00ffff\"],\n\t[\"aquamarine\", \"7fffd4\"],\n\t[\"azure\", \"f0ffff\"],\n\t[\"beige\", \"f5f5dc\"],\n\t[\"bisque\", \"ffe4c4\"],\n\t[\"black\", \"000000\"],\n\t[\"blanchedalmond\", \"ffebcd\"],\n\t[\"blue\", \"0000ff\"],\n\t[\"blueviolet\", \"8a2be2\"],\n\t[\"brown\", \"a52a2a\"],\n\t[\"burlywood\", \"deb887\"],\n\t[\"cadetblue\", \"5f9ea0\"],\n\t[\"chartreuse\", \"7fff00\"],\n\t[\"chocolate\", \"d2691e\"],\n\t[\"coral\", \"ff7f50\"],\n\t[\"cornflowerblue\", \"6495ed\"],\n\t[\"cornsilk\", \"fff8dc\"],\n\t[\"crimson\", \"dc143c\"],\n\t[\"cyan\", \"00ffff\"],\n\t[\"darkblue\", \"00008b\"],\n\t[\"darkcyan\", \"008b8b\"],\n\t[\"darkgoldenrod\", \"b8860b\"],\n\t[\"darkgray\", \"a9a9a9\"],\n\t[\"darkgrey\", \"a9a9a9\"],\n\t[\"darkgreen\", \"006400\"],\n\t[\"darkkhaki\", \"bdb76b\"],\n\t[\"darkmagenta\", \"8b008b\"],\n\t[\"darkolivegreen\", \"556b2f\"],\n\t[\"darkorange\", \"ff8c00\"],\n\t[\"darkorchid\", \"9932cc\"],\n\t[\"darkred\", \"8b0000\"],\n\t[\"darksalmon\", \"e9967a\"],\n\t[\"darkseagreen\", \"8fbc8f\"],\n\t[\"darkslateblue\", \"483d8b\"],\n\t[\"darkslategray\", \"2f4f4f\"],\n\t[\"darkslategrey\", \"2f4f4f\"],\n\t[\"darkturquoise\", \"00ced1\"],\n\t[\"darkviolet\", \"9400d3\"],\n\t[\"deeppink\", \"ff1493\"],\n\t[\"deepskyblue\", \"00bfff\"],\n\t[\"dimgray\", \"696969\"],\n\t[\"dimgrey\", \"696969\"],\n\t[\"dodgerblue\", \"1e90ff\"],\n\t[\"firebrick\", \"b22222\"],\n\t[\"floralwhite\", \"fffaf0\"],\n\t[\"forestgreen\", \"228b22\"],\n\t[\"fuchsia\", \"ff00ff\"],\n\t[\"gainsboro\", \"dcdcdc\"],\n\t[\"ghostwhite\", \"f8f8ff\"],\n\t[\"gold\", \"ffd700\"],\n\t[\"goldenrod\", \"daa520\"],\n\t[\"gray\", \"808080\"],\n\t[\"grey\", \"808080\"],\n\t[\"green\", \"008000\"],\n\t[\"greenyellow\", \"adff2f\"],\n\t[\"honeydew\", \"f0fff0\"],\n\t[\"hotpink\", \"ff69b4\"],\n\t[\"indianred\", \"cd5c5c\"],\n\t[\"indigo\", \"4b0082\"],\n\t[\"ivory\", \"fffff0\"],\n\t[\"khaki\", \"f0e68c\"],\n\t[\"lavender\", \"e6e6fa\"],\n\t[\"lavenderblush\", \"fff0f5\"],\n\t[\"lawngreen\", \"7cfc00\"],\n\t[\"lemonchiffon\", \"fffacd\"],\n\t[\"lightblue\", \"add8e6\"],\n\t[\"lightcoral\", \"f08080\"],\n\t[\"lightcyan\", \"e0ffff\"],\n\t[\"lightgoldenrodyellow\", \"fafad2\"],\n\t[\"lightgray\", \"d3d3d3\"],\n\t[\"lightgrey\", \"d3d3d3\"],\n\t[\"lightgreen\", \"90ee90\"],\n\t[\"lightpink\", \"ffb6c1\"],\n\t[\"lightsalmon\", \"ffa07a\"],\n\t[\"lightseagreen\", \"20b2aa\"],\n\t[\"lightskyblue\", \"87cefa\"],\n\t[\"lightslategray\", \"778899\"],\n\t[\"lightslategrey\", \"778899\"],\n\t[\"lightsteelblue\", \"b0c4de\"],\n\t[\"lightyellow\", \"ffffe0\"],\n\t[\"lime\", \"00ff00\"],\n\t[\"limegreen\", \"32cd32\"],\n\t[\"linen\", \"faf0e6\"],\n\t[\"magenta\", \"ff00ff\"],\n\t[\"maroon\", \"800000\"],\n\t[\"mediumaquamarine\", \"66cdaa\"],\n\t[\"mediumblue\", \"0000cd\"],\n\t[\"mediumorchid\", \"ba55d3\"],\n\t[\"mediumpurple\", \"9370db\"],\n\t[\"mediumseagreen\", \"3cb371\"],\n\t[\"mediumslateblue\", \"7b68ee\"],\n\t[\"mediumspringgreen\", \"00fa9a\"],\n\t[\"mediumturquoise\", \"48d1cc\"],\n\t[\"mediumvioletred\", \"c71585\"],\n\t[\"midnightblue\", \"191970\"],\n\t[\"mintcream\", \"f5fffa\"],\n\t[\"mistyrose\", \"ffe4e1\"],\n\t[\"moccasin\", \"ffe4b5\"],\n\t[\"navajowhite\", \"ffdead\"],\n\t[\"navy\", \"000080\"],\n\t[\"oldlace\", \"fdf5e6\"],\n\t[\"olive\", \"808000\"],\n\t[\"olivedrab\", \"6b8e23\"],\n\t[\"orange\", \"ffa500\"],\n\t[\"orangered\", \"ff4500\"],\n\t[\"orchid\", \"da70d6\"],\n\t[\"palegoldenrod\", \"eee8aa\"],\n\t[\"palegreen\", \"98fb98\"],\n\t[\"paleturquoise\", \"afeeee\"],\n\t[\"palevioletred\", \"db7093\"],\n\t[\"papayawhip\", \"ffefd5\"],\n\t[\"peachpuff\", \"ffdab9\"],\n\t[\"peru\", \"cd853f\"],\n\t[\"pink\", \"ffc0cb\"],\n\t[\"plum\", \"dda0dd\"],\n\t[\"powderblue\", \"b0e0e6\"],\n\t[\"purple\", \"800080\"],\n\t[\"red\", \"ff0000\"],\n\t[\"rosybrown\", \"bc8f8f\"],\n\t[\"royalblue\", \"4169e1\"],\n\t[\"saddlebrown\", \"8b4513\"],\n\t[\"salmon\", \"fa8072\"],\n\t[\"sandybrown\", \"f4a460\"],\n\t[\"seagreen\", \"2e8b57\"],\n\t[\"seashell\", \"fff5ee\"],\n\t[\"sienna\", \"a0522d\"],\n\t[\"silver\", \"c0c0c0\"],\n\t[\"skyblue\", \"87ceeb\"],\n\t[\"slateblue\", \"6a5acd\"],\n\t[\"slategray\", \"708090\"],\n\t[\"slategrey\", \"708090\"],\n\t[\"snow\", \"fffafa\"],\n\t[\"springgreen\", \"00ff7f\"],\n\t[\"steelblue\", \"4682b4\"],\n\t[\"tan\", \"d2b48c\"],\n\t[\"teal\", \"008080\"],\n\t[\"thistle\", \"d8bfd8\"],\n\t[\"tomato\", \"ff6347\"],\n\t[\"turquoise\", \"40e0d0\"],\n\t[\"violet\", \"ee82ee\"],\n\t[\"wheat\", \"f5deb3\"],\n\t[\"white\", \"ffffff\"],\n\t[\"whitesmoke\", \"f5f5f5\"],\n\t[\"yellow\", \"ffff00\"],\n\t[\"yellowgreen\", \"9acd32\"],\n\t[\"transparent\", \"00000000\"],\n]);\n\nconst getRGBColor = (color: string): ColorRGB => {\n\tif (color.startsWith(\"rgba\")) {\n\t\treturn RGBAToRGB(color);\n\t}\n\n\tif (color.startsWith(\"rgb\")) {\n\t\treturn RGBStringToRGBObject(color);\n\t}\n\n\t// HEX\n\tif (color.indexOf(\"#\") === 0) {\n\t\t// Shorthand Syntax\n\t\tif (color.length === 4) {\n\t\t\tcolor = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n\t\t} else {\n\t\t\tcolor = color.slice(1, color.length);\n\t\t}\n\t}\n\n\t// Css Color\n\tif (CSSColors.has(color)) {\n\t\tcolor = CSSColors.get(color)!;\n\t}\n\n\treturn HEXToRGB(color);\n};\n\nconst getAlpha = (color: string): number => {\n\tlet alpha = 1;\n\n\tif (color.startsWith(\"rgba\") || color.startsWith(\"hsla\")) {\n\t\tconst parts = color.split(\",\");\n\t\tif (parts.length === 4) {\n\t\t\talpha = parseFloat(parts[3].replace(\")\", \"\").trim());\n\t\t}\n\t}\n\n\treturn alpha;\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\nconst RGBAToRGB = (color: string): ColorRGB => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim()),\n\t};\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\nconst RGBStringToRGBObject = (color: string): ColorRGB => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tclosingBraketIndex = color.indexOf(\")\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim()),\n\t};\n};\n\nconst HSLToRGB = (color: ColorHSL): ColorRGB => {\n\t// Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n\tlet saturation = color.s,\n\t\tlightness = color.l,\n\t\tred,\n\t\tgreen,\n\t\tblue;\n\n\tif (saturation > 100) {\n\t\tsaturation = 1;\n\t} else if (saturation < 0) {\n\t\tsaturation = 0;\n\t} else {\n\t\tsaturation /= 100;\n\t}\n\n\tif (lightness > 100) {\n\t\tlightness = 1;\n\t} else if (lightness < 0) {\n\t\tlightness = 0;\n\t} else {\n\t\tlightness /= 100;\n\t}\n\n\tconst hue = ((color.h % 360) + 360) % 360,\n\t\td = saturation * (1 - Math.abs(2 * lightness - 1)),\n\t\tm = 255 * (lightness - 0.5 * d),\n\t\tx = d * (1 - Math.abs(((hue / 60) % 2) - 1)),\n\t\ti = Math.floor(hue / 60),\n\t\tm255x = m + 255 * x,\n\t\tm255d = m + 255 * d;\n\n\tswitch (i) {\n\tcase 0:\n\t\tred = m255d;\n\t\tgreen = m255x;\n\t\tblue = m;\n\t\tbreak;\n\tcase 1:\n\t\tred = m255x;\n\t\tgreen = m255d;\n\t\tblue = m;\n\t\tbreak;\n\tcase 2:\n\t\tred = m;\n\t\tgreen = m255d;\n\t\tblue = m255x;\n\t\tbreak;\n\tcase 3:\n\t\tred = m;\n\t\tgreen = m255x;\n\t\tblue = m255d;\n\t\tbreak;\n\tcase 4:\n\t\tred = m255x;\n\t\tgreen = m;\n\t\tblue = m255d;\n\t\tbreak;\n\tcase 5:\n\t\tred = m255d;\n\t\tgreen = m;\n\t\tblue = m255x;\n\t\tbreak;\n\tdefault:\n\t\tred = 0;\n\t\tgreen = 0;\n\t\tblue = 0;\n\t\tbreak;\n\t}\n\n\treturn {\n\t\tr: Math.round(red),\n\t\tg: Math.round(green),\n\t\tb: Math.round(blue),\n\t};\n};\n\nconst HEXToRGB = (hex: string): ColorRGB => {\n\t// Please make sure you pass a valid 6 digit hex color\n\t// In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n\n\treturn {\n\t\tr: parseInt(hex.substr(0, 2), 16),\n\t\tg: parseInt(hex.substr(2, 2), 16),\n\t\tb: parseInt(hex.substr(4, 2), 16),\n\t};\n};\n\n/**\n * Returns the hex value of the color as string\n * @param {Object} color Receives an object with the properties for each of the main colors(r, g, b)\n */\nconst RGBtoHEX = (color: ColorRGB): string => {\n\tconst hexMap = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\tlet hexValue = \"\";\n\n\tlet divisionNumber = color.r / 16;\n\tlet remainder = color.r % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.g / 16;\n\tremainder = color.g % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\tdivisionNumber = color.b / 16;\n\tremainder = color.b % 16;\n\thexValue += String(hexMap[Math.floor(divisionNumber)]);\n\thexValue += String(hexMap[remainder]);\n\n\treturn hexValue;\n};\n\nconst RGBToHSL = (color: ColorRGB): ColorHSL => {\n\tconst R = color.r / 255,\n\t\tG = color.g / 255,\n\t\tB = color.b / 255,\n\t\tmax = Math.max(R, G, B),\n\t\tmin = Math.min(R, G, B),\n\t\tdelta = max - min;\n\n\tlet h = (max + min) / 2;\n\tlet s = (max + min) / 2;\n\tlet l = (max + min) / 2;\n\n\tif (max === min) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n\n\t\tswitch (max) {\n\t\tcase R:\n\t\t\th = (G - B) / delta + (G < B ? 6 : 0);\n\t\t\tbreak;\n\t\tcase G:\n\t\t\th = (B - R) / delta + 2;\n\t\t\tbreak;\n\t\tcase B:\n\t\t\th = (R - G) / delta + 4;\n\t\t\tbreak;\n\t\t}\n\n\t\th /= 6;\n\t}\n\n\th = Math.round(h * 360);\n\ts = Math.round(s * 100);\n\tl = Math.round(l * 100);\n\n\treturn {\n\t\th,\n\t\ts,\n\t\tl,\n\t};\n};\n\nexport {\n\tgetRGBColor,\n\tgetAlpha,\n\tHSLToRGB,\n\tHEXToRGB,\n\tRGBToHSL,\n\tRGBStringToRGBObject,\n\tRGBtoHEX,\n};\n\nexport type {\n\tColorHSL,\n\tColorRGB,\n};\n"],
  "mappings": "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",
  "names": ["CSSColors", "getRGBColor", "color", "RGBAToRGB", "RGBStringToRGBObject", "HEXToRGB", "getAlpha", "alpha", "parts", "openingBracketIndex", "commasIndexes", "i", "closingBraketIndex", "HSLToRGB", "saturation", "lightness", "red", "green", "blue", "hue", "m", "x", "m255x", "m255d", "hex", "RGBtoHEX", "hexMap", "hexValue", "divisionNumber", "remainder", "RGBToHSL", "R", "G", "B", "max", "min", "delta", "h", "s"]
}
