{
  "version": 1.1,
  "tags": [
    {
      "name": "ui5-avatar",
      "description": "### Overview\n\nAn image-like component that has different display options for representing images and icons\nin different shapes and sizes, depending on the use case.\n\nThe shape can be circular or square. There are several predefined sizes, as well as an option to\nset a custom size.\n\n### Keyboard Handling\n\n- [Space] / [Enter] or [Return] - Fires the `click` event if the `interactive` property is set to true.\n- [Shift] - If [Space] is pressed, pressing [Shift] releases the component without triggering the click event.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Avatar.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Receives the desired `<img>` tag\n\n**Note:** If you experience flickering of the provided image, you can hide the component until it is defined with the following CSS:<br/>\n`ui5-avatar:not(:defined) {`<br/>\n&nbsp;&nbsp;&nbsp;&nbsp;`visibility: hidden;`<br/>\n`}`\n- **badge** - Defines the optional badge that will be used for visual affordance.\n\n**Note:** While the slot allows for custom badges, to achieve\nthe Fiori design, you can use the `ui5-tag` with `ui5-icon`\nin the corresponding `icon` slot, without text nodes.",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "interactive",
          "description": "Defines if the avatar is interactive (focusable and pressable).\n\n**Note:** This property won't have effect if the `disabled`\nproperty is set to `true`.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the name of the UI5 Icon, that will be displayed.\n\n**Note:** If `image` slot is provided, the property will be ignored.\n\n**Note:** You should import the desired icon first, then use its name as \"icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar icon=\"employee\">`\n\n**Note:** If no icon or an empty one is provided, by default the \"employee\" icon should be displayed.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "fallback-icon",
          "description": "Defines the name of the fallback icon, which should be displayed in the following cases:\n\n\t- If the initials are not valid (more than 3 letters, unsupported languages or empty initials).\n\t- If there are three initials and they do not fit in the shape (e.g. WWW for some of the sizes).\n\t- If the image src is wrong.\n\n**Note:** If not set, a default fallback icon \"employee\" is displayed.\n\n**Note:** You should import the desired icon first, then use its name as \"fallback-icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar fallback-icon=\"alert\">`\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "initials",
          "description": "Defines the displayed initials.\n\nUp to three Latin letters can be displayed as initials.",
          "values": []
        },
        {
          "name": "shape",
          "description": "Defines the shape of the component.",
          "values": [{ "name": "Circle" }, { "name": "Square" }]
        },
        {
          "name": "size",
          "description": "Defines predefined size of the component.",
          "values": [
            { "name": "XS" },
            { "name": "S" },
            { "name": "M" },
            { "name": "L" },
            { "name": "XL" }
          ]
        },
        {
          "name": "color-scheme",
          "description": "Defines the background color of the desired image.\nIf `colorScheme` is set to `Auto`, the avatar will be displayed with the `Accent6` color.",
          "values": [
            { "name": "Auto" },
            { "name": "Accent1" },
            { "name": "Accent2" },
            { "name": "Accent3" },
            { "name": "Accent4" },
            { "name": "Accent5" },
            { "name": "Accent6" },
            { "name": "Accent7" },
            { "name": "Accent8" },
            { "name": "Accent9" },
            { "name": "Accent10" },
            { "name": "Placeholder" }
          ]
        },
        {
          "name": "accessible-name",
          "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.",
          "values": []
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following field is supported:\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.",
          "values": [{ "name": "AvatarAccessibilityAttributes" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-avatar-group",
      "description": "### Overview\n\nDisplays a group of avatars arranged horizontally. It is useful to visually\nshowcase a group of related avatars, such as, project team members or employees.\n\nThe component allows you to display the avatars in different sizes,\ndepending on your use case.\n\nThe `AvatarGroup` component has two group types:\n\n- `Group` type: The avatars are displayed as partially overlapped on\ntop of each other and the entire group has one click/tap area.\n- `Individual` type: The avatars are displayed side-by-side and each\navatar has its own click/tap area.\n\n### Usage\n\nUse the `AvatarGroup` if:\n\n- You want to display a group of avatars.\n- You want to display several avatars which have something in common.\n\nDo not use the `AvatarGroup` if:\n\n- You want to display a single avatar.\n- You want to display a gallery for simple images.\n- You want to use it for other visual content than avatars.\n\n### Responsive Behavior\n\nWhen the available space is less than the width required to display all avatars,\nan overflow visualization appears as a button placed at the end with the same shape\nand size as the avatars. The visualization displays the number of avatars that have overflowed\nand are not currently visible.\n\n### Keyboard Handling\nThe component provides advanced keyboard handling.\nWhen focused, the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n`type` Individual:\n\n- [Tab] - Move focus to the overflow button\n- [Left] - Navigate one avatar to the left\n- [Right] - Navigate one avatar to the right\n- [Home] - Navigate to the first avatar\n- [End] - Navigate to the last avatar\n- [Space] / [Enter] or [Return] - Trigger `ui5-click` event\n\n`type` Group:\n\n- [Tab] - Move focus to the next interactive element after the component\n- [Space] / [Enter] or [Return] - Trigger `ui5-click` event\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nclick/tap or by using the Enter or Space key.\n- **overflow** - Fired when the count of visible `ui5-avatar` elements in the\ncomponent has changed\n\n### **Slots:**\n - **default** - Defines the items of the component. Use the `ui5-avatar` component as an item.\n\n**Note:** The UX guidelines recommends using avatars with \"Circle\" shape.\n\nMoreover, if you use avatars with \"Square\" shape, there will be visual inconsistency\nas the built-in overflow action has \"Circle\" shape.\n- **overflowButton** - Defines the overflow button of the component.\n\n**Note:** We recommend using the `ui5-button` component.\n\n**Note:** If this slot is not used, the component will display the built-in overflow button.",
      "attributes": [
        {
          "name": "type",
          "description": "Defines the mode of the `AvatarGroup`.",
          "values": [{ "name": "Group" }, { "name": "Individual" }]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following field is supported:\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.",
          "values": [{ "name": "AvatarGroupAccessibilityAttributes" }]
        },
        {
          "name": "hidden-items",
          "description": "Returns an array containing the `ui5-avatar` instances that are currently not displayed due to lack of space.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "color-scheme",
          "description": "Returns an array containing the `AvatarColorScheme` values that correspond to the avatars in the component.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-bar",
      "description": "### Overview\nThe Bar is a container which is primarily used to hold titles, buttons and input elements\nand its design and functionality is the basis for page headers and footers.\nThe component consists of three areas to hold its content - startContent slot, default slot and endContent slot.\nIt has the capability to center content, such as a title, while having other components on the left and right side.\n\n### Usage\nWith the use of the design property, you can set the style of the Bar to appear designed like a Header, Subheader, Footer and FloatingFooter.\n\n**Note:** Do not place a Bar inside another Bar or inside any bar-like component. Doing so may cause unpredictable behavior.\n\n### Responsive Behavior\nThe default slot will be centered in the available space between the startContent and the endContent areas,\ntherefore it might not always be centered in the entire bar.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Bar.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **startContent** - Defines the content at the start of the bar.\n- **default** - Defines the content in the middle of the bar.\n- **endContent** - Defines the content at the end of the bar.\n\n### **CSS Parts:**\n - **bar** - Used to style the wrapper of the content of the component\n- **startContent** - Used to style the wrapper of the start content of the component\n- **midContent** - Used to style the wrapper of the middle content of the component\n- **endContent** - Used to style the wrapper of the end content of the component",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the component's design.",
          "values": [
            { "name": "Header" },
            { "name": "Subheader" },
            { "name": "Footer" },
            { "name": "FloatingFooter" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-breadcrumbs",
      "description": "### Overview\nEnables users to navigate between items by providing a list of links to previous steps in the user's navigation path.\nIt helps the user to be aware of their location within the application and allows faster navigation.\n\nThe last three steps can be accessed as links directly, while the remaining links prior to them are available\nin a drop-down menu.\n\nYou can choose the type of separator to be used from a number of predefined options.\n\n### Keyboard Handling\nThe `ui5-breadcrumbs` provides advanced keyboard handling.\n\n- [F4], [Alt] + [Up], [Alt] + [Down], [Space], or [Enter] - If the dropdown arrow is focused - opens/closes the drop-down.\n- [Space],[Enter] - Activates the focused item and triggers the `item-click` event.\n- [Escape] - Closes the drop-down.\n- [Left] - If the drop-down is closed - navigates one item to the left.\n- [Right] - If the drop-down is closed - navigates one item to the right.\n- [Up] - If the drop-down is open - moves focus to the next item.\n- [Down] - If the drop-down is open - moves focus to the previous item.\n- [Home] - Navigates to the first item.\n- [End] - Navigates to the last item.\n\n\n---\n\n\n\n\n### **Events:**\n - **item-click** - Fires when a `BreadcrumbsItem` is clicked.\n\n**Note:** You can prevent browser location change by calling `event.preventDefault()`.\n\n### **Slots:**\n - **default** - Defines the component items.\n\n**Note:** Use the `ui5-breadcrumbs-item` component to define the desired items.",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the visual appearance of the last BreadcrumbsItem.\n\nThe Breadcrumbs supports two visual appearances for the last BreadcrumbsItem:\n- \"Standard\" - displaying the last item as \"current page\" (bold and without separator)\n- \"NoCurrentPage\" - displaying the last item as a regular BreadcrumbsItem, followed by separator",
          "values": [{ "name": "Standard" }, { "name": "NoCurrentPage" }]
        },
        {
          "name": "separators",
          "description": "Determines the visual style of the separator between the breadcrumb items.",
          "values": [
            { "name": "Slash" },
            { "name": "BackSlash" },
            { "name": "DoubleBackSlash" },
            { "name": "DoubleGreaterThan" },
            { "name": "DoubleSlash" },
            { "name": "GreaterThan" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-breadcrumbs-item",
      "description": "### Overview\n\nThe `ui5-breadcrumbs-item` component defines the content of an item in `ui5-breadcrumbs`.\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "href",
          "description": "Defines the link href.\n\n**Note:** Standard hyperlink behavior is supported.",
          "values": []
        },
        {
          "name": "target",
          "description": "Defines the link target.\n\nAvailable options are:\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**Note:** This property must only be used when the `href` property is set.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the item.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-busy-indicator",
      "description": "### Overview\n\nThe `ui5-busy-indicator` signals that some operation is going on and that the\nuser must wait. It does not block the current UI screen so other operations could be triggered in parallel.\nIt displays 3 dots and each dot expands and shrinks at a different rate, resulting in a cascading flow of animation.\n\n### Usage\nFor the `ui5-busy-indicator` you can define the size, the text and whether it is shown or hidden.\nIn order to hide it, use the \"active\" property.\n\nIn order to show busy state over an HTML element, simply nest the HTML element in a `ui5-busy-indicator` instance.\n\n**Note:** Since `ui5-busy-indicator` has `display: inline-block;` by default and no width of its own,\nwhenever you need to wrap a block-level element, you should set `display: block` to the busy indicator as well.\n\n#### When to use:\n\n- The user needs to be able to cancel the operation.\n- Only part of the application or a particular component is affected.\n\n#### When not to use:\n\n- The operation takes less than one second.\n- You need to block the screen and prevent the user from starting another activity.\n- Do not show multiple busy indicators at once.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/BusyIndicator.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Determines the content over which the component will appear.",
      "attributes": [
        {
          "name": "text",
          "description": "Defines text to be displayed below the component. It can be used to inform the user of the current operation.",
          "values": []
        },
        {
          "name": "size",
          "description": "Defines the size of the component.",
          "values": [{ "name": "S" }, { "name": "M" }, { "name": "L" }]
        },
        {
          "name": "active",
          "description": "Defines if the busy indicator is visible on the screen. By default it is not.",
          "values": []
        },
        {
          "name": "delay",
          "description": "Defines the delay in milliseconds, after which the busy indicator will be visible on the screen.",
          "values": []
        },
        {
          "name": "text-placement",
          "description": "Defines the placement of the text.",
          "values": [{ "name": "Top" }, { "name": "Bottom" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-button",
      "description": "### Overview\n\nThe `ui5-button` component represents a simple push button.\nIt enables users to trigger actions by clicking or tapping the `ui5-button`, or by pressing\ncertain keyboard keys, such as Enter.\n\n### Usage\n\nFor the `ui5-button` UI, you can define text, icon, or both. You can also specify\nwhether the text or the icon is displayed first.\n\nYou can choose from a set of predefined types that offer different\nstyling to correspond to the triggered action.\n\nYou can set the `ui5-button` as enabled or disabled. An enabled\n`ui5-button` can be pressed by clicking or tapping it. The button changes\nits style to provide visual feedback to the user that it is pressed or hovered over with\nthe mouse cursor. A disabled `ui5-button` appears inactive and cannot be pressed.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Button.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **badge** - Adds a badge to the button.\n\n### **CSS Parts:**\n - **button** - Used to style the native button element\n- **icon** - Used to style the icon in the native button element\n- **endIcon** - Used to style the end icon in the native button element",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the component design.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Transparent" },
            { "name": "Emphasized" },
            { "name": "Attention" }
          ]
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "end-icon",
          "description": "Defines the icon, displayed as graphical element within the component after the button text.\n\n**Note:** It is highly recommended to use `endIcon` property only together with `icon` and/or `text` properties.\nUsage of `endIcon` only should be avoided.\n\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "submits",
          "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** This property is only applicable within the context of an HTML Form element.`",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\nAccepts the following string values: `true` or `false`\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.\n\n- **controls**: Identifies the element (or elements) whose contents or presence are controlled by the button element.\nAccepts a lowercase string value.",
          "values": [{ "name": "ButtonAccessibilityAttributes" }]
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines whether the button has special form-related functionality.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": [
            { "name": "Button" },
            { "name": "Submit" },
            { "name": "Reset" }
          ]
        },
        {
          "name": "accessible-role",
          "description": "Describes the accessibility role of the button.\n\n**Note:** Use <code>ButtonAccessibleRole.Link</code> role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
          "values": [{ "name": "Button" }, { "name": "Link" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-button-badge",
      "description": "The `ui5-button-badge` component defines a badge that appears in the `ui5-button`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ButtonBadge.js\";`\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the badge placement and appearance.\n- **InlineText** - displayed inside the button after its text, and recommended for **compact** density.\n- **OverlayText** - displayed at the top-end corner of the button, and recommended for **cozy** density.\n- **AttentionDot** - displayed at the top-end corner of the button as a dot, and suitable for both **cozy** and **compact** densities.",
          "values": [
            { "name": "InlineText" },
            { "name": "OverlayText" },
            { "name": "AttentionDot" }
          ]
        },
        {
          "name": "text",
          "description": "Defines the text of the component.\n\n**Note:** Text is not applied when the `design` property is set to `AttentionDot`.\n\n**Note:** The badge component only accepts numeric values and the \"+\" symbol. Using other characters or formats may result in unpredictable behavior, which is not guaranteed or supported.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-calendar",
      "description": "### Overview\n\nThe `ui5-calendar` component allows users to select one or more dates.\n\nCurrently selected dates are represented with instances of `ui5-date` as\nchildren of the `ui5-calendar`. The value property of each `ui5-date` must be a\ndate string, correctly formatted according to the `ui5-calendar`'s `formatPattern` property.\nWhenever the user changes the date selection, `ui5-calendar` will automatically create/remove instances\nof `ui5-date` in itself, unless you prevent this behavior by calling `preventDefault()` for the\n`selection-change` event. This is useful if you want to control the selected dates externally.\n\n### Usage\n\nThe user can navigate to a particular date by:\n\n- Pressing over a month inside the months view\n- Pressing over an year inside the years view\n\nThe user can confirm a date selection by pressing over a date inside the days view.\n\n### Keyboard Handling\nThe `ui5-calendar` provides advanced keyboard handling.\nWhen a picker is showed and focused the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n- Day picker:\n\n- [F4] - Shows month picker\n- [Shift] + [F4] - Shows year picker\n- [Page Up] - Navigate to the previous month\n- [Page Down] - Navigate to the next month\n- [Shift] + [Page Up] - Navigate to the previous year\n- [Shift] + [Page Down] - Navigate to the next year\n- [Ctrl] + [Shift] + [Page Up] - Navigate ten years backwards\n- [Ctrl] + [Shift] + [Page Down] - Navigate ten years forwards\n- [Home] - Navigate to the first day of the week\n- [End] - Navigate to the last day of the week\n- [Ctrl] + [Home] - Navigate to the first day of the month\n- [Ctrl] + [End] - Navigate to the last day of the month\n\n- Month picker:\n\n- [Page Up] - Navigate to the previous year\n- [Page Down] - Navigate to the next year\n- [Home] - Navigate to the first month of the current row\n- [End] - Navigate to the last month of the current row\n- [Ctrl] + [Home] - Navigate to the first month of the current year\n- [Ctrl] + [End] - Navigate to the last month of the year\n\n- Year picker:\n\n- [Page Up] - Navigate to the previous year range\n- [Page Down] - Navigate the next year range\n- [Home] - Navigate to the first year of the current row\n- [End] - Navigate to the last year of the current row\n- [Ctrl] + [Home] - Navigate to the first year of the current year range\n- [Ctrl] + [End] - Navigate to the last year of the current year range\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### Calendar types\nThe component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese and Persian.\nBy default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese or Persian calendar,\nyou need to set the `primaryCalendarType` property and import one or more of the following modules:\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\";`\n\nOr, you can use the global configuration and set the `calendarType` key:\n\n```html\n<script data-id=\"sap-ui-config\" type=\"application/json\">\n\t{\n\t\t\"calendarType\": \"Japanese\"\n\t}\n</script>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Calendar.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **selection-change** - Fired when the selected dates change.\n\n**Note:** If you call `preventDefault()` for this event, the component will not\ncreate instances of `ui5-date` for the newly selected dates. In that case you should do this manually.\n\n### **Slots:**\n - **calendarLegend** - Defines the calendar legend of the component.\n- **default** - Defines the selected date or dates (depending on the `selectionMode` property)\nfor this calendar as instances of `ui5-date` or `ui5-date-range`.\nUse `ui5-date` for single or multiple selection, and `ui5-date-range` for range selection.\n- **specialDates** - Defines the special dates, visually emphasized in the calendar.\n\n### **CSS Parts:**\n - **day-cell** - Used to style the day cells.\n- **day-cell-selected** - Used to style the day cells when selected.\n- **day-cell-selected-between** - Used to style the day cells in between of selected dates in range.\n- **month-cell** - Used to style the month cells.\n- **month-cell-selected** - Used to style the month cells when selected.\n- **month-cell-selected-between** - Used to style the day cells in between of selected months in range.\n- **year-cell** - Used to style the year cells.\n- **year-cell-selected** - Used to style the year cells when selected.\n- **year-cell-selected-between** - Used to style the day cells in between of selected years in range.",
      "attributes": [
        {
          "name": "selection-mode",
          "description": "Defines the type of selection used in the calendar component.\nAccepted property values are:\n\n- `CalendarSelectionMode.Single` - enables a single date selection.(default value)\n- `CalendarSelectionMode.Range` - enables selection of a date range.\n- `CalendarSelectionMode.Multiple` - enables selection of multiple dates.",
          "values": [
            { "name": "Single" },
            { "name": "Multiple" },
            { "name": "Range" }
          ]
        },
        {
          "name": "hide-week-numbers",
          "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
          "values": []
        },
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-date",
      "description": "### Overview\n\nThe `ui5-date` component defines a calendar date to be used inside `ui5-calendar`\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "value",
          "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-date-range",
      "description": "### Overview\n\nThe `ui5-date-range` component defines a range of dates to be used inside `ui5-calendar`\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "start-value",
          "description": "Start of date range formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
          "values": []
        },
        {
          "name": "end-value",
          "description": "End of date range formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-calendar-legend",
      "description": "### Overview\n\nThe `ui5-calendar-legend` component is designed for use within the `ui5-calendar` to display a legend.\nEach `ui5-calendar-legend-item` represents a unique date type, specifying its visual style\nand a corresponding textual label.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CalendarLegend.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the items of the component.",
      "attributes": [
        {
          "name": "hide-today",
          "description": "Hides the Today item in the legend.",
          "values": []
        },
        {
          "name": "hide-selected-day",
          "description": "Hides the Selected day item in the legend.",
          "values": []
        },
        {
          "name": "hide-non-working-day",
          "description": "Hides the Non-Working day item in the legend.",
          "values": []
        },
        {
          "name": "hide-working-day",
          "description": "Hides the Working day item in the legend.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-calendar-legend-item",
      "description": "### Overview\n\nEach `ui5-calendar-legend-item` represents a legend item, displaying a color with a label.\nThe color is determined by the `type` property and the label by the `text` property.\nIf a `ui5-special-date` is used within the `ui5-calendar` and a type is set, clicking on a `ui5-calendar-legend-item`\nwith the same type will emphasize the respective date(s) in the calendar.\n\n### Usage\nThe `ui5-calendar-legend-item` is intended to be used within the `ui5-calendar-legend` component.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CalendarLegendItem.js\";`\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text content of the Calendar Legend Item.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the type of the Calendar Legend Item.",
          "values": [
            { "name": "Today" },
            { "name": "Selected" },
            { "name": "None" },
            { "name": "Working" },
            { "name": "NonWorking" },
            { "name": "Type01" },
            { "name": "Type02" },
            { "name": "Type03" },
            { "name": "Type04" },
            { "name": "Type05" },
            { "name": "Type06" },
            { "name": "Type07" },
            { "name": "Type08" },
            { "name": "Type09" },
            { "name": "Type10" },
            { "name": "Type11" },
            { "name": "... 8 more ..." },
            { "name": "Type20" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "calendar-part",
      "description": "Abstract base class for Calendar, DayPicker, MonthPicker and YearPicker that adds support for:\n - common properties (timestamp, selectedDates): declarations and methods that operate on them\n - other common code\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-card",
      "description": "### Overview\n\nThe `ui5-card` is a component that represents information in the form of a\ntile with separate header and content areas.\nThe content area of a `ui5-card` can be arbitrary HTML content.\nThe header can be used through slot `header`. For which there is a `ui5-card-header` component to achieve the card look and feel.\n\nNote: We recommend the usage of `ui5-card-header` for the header slot, so advantage can be taken for keyboard handling, styling and accessibility.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Card.js\";`\n\n`import \"@ui5/webcomponents/dist/CardHeader.js\";` (for `ui5-card-header`)\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the content of the component.\n- **header** - Defines the header of the component.\n\n**Note:** Use `ui5-card-header` for the intended design.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the card component\n- **content** - Used to style the content of the card",
      "attributes": [
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component, which is used as the name of the card region and should be unique per card.\n\n**Note:** `accessibleName` should be always set, unless `accessibleNameRef` is set.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "loading",
          "description": "Defines if a loading indicator would be displayed over the card.",
          "values": []
        },
        {
          "name": "loading-delay",
          "description": "Defines the delay in milliseconds, after which the loading indicator will show up for this card.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-card-header",
      "description": "### Overview\n\nThe `ui5-card-header` is a component, meant to be used as a header of the `ui5-card` component.\nIt displays valuable information, that can be defined with several properties, such as: `titleText`, `subtitleText`, `additionalText`\nand two slots: `avatar` and `action`.\n\n### Keyboard handling\nIn case you enable `interactive` property, you can press the `ui5-card-header` by Space and Enter keys.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CardHeader\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is activated by mouse/tap or by using the Enter or Space key.\n\n**Note:** The event would be fired only if the `interactive` property is set to true.\n\n### **Slots:**\n - **avatar** - Defines an avatar image, displayed in the left most part of the header.\n- **action** - Defines an action, displayed in the right most part of the header.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the CardHeader\n- **title** - Used to style the title of the CardHeader\n- **subtitle** - Used to style the subtitle of the CardHeader\n- **additional-text** - Used to style the additional text of the CardHeader",
      "attributes": [
        {
          "name": "title-text",
          "description": "Defines the title text.",
          "values": []
        },
        {
          "name": "subtitle-text",
          "description": "Defines the subtitle text.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the additional text.",
          "values": []
        },
        {
          "name": "interactive",
          "description": "Defines if the component would be interactive,\ne.g gets hover effect and `click` event is fired, when pressed.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-carousel",
      "description": "### Overview\nThe Carousel allows the user to browse through a set of items.\nThe component is mostly used for showing a gallery of images, but can hold any other HTML element.\n\nThere are several ways to perform navigation:\n\n- on desktop - the user can navigate using the navigation arrows or with keyboard shortcuts.\n- on touch devices - the user can navigate using the navigation arrows (always visible) or can use swipe gestures.\n\n### Usage\n\n#### When to use:\n\n- The items you want to display are very different from each other.\n- You want to display the items one after the other.\n\n#### When not to use:\n\n- The items you want to display need to be visible at the same time.\n- The items you want to display are uniform and very similar.\n\n### Keyboard Handling\n\n#### Basic Navigation\nWhen the `ui5-carousel` is focused the user can navigate between the items\nwith the following keyboard shortcuts:\n\n- [Up] or [Down] - Navigates to previous and next item\n- [Left] or [Right] - Navigates to previous and next item\n\n### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Carousel.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **navigate** - Fired whenever the page changes due to user interaction,\nwhen the user clicks on the navigation arrows or while resizing,\nbased on the `items-per-page` property.\n\n### **Methods:**\n - **navigateTo(itemIndex: _number_): _void_** - Changes the currently displayed page.\n\n### **Slots:**\n - **default** - Defines the content of the component.\n\n### **CSS Parts:**\n - **content** - Used to style the content of the component",
      "attributes": [
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the input.",
          "values": []
        },
        {
          "name": "cyclic",
          "description": "Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.",
          "values": []
        },
        {
          "name": "items-per-page",
          "description": "Defines the number of items per page depending on the carousel width.\n\n- 'S' for screens smaller than 600 pixels.\n- 'M' for screens greater than or equal to 600 pixels and smaller than 1024 pixels.\n- 'L' for screens greater than or equal to 1024 pixels and smaller than 1440 pixels.\n- 'XL' for screens greater than or equal to 1440 pixels.\n\nOne item per page is shown by default.",
          "values": []
        },
        {
          "name": "hide-navigation-arrows",
          "description": "Defines the visibility of the navigation arrows.\nIf set to true the navigation arrows will be hidden.",
          "values": []
        },
        {
          "name": "hide-page-indicator",
          "description": "Defines the visibility of the page indicator.\nIf set to true the page indicator will be hidden.",
          "values": []
        },
        {
          "name": "page-indicator-type",
          "description": "Defines the style of the page indicator.\nAvailable options are:\n\n- `Default` - The page indicator will be visualized as dots if there are fewer than 9 pages. If there are more pages, the page indicator will switch to displaying the current page and the total number of pages. (e.g. X of Y)\n- `Numeric` - The page indicator will display the current page and the total number of pages. (e.g. X of Y)",
          "values": [{ "name": "Default" }, { "name": "Numeric" }]
        },
        {
          "name": "background-design",
          "description": "Defines the carousel's background design.",
          "values": [
            { "name": "Transparent" },
            { "name": "Solid" },
            { "name": "Translucent" }
          ]
        },
        {
          "name": "page-indicator-background-design",
          "description": "Defines the page indicator background design.",
          "values": [
            { "name": "Transparent" },
            { "name": "Solid" },
            { "name": "Translucent" }
          ]
        },
        {
          "name": "page-indicator-border-design",
          "description": "Defines the page indicator border design.",
          "values": [{ "name": "None" }, { "name": "Solid" }]
        },
        {
          "name": "arrows-placement",
          "description": "Defines the position of arrows.\n\nAvailable options are:\n\n- `Content` - the arrows are placed on the sides of the current page.\n- `Navigation` - the arrows are placed on the sides of the page indicator.",
          "values": [{ "name": "Content" }, { "name": "Navigation" }]
        },
        {
          "name": "visible-items-indices",
          "description": "The indices of the currently visible items of the component.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-checkbox",
      "description": "### Overview\n\nAllows the user to set a binary value, such as true/false or yes/no for an item.\n\nThe `ui5-checkbox` component consists of a box and a label that describes its purpose.\nIf it's checked, an indicator is displayed inside the box.\nTo check/uncheck the `ui5-checkbox`, the user has to click or tap the square\nbox or its label.\n\nThe `ui5-checkbox` component only has 2 states - checked and unchecked.\nClicking or tapping toggles the `ui5-checkbox` between checked and unchecked state.\n\n### Usage\n\nYou can define the checkbox text with via the `text` property. If the text exceeds the available width, it is truncated by default.\nIn case you prefer text to truncate, set the `wrappingType` property to \"None\".\nThe touchable area for toggling the `ui5-checkbox` ends where the text ends.\n\nYou can disable the `ui5-checkbox` by setting the `disabled` property to\n`true`,\nor use the `ui5-checkbox` in read-only mode by setting the `readonly`\nproperty to `true`.\n\n### Keyboard Handling\n\nThe user can use the following keyboard shortcuts to toggle the checked state of the `ui5-checkbox`.\n\n- [Space],[Enter] - Toggles between different states: checked, not checked.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CheckBox.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **root** - Used to style the outermost wrapper of the `ui5-checkbox`\n- **label** - Used to style the label of the `ui5-checkbox`\n- **icon** - Used to style the icon of the `ui5-checkbox`",
      "attributes": [
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "display-only",
          "description": "Determines whether the `ui5-checkbox` is in display only state.\n\nWhen set to `true`, the `ui5-checkbox` is not interactive, not editable, not focusable\nand not in the tab chain. This setting is used for forms in review mode.\n\n**Note:** When the property `disabled` is set to `true` this property has no effect.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "indeterminate",
          "description": "Defines whether the component is displayed as partially checked.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction and the resulting visual state depends on the values of the `indeterminate`\nand `checked` properties:\n\n-  If the component is checked and indeterminate, it will be displayed as partially checked\n-  If the component is checked and it is not indeterminate, it will be displayed as checked\n-  If the component is not checked, it will be displayed as not checked regardless value of the indeterminate attribute",
          "values": []
        },
        {
          "name": "checked",
          "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking/tapping on the component, or by\npressing the Enter or Space key.",
          "values": []
        },
        {
          "name": "text",
          "description": "Defines the text of the component.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "wrapping-type",
          "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.\n**Note:** for option \"None\" the text will be truncated with an ellipsis.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-color-palette",
      "description": "### Overview\nThe `ui5-color-palette` provides the users with a range of predefined colors. The colors are fixed and do not change with the theme.\n\n### Usage\n\nThe `ui5-color-palette` is meant for users that need to select a color from a predefined set.\nTo define the colors, use the `ui5-color-palette-item` component inside the default slot of the `ui5-color-palette`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ColorPalette.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **item-click** - Fired when the user selects a color.\n\n### **Slots:**\n - **default** - Defines the `ui5-color-palette-item` elements.",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-color-palette-item",
      "description": "### Overview\n\nThe `ui5-color-palette-item` component represents a color in the the `ui5-color-palette`.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the colour of the component.\n\n**Note:** The value should be a valid CSS color.",
          "values": []
        },
        {
          "name": "selected",
          "description": "Defines if the component is selected.\n\n**Note:** Only one item must be selected per <code>ui5-color-palette</code>.\nIf more than one item is defined as selected, the last one would be considered as the selected one.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-color-palette-popover",
      "description": "### Overview\nRepresents a predefined range of colors for easier selection.\n\nOverview\nThe ColorPalettePopover provides the users with a slot to predefine colors.\n\nYou can customize them with the use of the colors property. You can specify a defaultColor and display a \"Default color\" button for the user to choose directly.\nYou can display a \"More colors...\" button that opens an additional color picker for the user to choose specific colors that are not present in the predefined range.\n\n### Usage\n\nThe palette is intended for users, who don't want to check and remember the different values of the colors and spend large amount of time to configure the right color through the color picker.\n\nFor the `ui5-color-palette-popover`\n### ES6 Module Import\n\n`import @ui5/webcomponents/dist/ColorPalettePopover.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **item-click** - Fired when the user selects a color.\n- **close** - Fired when the `ui5-color-palette-popover` is closed due to user interaction.\n\n### **Slots:**\n - **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "show-recent-colors",
          "description": "Defines whether the user can see the last used colors in the bottom of the component",
          "values": []
        },
        {
          "name": "show-more-colors",
          "description": "Defines whether the user can choose a custom color from a component.",
          "values": []
        },
        {
          "name": "show-default-color",
          "description": "Defines whether the user can choose the default color from a button.",
          "values": []
        },
        {
          "name": "default-color",
          "description": "Defines the default color of the component.\n\n**Note:** The default color should be a part of the ColorPalette colors`",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines the open | closed state of the popover.",
          "values": []
        },
        {
          "name": "opener",
          "description": "Defines the ID or DOM Reference of the element that the popover is shown at.\nWhen using this attribute in a declarative way, you must only use the `id` (as a string) of the element at which you want to show the popover.\nYou can only set the `opener` attribute to a DOM Reference when using JavaScript.",
          "values": [{ "name": "HTMLElement" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-color-picker",
      "description": "### Overview\nThe `ui5-color-picker` allows users to choose any color and provides different input options for selecting colors.\n\n### Usage\n\n#### When to use\nUse the color picker if:\n\n-  users need to select any color freely.\n\n#### When not to use\n\n-  Users need to select one color from a predefined set of colors. Use the ColorPalette component instead.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ColorPicker.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the the selected color is changed",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the currently selected color of the component.\n\n**Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "simplified",
          "description": "When set to `true`, the alpha slider and inputs for RGB values will not be displayed.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-combobox",
      "description": "### Overview\n\nThe `ui5-combobox` component represents a drop-down menu with a list of the available options and a text input field to narrow down the options.\n\nIt is commonly used to enable users to select an option from a predefined list.\n\n### Structure\nThe `ui5-combobox` consists of the following elements:\n\n-  Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.\n-  Drop-down arrow - expands\\collapses the option list.\n-  Option list - the list of available options.\n\n### Keyboard Handling\n\nThe `ui5-combobox` provides advanced keyboard handling.\n\n- [F4], [Alt]+[Up], or [Alt]+[Down] - Toggles the picker.\n- [Escape] - Closes the picker, if open. If closed, cancels changes and reverts the typed in value.\n- [Enter] or [Return] - If picker is open, takes over the currently selected item and closes it.\n- [Down] - Selects the next matching item in the picker.\n- [Up] - Selects the previous matching item in the picker.\n- [Page Down] - Moves selection down by page size (10 items by default).\n- [Page Up] - Moves selection up by page size (10 items by default).\n- [Home] - If focus is in the ComboBox, moves cursor at the beginning of text. If focus is in the picker, selects the first item.\n- [End] - If focus is in the ComboBox, moves cursor at the end of text. If focus is in the picker, selects the last item.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ComboBox.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter, focusout or an item is selected.\n- **open** - Fired when the dropdown is opened.\n- **close** - Fired when the dropdown is closed.\n- **input** - Fired when typing in input or clear icon is pressed.\n\n**Note:** filterValue property is updated, input is changed.\n- **selection-change** - Fired when selection is changed by user interaction\n\n### **Slots:**\n - **default** - Defines the component items.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the `ui5-combobox` is in `Information`, `Critical` or `Negative` value state.\n- **icon** - Defines the icon to be displayed in the input field.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the value of the component.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "no-typeahead",
          "description": "Defines whether the value will be autocompleted to match an item",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "loading",
          "description": "Indicates whether a loading indicator should be shown in the picker.",
          "values": []
        },
        {
          "name": "filter",
          "description": "Defines the filter type of the component.",
          "values": [
            { "name": "None" },
            { "name": "StartsWithPerTerm" },
            { "name": "StartsWith" },
            { "name": "Contains" }
          ]
        },
        {
          "name": "show-clear-icon",
          "description": "Defines whether the clear icon of the combobox will be shown.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates whether the items picker is open.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-cb-item",
      "description": "The `ui5-cb-item` represents the item for a `ui5-combobox`.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the component.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the additional text of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-cb-item-group",
      "description": "The `ui5-cb-group-item` is type of suggestion item,\nthat can be used to split the `ui5-combobox` suggestions into groups.\n\n\n---\n\n\n\n\n### **Events:**\n - **move-over** - Fired when a movable list item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the items of the <code>ui5-cb-item-group</code>.\n- **header** - Defines the header of the component.\n\n**Note:** Using this slot, the default header text of group and the value of `headerText` property will be overwritten.\n\n### **CSS Parts:**\n - **header** - Used to style the header item of the group",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text of the <code>ui5-li-group</code>.",
          "values": []
        },
        {
          "name": "header-accessible-name",
          "description": "Defines the accessible name of the header.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "date-component-base",
      "description": "Abstract class that provides common functionality for date-related components (day picker, month picker, year picker, calendar, date picker, date range picker, date time picker)\nThis includes:\n - \"languageAware: true\" metadata setting, CLDR fetch and i18n initialization\n - common properties (primaryCalendar, minDate, maxDate and formatPattern) declaration and methods that operate on them\n - additional common methods\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-date-picker",
      "description": "### Overview\n\nThe `ui5-date-picker` component provides an input field with assigned calendar which opens on user action.\nThe `ui5-date-picker` allows users to select a localized date using touch,\nmouse, or keyboard input. It consists of two parts: the date input field and the\ndate picker.\n\n### Usage\n\nThe user can enter a date by:\n\n- Using the calendar that opens in a popup\n- Typing it in directly in the input field\n\nWhen the user makes an entry and presses the enter key, the calendar shows the corresponding date.\nWhen the user directly triggers the calendar display, the actual date is displayed.\n\n### Formatting\n\nIf a date is entered by typing it into\nthe input field, it must fit to the used date format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](http://unicode.org/reports/tr35/#Date_Field_Symbol_Table).\n\nFor example, if the `format-pattern` is \"yyyy-MM-dd\",\na valid value string is \"2015-07-30\" and the same is displayed in the input.\n\n### Keyboard Handling\nThe `ui5-date-picker` provides advanced keyboard handling.\nIf the `ui5-date-picker` is focused,\nyou can open or close the drop-down by pressing [F4], [Alt] + [Up] or [Alt] + [Down] keys.\nOnce the drop-down is opened, you can use the [Up], [Down], [Left] or [Right] arrow keys\nto navigate through the dates and select one by pressing the `Space` or `Enter` keys. Moreover you can\nuse TAB to reach the buttons for changing month and year.\n\nIf the `ui5-date-picker` input field is focused and its corresponding picker dialog is not opened,\nthen users can increment or decrement the date referenced by `dateValue` property\nby using the following shortcuts:\n\n- [Page Down] - Decrements the corresponding day of the month by one\n- [Shift] + [Page Down] - Decrements the corresponding month by one\n- [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n- [Page Up] - Increments the corresponding day of the month by one\n- [Shift] + [Page Up] - Increments the corresponding month by one\n- [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n\n### Calendar types\nThe component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese and Persian.\nBy default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese or Persian calendar,\nyou need to set the `primaryCalendarType` property and import one or more of the following modules:\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\";`\n\nOr, you can use the global configuration and set the `calendarType` key:\n\n```html\n<script data-id=\"sap-ui-config\" type=\"application/json\">\n\t{\n\t\t\"calendarType\": \"Japanese\"\n\t}\n<script>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DatePicker.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n- **open** - Fired after the component's picker is opened.\n- **close** - Fired after the component's picker is closed.\n\n### **Methods:**\n - **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines a formatted date value.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Determines whether the component is displayed as disabled.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Determines whether the component is displayed as read-only.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "hide-week-numbers",
          "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines the open or closed state of the popover.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the aria-label attribute for the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "date-value",
          "description": "Currently selected date represented as a Local JavaScript Date instance.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-daterange-picker",
      "description": "### Overview\nThe DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n\n### Usage\nThe user can enter a date by:\nUsing the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\nFor the `ui5-daterange-picker`\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DateRangePicker.js\";`\n\n### Keyboard Handling\nThe `ui5-daterange-picker` provides advanced keyboard handling.\n\nWhen the `ui5-daterange-picker` input field is focused the user can\nincrement or decrement respectively the range start or end date, depending on where the cursor is.\nThe following shortcuts are available:\n\n- [Page Down] - Decrements the corresponding day of the month by one\n- [Shift] + [Page Down] - Decrements the corresponding month by one\n- [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n- [Page Up] - Increments the corresponding day of the month by one\n- [Shift] + [Page Up] - Increments the corresponding month by one\n- [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n- **open** - Fired after the component's picker is opened.\n- **close** - Fired after the component's picker is closed.\n\n### **Methods:**\n - **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "delimiter",
          "description": "Determines the symbol which separates the dates.\nIf not supplied, the default time interval delimiter for the current locale will be used.",
          "values": []
        },
        {
          "name": "date-value",
          "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "date-value-utc",
          "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "start-date-value",
          "description": "Returns the start date of the currently selected range as JavaScript Date instance.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "end-date-value",
          "description": "Returns the end date of the currently selected range as JavaScript Date instance.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "value",
          "description": "Defines a formatted date value.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Determines whether the component is displayed as disabled.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Determines whether the component is displayed as read-only.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "hide-week-numbers",
          "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines the open or closed state of the popover.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the aria-label attribute for the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-datetime-picker",
      "description": "### Overview\nThe `DateTimePicker` component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\nand for the purpose it consists of input field and Date/Time picker.\n\n### Usage\n\nUse the `DateTimePicker` if you need a combined date and time input component.\nDon't use it if you want to use either date, or time value.\nIn this case, use the `DatePicker` or the `TimePicker` components instead.\n\nThe user can set date/time by:\n\n- using the calendar and the time selectors\n- typing in the input field\n\nProgrammatically, to set date/time for the `DateTimePicker`, use the `value` property\n\n### Formatting\n\nThe value entered by typing into the input field must fit to the used date/time format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n\n**Example:** the following format `dd/MM/yyyy, hh:mm:ss aa`\ncorresponds the `13/04/2020, 03:16:16 AM` value.\n\nThe small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n\n**Example:** the following format `dd/MM/yyyy, HH:mm:ss`\ncorresponds the `13/04/2020, 15:16:16` value.\n\nThe capital 'H' indicates \"24\" hours format.\n\n**Note:** If the `formatPattern` does NOT include time,\nthe `DateTimePicker` will fallback to the default time format according to the locale.\n\n**Note:** If no placeholder is set to the `DateTimePicker`,\nthe current `formatPattern` is displayed as a placeholder.\nIf another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n\n**Note:** If the user input does NOT match the `formatPattern`,\nthe `DateTimePicker` makes an attempt to parse it based on the\nlocale settings.\n\n### Responsive behavior\n\nThe `DateTimePicker` is responsive and fully adapts to all devices.\nFor larger screens, such as tablet or desktop, it is displayed as a popover, while\non phone devices, it is displayed full screen.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DateTimePicker.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n- **open** - Fired after the component's picker is opened.\n- **close** - Fired after the component's picker is closed.\n\n### **Methods:**\n - **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines a formatted date value.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Determines whether the component is displayed as disabled.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Determines whether the component is displayed as read-only.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "hide-week-numbers",
          "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines the open or closed state of the popover.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the aria-label attribute for the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "date-value",
          "description": "Currently selected date represented as a Local JavaScript Date instance.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "primary-calendar-type",
          "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "secondary-calendar-type",
          "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
          "values": [
            { "name": "Gregorian" },
            { "name": "Islamic" },
            { "name": "Japanese" },
            { "name": "Buddhist" },
            { "name": "Persian" }
          ]
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.",
          "values": []
        },
        {
          "name": "min-date",
          "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "max-date",
          "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
          "values": []
        },
        {
          "name": "calendar-week-numbering",
          "description": "Defines how to calculate calendar weeks and first day of the week.\nIf not set, the calendar will be displayed according to the currently set global configuration.",
          "values": [
            { "name": "Default" },
            { "name": "ISO_8601" },
            { "name": "MiddleEastern" },
            { "name": "WesternTraditional" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-dialog",
      "description": "### Overview\nThe `ui5-dialog` component is used to temporarily display some information in a\nsize-limited window in front of the regular app screen.\nIt is used to prompt the user for an action or a confirmation.\nThe `ui5-dialog` interrupts the current app processing as it is the only focused UI element and\nthe main screen is dimmed/blocked.\nThe dialog combines concepts known from other technologies where the windows have\nnames such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.\n\nThe `ui5-dialog` is modal, which means that a user action is required before it is possible to return to the parent window.\nTo open multiple dialogs, each dialog element should be separate in the markup. This will ensure the correct modal behavior. Avoid nesting dialogs within each other.\nThe content of the `ui5-dialog` is fully customizable.\n\n### Structure\nA `ui5-dialog` consists of a header, content, and a footer for action buttons.\nThe `ui5-dialog` is usually displayed at the center of the screen.\nIts position can be changed by the user. To enable this, you need to set the property `draggable` accordingly.\n\n\n### Responsive Behavior\nThe `stretch` property can be used to stretch the `ui5-dialog` to full screen. For better usability, it's recommended to stretch the dialog to full screen on phone devices.\n\n**Note:** When a `ui5-bar` is used in the header or in the footer, you should remove the default dialog's paddings.\n\nFor more information see the sample \"Bar in Header/Footer\".\n\n### Keyboard Handling\n\n#### Basic Navigation\nWhen the `ui5-dialog` has the `draggable` property set to `true` and the header is focused, the user can move the dialog\nwith the following keyboard shortcuts:\n\n- [Up] or [Down] arrow keys - Move the dialog up/down.\n- [Left] or [Right] arrow keys - Move the dialog left/right.\n\n#### Resizing\nWhen the `ui5-dialog` has the `resizable` property set to `true` and the header is focused, the user can change the size of the dialog\nwith the following keyboard shortcuts:\n\n- [Shift] + [Up] or [Down] - Decrease/Increase the height of the dialog.\n- [Shift] + [Left] or [Right] - Decrease/Increase the width of the dialog.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Dialog\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening.\n- **open** - Fired after the component is opened.\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing.\n- **close** - Fired after the component is closed.\n\n### **Methods:**\n - **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n\n### **Slots:**\n - **header** - Defines the header HTML Element.\n\n**Note:** When a `ui5-bar` is used in the header, you should remove the default dialog's paddings.\n\n**Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application developer.\n`accessibleName` should be used.\n- **footer** - Defines the footer HTML Element.\n\n**Note:** When a `ui5-bar` is used in the footer, you should remove the default dialog's paddings.\n- **default** - Defines the content of the Popup.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
          "values": []
        },
        {
          "name": "stretch",
          "description": "Determines if the dialog will be stretched to full screen on mobile. On desktop,\nthe dialog will be stretched to approximately 90% of the viewport.\n\n**Note:** For better usability of the component it is recommended to set this property to \"true\" when the dialog is opened on phone.",
          "values": []
        },
        {
          "name": "draggable",
          "description": "Determines whether the component is draggable.\nIf this property is set to true, the Dialog will be draggable by its header.\n\n**Note:** The component can be draggable only in desktop mode.\n\n**Note:** This property overrides the default HTML \"draggable\" attribute native behavior.\nWhen \"draggable\" is set to true, the native browser \"draggable\"\nbehavior is prevented and only the Dialog custom logic (\"draggable by its header\") works.",
          "values": []
        },
        {
          "name": "resizable",
          "description": "Configures the component to be resizable.\nIf this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages.\nIn RTL languages, the resize handle will be placed in the bottom left corner.\n\n**Note:** The component can be resizable only in desktop mode.\n\n**Note:** Upon resizing, externally defined height and width styling will be ignored.",
          "values": []
        },
        {
          "name": "state",
          "description": "Defines the state of the `Dialog`.\n\n**Note:** If `\"Negative\"` and `\"Critical\"` states is set, it will change the\naccessibility role to \"alertdialog\", if the accessibleRole property is set to `\"Dialog\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "initial-focus",
          "description": "Defines the ID of the HTML Element, which will get the initial focus.\n\n**Note:** If an element with `autofocus` attribute is added inside the component,\n`initialFocus` won't take effect.",
          "values": []
        },
        {
          "name": "prevent-focus-restore",
          "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Allows setting a custom role.",
          "values": [
            { "name": "None" },
            { "name": "Dialog" },
            { "name": "AlertDialog" }
          ]
        },
        {
          "name": "prevent-initial-focus",
          "description": "Indicates whether initial focus should be prevented.",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates if the element is open",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-expandable-text",
      "description": "### Overview\n\nThe `ui5-expandable-text` component allows displaying a large body of text in a small space. It provides an \"expand/collapse\" functionality, which shows/hides potentially truncated text.\n\n### Usage\n\n#### When to use:\n- To accommodate long texts in limited space, for example in list items, table cell texts, or forms\n\n#### When not to use:\n- The content is critical for the user. In this case use short descriptions that can fit in\n- Strive to provide short and meaningful texts to avoid excessive number of \"Show More\" links on the page\n\n### Responsive Behavior\n\nOn phones, if the component is configured to display the full text in a popover, the popover will appear in full screen.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ExpandableText\";`\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "text",
          "description": "Text of the component.",
          "values": []
        },
        {
          "name": "max-characters",
          "description": "Maximum number of characters to be displayed initially. If the text length exceeds this limit, the text will be truncated with an ellipsis, and the \"More\" link will be displayed.",
          "values": []
        },
        {
          "name": "overflow-mode",
          "description": "Determines how the full text will be displayed.",
          "values": [{ "name": "InPlace" }, { "name": "Popover" }]
        },
        {
          "name": "empty-indicator-mode",
          "description": "Specifies if an empty indicator should be displayed when there is no text.",
          "values": [{ "name": "On" }, { "name": "Off" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-file-uploader",
      "description": "### Overview\n\nThe `ui5-file-uploader` opens a file explorer dialog and enables users to upload files.\nThe component consists of input field, but you can provide an HTML element by your choice\nto trigger the file upload, by using the default slot.\nFurthermore, you can set the property \"hideInput\" to \"true\" to hide the input field.\n\nTo get all selected files, you can simply use the read-only \"files\" property.\nTo restrict the types of files the user can select, you can use the \"accept\" property.\n\nAnd, similar to all input based components, the FileUploader supports \"valueState\", \"placeholder\", \"name\", and \"disabled\" properties.\n\nFor the `ui5-file-uploader`\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/FileUploader.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Event is fired when the value of the file path has been changed.\n\n**Note:** Keep in mind that because of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button of the uploads window is pressed.\n- **file-size-exceed** - Event is fired when the size of a file is above the `maxFileSize` property value.\n\n### **Slots:**\n - **default** - By default the component contains a single input field. With this slot you can pass any content that you wish to add. See the samples for more information.\n\n**Note:** If no content is provided in this slot, the component will only consist of an input field and will not be interactable using the keyboard.\nAlso it is not recommended to use any non-interactable components, as it may lead to poor accessibility experience.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "accept",
          "description": "Comma-separated list of file types that the component should accept.\n\n**Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you want to accept png's only.",
          "values": []
        },
        {
          "name": "hide-input",
          "description": "If set to \"true\", the input field of component will not be rendered. Only the default slot that is passed will be rendered.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "multiple",
          "description": "Allows multiple files to be chosen.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
          "values": []
        },
        {
          "name": "value",
          "description": "Defines the name/names of the file/files to upload.",
          "values": []
        },
        {
          "name": "max-file-size",
          "description": "Defines the maximum file size in megabytes which prevents the upload if at least one file exceeds it.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "files",
          "description": "FileList of all selected files.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-form",
      "description": "### Overview\n\nThe Form is a layout component that arranges labels and form fields (like input fields) pairs\ninto a specific number of columns.\n\n**Note:** The Form web component is a layout component, it isn't a replacement for the native `form` HTML element.\nThe Form web component does not provide any APIs for form submission.\n\n### Structure\n\n- **Form** (`ui5-form`) is the top-level container component, responsible for the content layout and responsiveness.\n- **FormGroup** (`ui5-form-group`) enables the grouping of the Form content.\n- **FormItem** (`ui5-form-item`) is a pair of label and form fields and can be used directly in a Form, or as part of a FormGroup.\n\nThe simplest Form (`ui5-form`) consists of a header area on top,\ndisplaying a header text (see the `headingText` property) and content below - an arbitrary number of FormItems (ui5-form-item),\nrepresenting the pairs of label and form fields.\n\nAnd, there is also \"grouping\" available to assist the implementation of richer UIs.\nThis is enabled by the FormGroup (`ui5-form-group`) component.\nIn this case, the Form is structured into FormGroups and each FormGroup consists of FormItems.\n\n### Responsiveness\n\nThe Form component reacts and changes its layout on predefined breakpoints.\nDepending on its size, the Form content (FormGroups and FormItems) gets divided into one or more columns as follows:\n- **S** (< 600px) – 1 column is recommended (default: 1)\n- **M** (600px - 1022px) – up to 2 columns are recommended (default: 1)\n- **L** (1023px - 1439px) - up to 3 columns are recommended (default: 2)\n- **XL** (> 1439px) – up to 6 columns are recommended (default: 3)\n\nTo change the layout, use the `layout` property - f.e. layout=\"S1 M2 L3 XL6\".\n\n### Groups\n\nTo make better use of screen space, there is built-in logic to determine how many columns should a FormGroup occupy.\n\n- **Example #1** (perfect match):\n4 columns and 4 groups: each group will use 1 column.\n\n- **Example #2** (balanced distribution):\n4 columns and 2 groups: each group will use 2 columns.\n6 columns and 2 groups: each group will use 3 columns.\n\n- **Example #3** (unbalanced distribution):\n3 columns and 2 groups: the larger one will use 2 columns, the smaller 1 column.\n5 columns and 3 groups: two of the groups will use 2 columns each, the smallest 1 column.\n\n**Note:** The size of a group element is determined by the number of FormItems assigned to it.\nIn the case of equality, the first in the DOM will use more columns, and the last - fewer columns.\n\n- **Example #4** (more groups than columns):\n3 columns and 4 groups: each FormGroup uses only 1 column, the last FormGroup will wrap on the second row.\n\n### Groups Column Span\n\nTo influence the built-in group distribution, described in the previous section,\nyou can use the FormGroup's `columnSpan` property, that defines how many columns the group should expand to.\n\n### Items Column Span\n\nFormItem's columnSpan property defines how many columns the form item should expand to inside a form group or the form.\n\n### Items Label Span\n\nThe placement of the labels depends on the size of the used column.\nIf there is enough space, the labels are next to their associated fields, otherwise  - above the fields.\nBy default, the labels take 4/12 of the FormItem, leaving 8/12 parts to associated fields.\nYou can control what space the labels should take via the `labelSpan` property.\n\n**For example:** To always place the labels on top set: `labelSpan=\"S12 M12 L12 XL12\"` property.\n\n### Items Empty Span\n\nBy default, a form item spans 12 cells, fully divided between its label and field, with no empty space at the end:\n- **Label:** occupies 4 cells.\n- **Field:** occupies 8 cells.\n\nThe `emptySpan` property provides additional layout flexibility by defining empty space at the form item’s end.\n\n**For example:** Setting \"S0 M0 L3 XL3\" (or just \"L3 XL3\") adjusts the layout as follows:\n- **Label:** remains 4 cells.\n- **Field:** is reduced to 5 cells.\n- **Empty space:** 3 cells are added at the end.\n\nGreater values increase the empty space at the end of the form item, reducing the space available for the label and its field.\nHowever, setting `emptySpan` to 1 cell is recommended and typically sufficient to achieve a balanced layout.\n\n### Navigation flow\n\nThe Form component supports two layout options for keyboard navigation:\n\n#### Simple form\n\nIn this \"simple form\" layout, each `ui5-form-item` acts as a standalone group\nwith one item, so focus moves horizontally across the grid from one `ui5-form-item` to the next.\nThis layout is ideal for simpler forms and supports custom arrangements, e.g.,\n\n```\n| 1 | 2 |\n|   3   |\n| 4 | 5 |\n```\n\n#### Complex form\n\nIn this layout, items are grouped into `ui5-form-group` elements, allowing more complex configurations:\n\n- **Single-Column Group**: Focus moves vertically down from one item to the next.\n  ```\n  | 1 |\n  | 2 |\n  | 3 |\n  ```\n\n- **Multi-Column Group**: Focus moves horizontally within each row, advancing to the next row after completing the current one.\n  ```\n  | 1 | 4 |\n  | 2 | 5 |\n  | 3 | 6 |\n  ```\n\n### Keyboard Handling\n\n- [Tab] - Moves the focus to the next interactive element within the Form/FormGroup (if available) or to the next element in the tab chain outside the Form\n- [Shift] + [Tab] - Moves the focus to the previous interactive element within the Form/FormGroup (if available) or to the previous element in the tab chain outside the Form\n- [F6] - Moves the focus to the first interactive element of the next FormGroup (if available) or to the next element in the tab chain outside the Form\n- [Shift] + [F6] - Moves the focus to the first interactive element of the previous FormGroup (if available) or to the previous element in the tab chain outside the Form\n\n### ES6 Module Import\n\n- import @ui5/webcomponents/dist/Form.js\";\n- import @ui5/webcomponents/dist/FormGroup.js\";\n- import @ui5/webcomponents/dist/FormItem.js\";\n\n\n---\n\n\n\n\n### **Slots:**\n - **header** - Defines the component header area.\n\n**Note:** When a `header` is provided, the `headerText` property is ignored.\n- **default** - Defines the component content - FormGroups or FormItems.\n\n**Note:** Mixing FormGroups and standalone FormItems (not belonging to a group) is not supported.\nEither use FormGroups and make sure all FormItems are part of a FormGroup, or use just FormItems without any FormGroups.\n\n### **CSS Parts:**\n - **header** - Used to style the wrapper of the header.\n- **layout** - Used to style the element defining the form column layout.\n- **column** - Used to style a single column of the form column layout.",
      "attributes": [
        {
          "name": "layout",
          "description": "Defines the number of columns to distribute the form content by breakpoint.\n\nSupported values:\n- `S` - 1 column by default (1 column is recommended)\n- `M` - 1 column by default (up to 2 columns are recommended)\n- `L` - 2 columns by default (up to 3 columns are recommended)\n- `XL` - 3 columns by default (up to 6 columns  are recommended)",
          "values": []
        },
        {
          "name": "label-span",
          "description": "Defines the width proportion of the labels and fields of a form item by breakpoint.\n\nBy default, the labels take 4/12 (or 1/3) of the form item in M,L and XL sizes,\nand 12/12 in S size, e.g in S the label is on top of its associated field.\n\nThe supported values are between 1 and 12. Greater the number, more space the label will use.\n\n**Note:** If \"12\" is set, the label will be displayed on top of its assosiated field.",
          "values": []
        },
        {
          "name": "empty-span",
          "description": "Defines the number of cells that are empty at the end of each form item, configurable by breakpoint.\n\nBy default, a form item spans 12 cells, fully divided between its label (4 cells) and field (8 cells), with no empty space at the end.\nThe `emptySpan` provides additional layout flexibility by defining empty space at the form item’s end.\n\n**Note:**\n- The maximum allowable empty space is 10 cells. At least 1 cell each must remain for the label and the field.\n- When `emptySpan` is specified (greater than 0), ensure that the combined value of `emptySpan` and `labelSpan` does not exceed 11. This guarantees a minimum of 1 cell for the field.",
          "values": []
        },
        {
          "name": "header-text",
          "description": "Defines the header text of the component.\n\n**Note:** The property gets overridden by the `header` slot.",
          "values": []
        },
        {
          "name": "item-spacing",
          "description": "Defines the vertical spacing between form items.\n\n**Note:** If the Form is meant to be switched between \"non-edit\" and \"edit\" modes,\nwe recommend using \"Large\" item spacing in \"non-edit\" mode, and \"Normal\" - for \"edit\" mode,\nto avoid \"jumping\" effect, caused by the hight difference between texts in \"non-edit\" mode and the input fields in \"edit\" mode.",
          "values": [{ "name": "Normal" }, { "name": "Large" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-form-group",
      "description": "### Overview\n\nThe FormGroup (ui5-form-group) represents a group inside the Form (ui5-form) component\nand it consists of FormItem (ui5-form-item) components.\n\nThe layout of the FormGroup is mostly defined and controlled by the overarching Form (ui5-form) component.\nStill, one can influence the layout via the FormGroup's `columnSpan` property,\nthat defines how many columns the group should expand to.\n\n### Usage\n\nТhe FormGroup (ui5-form-group) allows to split a Form into groups,\ne.g to group FormItems that logically belong together.\n\n### ES6 Module Import\n\n- import @ui5/webcomponents/dist/FormGroup.js\";\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the items of the component.",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines header text of the component.",
          "values": []
        },
        {
          "name": "column-span",
          "description": "Defines column span of the component,\ne.g how many columns the group should span to.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-form-item",
      "description": "### Overview\n\nThe FormItem (ui5-form-item) represents pair of a label and\none or more components (text or text fields), associated to it.\n\n### Usage\n\nThe FormItem is being used in FormGroup (ui5-form-group) or directly in Form (ui5-form).\n\n### ES6 Module Import\n\n- import @ui5/webcomponents/dist/FormItem.js\";\n\n\n---\n\n\n\n\n### **Slots:**\n - **labelContent** - Defines the label of the component.\n- **default** - Defines the content of the component,\nassociated to `labelContent`.\n\n### **CSS Parts:**\n - **layout** - Used to style the parent element of the label and content parts.\n- **label** - Used to style the label part of the form item.\n- **content** - Used to style the content part of the form item.",
      "attributes": [
        {
          "name": "column-span",
          "description": "Defines the column span of the component,\ne.g how many columns the component should span to.\n\n**Note:** The column span should be a number between 1 and the available columns of the FormGroup (when items are placed in a group)\nor the Form. The available columns can be affected by the FormGroup#columnSpan and/or the Form#layout.\nA number bigger than the available columns won't take effect.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-icon",
      "description": "### Overview\n\nThe `ui5-icon` component represents an SVG icon.\nThere are two main scenarios how the `ui5-icon` component is used:\nas a purely decorative element,\nor as an interactive element that can be focused and clicked.\n\n### Usage\n\n1. **Get familiar with the icons collections.**\n\nBefore displaying an icon, you need to explore the icons collections to find and import the desired icon.\n\nCurrently there are 3 icons collection, available as 3 npm packages:\n\n- [@ui5/webcomponents-icons](https://www.npmjs.com/package/@ui5/webcomponents-icons) represents the \"SAP-icons\" collection and includes the following\n[icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons).\n- [@ui5/webcomponents-icons-tnt](https://www.npmjs.com/package/@ui5/webcomponents-icons-tnt) represents the \"tnt\" collection and includes the following\n[icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons-TNT).\n- [@ui5/webcomponents-icons-business-suite](https://www.npmjs.com/package/@ui5/webcomponents-icons-business-suite) represents the \"business-suite\" collection and includes the following\n[icons](https://ui5.sap.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/BusinessSuiteInAppSymbols).\n\n2. **After exploring the icons collections, add one or more of the packages as dependencies to your project.**\n\n`npm i @ui5/webcomponents-icons`\n`npm i @ui5/webcomponents-icons-tnt`\n`npm i @ui5/webcomponents-icons-business-suite`\n\n3. **Then, import the desired icon**.\n\n`import \"@ui5/\\{package_name\\}/dist/\\{icon_name\\}.js\";`\n\n**For Example**:\n\nFor the standard \"SAP-icons\" icon collection, import an icon from the `@ui5/webcomponents-icons` package:\n\n`import \"@ui5/webcomponents-icons/dist/employee.js\";`\n\nFor the \"tnt\" (SAP Fiori Tools) icon collection, import an icon from the `@ui5/webcomponents-icons-tnt` package:\n\n`import \"@ui5/webcomponents-icons-tnt/dist/antenna.js\";`\n\nFor the \"business-suite\" (SAP Business Suite) icon collection, import an icon from the `@ui5/webcomponents-icons-business-suite` package:\n\n`import \"@ui5/webcomponents-icons-business-suite/dist/ab-testing.js\";`\n\n4. **Display the icon using the `ui5-icon` web component.**\nSet the icon collection (\"SAP-icons\", \"tnt\" or \"business-suite\" - \"SAP-icons\" is the default icon collection and can be skipped)\nand the icon name to the `name` property.\n\n`<ui5-icon name=\"employee\"></ui5-icon>`\n`<ui5-icon name=\"tnt/antenna\"></ui5-icon>`\n`<ui5-icon name=\"business-suite/ab-testing\"></ui5-icon>`\n\n### Keyboard Handling\n\n- [Space] / [Enter] or [Return] - Fires the `click` event if the `mode` property is set to `Interactive`.\n- [Shift] - If [Space] / [Enter] or [Return] is pressed, pressing [Shift] releases the ui5-icon without triggering the click event.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Icon.js\";`\n\n\n---\n\n\n\n\n### **CSS Parts:**\n - **root** - Used to style the outermost wrapper of the `ui5-icon`.",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the component semantic design.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Critical" },
            { "name": "Information" },
            { "name": "Contrast" },
            { "name": "Neutral" },
            { "name": "NonInteractive" }
          ]
        },
        {
          "name": "name",
          "description": "Defines the unique identifier (icon name) of the component.\n\nTo browse all available icons, see the\n[SAP Icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html),\n[SAP Fiori Tools](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons-TNT) and\n[SAP Business Suite](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html)\n\nExample:\n`name='add'`, `name='delete'`, `name='employee'`.\n\n**Note:** To use the SAP Fiori Tools icons,\nyou need to set the `tnt` prefix in front of the icon's name.\n\nExample:\n`name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.\n\n**Note:** To use the SAP Business Suite icons,\nyou need to set the `business-suite` prefix in front of the icon's name.\n\nExample:\n`name='business-suite/3d'`, `name='business-suite/1x2-grid-layout'`, `name='business-suite/4x4-grid-layout'`.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.\n\n**Note:** Every icon should have a text alternative in order to\ncalculate its accessible name.",
          "values": []
        },
        {
          "name": "show-tooltip",
          "description": "Defines whether the component should have a tooltip.\n\n**Note:** The tooltip text should be provided via the `accessible-name` property.",
          "values": []
        },
        {
          "name": "mode",
          "description": "Defines the mode of the component.",
          "values": [
            { "name": "Image" },
            { "name": "Decorative" },
            { "name": "Interactive" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-input",
      "description": "### Overview\n\nThe `ui5-input` component allows the user to enter and edit text or numeric values in one line.\n\nAdditionally, you can provide `suggestionItems`,\nthat are displayed in a popover right under the input.\n\nThe text field can be editable or read-only (`readonly` property),\nand it can be enabled or disabled (`disabled` property).\nTo visualize semantic states, such as \"Negative\" or \"Critical\", the `valueState` property is provided.\nWhen the user makes changes to the text, the change event is fired,\nwhich enables you to react on any text change.\n\n### Keyboard Handling\nThe `ui5-input` provides the following keyboard shortcuts:\n\n- [Escape] - Closes the suggestion list, if open. If closed or not enabled, cancels changes and reverts to the value which the Input field had when it got the focus.\n- [Enter] or [Return] - If suggestion list is open takes over the current matching item and closes it. If value state or group header is focused, does nothing.\n- [Down] - Focuses the next matching item in the suggestion list. Selection-change event is fired.\n- [Up] - Focuses the previous matching item in the suggestion list. Selection-change event is fired.\n- [Home] - If focus is in the text input, moves caret before the first character. If focus is in the list, highlights the first item and updates the input accordingly.\n- [End] - If focus is in the text input, moves caret after the last character. If focus is in the list, highlights the last item and updates the input accordingly.\n- [Page Up] - If focus is in the list, moves highlight up by page size (10 items by default). If focus is in the input, does nothing.\n- [Page Down] - If focus is in the list, moves highlight down by page size (10 items by default). If focus is in the input, does nothing.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Input.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected.\n- **select** - Fired when some text has been selected.\n- **selection-change** - Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection.\n- **open** - Fired when the suggestions picker is open.\n- **close** - Fired when the suggestions picker is closed.\n\n### **Slots:**\n - **default** - Defines the suggestion items.\n\n**Note:** The suggestions would be displayed only if the `showSuggestions`\nproperty is set to `true`.\n\n**Note:** The `<ui5-suggestion-item>`, `<ui5-suggestion-item-group>` and `ui5-suggestion-item-custom` are recommended to be used as suggestion items.\n- **icon** - Defines the icon to be displayed in the component.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the Input component\n- **input** - Used to style the native input element\n- **clear-icon** - Used to style the clear icon, which can be pressed to clear user input text",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "no-typeahead",
          "description": "Defines whether the value will be autcompleted to match an item",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
          "values": [
            { "name": "Text" },
            { "name": "Email" },
            { "name": "Number" },
            { "name": "Password" },
            { "name": "Tel" },
            { "name": "URL" },
            { "name": "Search" }
          ]
        },
        {
          "name": "value",
          "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "show-suggestions",
          "description": "Defines whether the component should show suggestions, if such are present.",
          "values": []
        },
        {
          "name": "maxlength",
          "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the input.",
          "values": []
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "accessible-description-ref",
          "description": "Receives id(or many ids) of the elements that describe the input.",
          "values": []
        },
        {
          "name": "show-clear-icon",
          "description": "Defines whether the clear icon of the input will be shown.",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines whether the suggestions picker is open.\nThe picker will not open if the `showSuggestions` property is set to `false`, the input is disabled or the input is readonly.\nThe picker will close automatically and `close` event will be fired if the input is not in the viewport.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-label",
      "description": "### Overview\n\nThe `ui5-label` is a component used to represent a label for elements like input, textarea, select.\nThe `for` property of the `ui5-label` must be the same as the id attribute of the related input element.\nScreen readers read out the label, when the user focuses the labelled control.\n\nThe `ui5-label` appearance can be influenced by properties,\nsuch as `required` and `wrappingType`.\nThe appearance of the Label can be configured in a limited way by using the design property.\nFor a broader choice of designs, you can use custom styles.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Label\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "for",
          "description": "Defines the labeled input by providing its ID.\n\n**Note:** Can be used with both `ui5-input` and native input.",
          "values": []
        },
        {
          "name": "show-colon",
          "description": "Defines whether colon is added to the component text.\n\n**Note:** Usually used in forms.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether an asterisk character is added to the component text.\n\n**Note:** Usually indicates that user input (bound with the `for` property) is required.\nIn that case the `required` property of\nthe corresponding input should also be set.",
          "values": []
        },
        {
          "name": "wrapping-type",
          "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-link",
      "description": "### Overview\nThe `ui5-link` is a hyperlink component that is used to navigate to other\napps and web pages, or to trigger actions.\nIt is a clickable text element, visualized in such a way that it stands out\nfrom the standard text.\nOn hover, it changes its style to an underlined text to provide additional feedback to the user.\n\n### Usage\n\nYou can set the `ui5-link` to be enabled or disabled.\n\nTo create a visual hierarchy in large lists of links, you can set the less important links as\n`Subtle` or the more important ones as `Emphasized`,\nby using the `design` property.\n\nIf the `href` property is set, the link behaves as the HTML\nanchor tag (`<a></a>`) and opens the specified URL in the given target frame (`target` property).\nTo specify where the linked content is opened, you can use the `target` property.\n\n### Responsive behavior\n\nIf there is not enough space, the text of the `ui5-link` becomes truncated.\nIf the `wrappingType` property is set to `\"Normal\"`, the text is displayed\non several lines instead of being truncated.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Link\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is triggered either with a mouse/tap\nor by using the Enter key.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n\n### **CSS Parts:**\n - **icon** - Used to style the provided icon within the link\n- **endIcon** - Used to style the provided endIcon within the link",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** When disabled, the click event cannot be triggered by the user.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.",
          "values": []
        },
        {
          "name": "href",
          "description": "Defines the component href.\n\n**Note:** Standard hyperlink behavior is supported.",
          "values": []
        },
        {
          "name": "target",
          "description": "Defines the component target.\n\n**Notes:**\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**This property must only be used when the `href` property is set.**",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the component design.\n\n**Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.",
          "values": [
            { "name": "Default" },
            { "name": "Emphasized" },
            { "name": "Subtle" }
          ]
        },
        {
          "name": "interactive-area-size",
          "description": "Defines the target area size of the link:\n- **InteractiveAreaSize.Normal**: The default target area size.\n- **InteractiveAreaSize.Large**: The target area size is enlarged to 24px in height.\n\n**Note:**The property is designed to make links easier to activate and helps meet the WCAG 2.2 Target Size requirement. It is applicable only for the SAP Horizon themes.\n**Note:**To improve <code>ui5-link</code>'s reliability and usability, it is recommended to use the <code>InteractiveAreaSize.Large</code> value in scenarios where the <code>ui5-link</code> component is placed inside another interactive component, such as a list item or a table cell.\nSetting the <code>interactiveAreaSize</code> property to <code>InteractiveAreaSize.Large</code> increases the <code>ui5-link</code>'s invisible touch area. As a result, the user's intended one-time selection command is more likely to activate the desired <code>ui5-link</code>, with minimal chance of unintentionally activating the underlying component.",
          "values": [{ "name": "Normal" }, { "name": "Large" }]
        },
        {
          "name": "wrapping-type",
          "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** By default the text will wrap. If \"None\" is set - the text will truncate.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the input",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Defines the ARIA role of the component.\n\n**Note:** Use the <code>LinkAccessibleRole.Button</code> role in cases when navigation is not expected to occur and the href property is not defined.",
          "values": [{ "name": "Button" }, { "name": "Link" }]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\nAccepts the following string values: `true` or `false`.\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.",
          "values": [{ "name": "LinkAccessibilityAttributes" }]
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon, displayed as graphical element within the component before the link's text.\nThe SAP-icons font provides numerous options.\n\n**Note:** Usage of icon-only link is not supported, the link must always have a text.\n\n**Note:** We recommend using аn icon in the beginning or the end only, and with text.\n\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "end-icon",
          "description": "Defines the icon, displayed as graphical element within the component after the link's text.\nThe SAP-icons font provides numerous options.\n\n**Note:** Usage of icon-only link is not supported, the link must always have a text.\n\n**Note:** We recommend using аn icon in the beginning or the end only, and with text.\n\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-list",
      "description": "### Overview\n\nThe `ui5-list` component allows displaying a list of items, advanced keyboard\nhandling support for navigating between items, and predefined modes to improve the development efficiency.\n\nThe `ui5-list` is a container for the available list items:\n\n- `ui5-li`\n- `ui5-li-custom`\n- `ui5-li-group`\n\nTo benefit from the built-in selection mechanism, you can use the available\nselection modes, such as\n`Single`, `Multiple` and `Delete`.\n\nAdditionally, the `ui5-list` provides header, footer, and customization for the list item separators.\n\n### Keyboard Handling\n\n#### Basic Navigation\nThe `ui5-list` provides advanced keyboard handling.\nWhen a list is focused the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n- [Up] or [Down] - Navigates up and down the items\n- [Home] - Navigates to first item\n- [End] - Navigates to the last item\n\nThe user can use the following keyboard shortcuts to perform actions (such as select, delete),\nwhen the `selectionMode` property is in use:\n\n- [Space] - Select an item (if `type` is 'Active') when `selectionMode` is selection\n- [Delete] - Delete an item if `selectionMode` property is `Delete`\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/List.js\";`\n\n`import \"@ui5/webcomponents/dist/ListItemStandard.js\";` (for `ui5-li`)\n\n`import \"@ui5/webcomponents/dist/ListItemCustom.js\";` (for `ui5-li-custom`)\n\n`import \"@ui5/webcomponents/dist/ListItemGroup.js\";` (for `ui5-li-group`)\n\n\n---\n\n\n\n\n### **Events:**\n - **item-click** - Fired when an item is activated, unless the item's `type` property\nis set to `Inactive`.\n\n**Note**: This event is not triggered by interactions with selection components such as the checkboxes and radio buttons,\nassociated with non-default `selectionMode` values, or if any other **interactive** component\n(such as a button or input) within the list item is directly clicked.\n- **item-close** - Fired when the `Close` button of any item is clicked\n\n**Note:** This event is only applicable to list items that can be closed (such as notification list items),\nnot to be confused with `item-delete`.\n- **item-toggle** - Fired when the `Toggle` button of any item is clicked.\n\n**Note:** This event is only applicable to list items that can be toggled (such as notification group list items).\n- **item-delete** - Fired when the Delete button of any item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `selectionMode` property is set to `Delete`.\n- **selection-change** - Fired when selection is changed by user interaction\nin `Single`, `SingleStart`, `SingleEnd` and `Multiple` selection modes.\n- **load-more** - Fired when the user scrolls to the bottom of the list.\n\n**Note:** The event is fired when the `growing='Scroll'` property is enabled.\n- **move-over** - Fired when a movable list item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n\n**Note:** Use `ui5-li`, `ui5-li-custom`, and `ui5-li-group` for the intended design.\n- **header** - Defines the component header.\n\n**Note:** When `header` is set, the\n`headerText` property is ignored.\n\n### **CSS Parts:**\n - **growing-button** - Used to style the button, that is used for growing of the component\n- **growing-button-inner** - Used to style the button inner element",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the component header text.\n\n**Note:** If `header` is set this property is ignored.",
          "values": []
        },
        {
          "name": "footer-text",
          "description": "Defines the footer text.",
          "values": []
        },
        {
          "name": "indent",
          "description": "Determines whether the component is indented.",
          "values": []
        },
        {
          "name": "selection-mode",
          "description": "Defines the selection mode of the component.",
          "values": [
            { "name": "Single" },
            { "name": "Multiple" },
            { "name": "None" },
            { "name": "SingleStart" },
            { "name": "SingleEnd" },
            { "name": "SingleAuto" },
            { "name": "Delete" }
          ]
        },
        {
          "name": "no-data-text",
          "description": "Defines the text that is displayed when the component contains no items.",
          "values": []
        },
        {
          "name": "separators",
          "description": "Defines the item separator style that is used.",
          "values": [{ "name": "None" }, { "name": "All" }, { "name": "Inner" }]
        },
        {
          "name": "growing",
          "description": "Defines whether the component will have growing capability either by pressing a `More` button,\nor via user scroll. In both cases `load-more` event is fired.\n\n**Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer,\non IE the component will fallback to `growing=\"Button\"`.",
          "values": [
            { "name": "Button" },
            { "name": "None" },
            { "name": "Scroll" }
          ]
        },
        {
          "name": "growing-button-text",
          "description": "Defines the text that will be displayed inside the growing button.\n\n**Note:** If not specified a built-in text will be displayed.\n\n**Note:** This property takes effect if the `growing` property is set to the `Button`.",
          "values": []
        },
        {
          "name": "loading",
          "description": "Defines if the component would display a loading indicator over the list.",
          "values": []
        },
        {
          "name": "loading-delay",
          "description": "Defines the delay in milliseconds, after which the loading indicator will show up for this component.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "accessible-description-ref",
          "description": "Defines the IDs of the elements that describe the component.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Defines the accessible role of the component.",
          "values": [
            { "name": "List" },
            { "name": "Menu" },
            { "name": "Tree" },
            { "name": "ListBox" }
          ]
        },
        {
          "name": "list-items",
          "description": "Returns an array containing the list item instances without the groups in a flat structure.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "list-item",
      "description": "A class to serve as a base\nfor the `ListItemStandard` and `ListItemCustom` classes.\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.",
      "attributes": [
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "list-item-base",
      "description": "A class to serve as a foundation\nfor the `ListItem` and `ListItemGroupHeader` classes.\n\n\n---\n\n\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-li-custom",
      "description": "A component to be used as custom list item within the `ui5-list`\nthe same way as the standard `ui5-li`.\n\nThe component accepts arbitrary HTML content to allow full customization.\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the content of the component.\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.\n\n### **CSS Parts:**\n - **native-li** - Used to style the main li tag of the list item\n- **content** - Used to style the content area of the list item\n- **detail-button** - Used to style the button rendered when the list item is of type detail\n- **delete-button** - Used to style the button rendered when the list item is in delete mode\n- **radio** - Used to style the radio button rendered when the list item is in single selection mode\n- **checkbox** - Used to style the checkbox rendered when the list item is in multiple selection mode",
      "attributes": [
        {
          "name": "movable",
          "description": "Defines whether the item is movable.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the text alternative of the component.\n\n**Note**: If not provided a default text alternative will be set, if present.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-li-group",
      "description": "### Overview\nThe `ui5-li-group` is a special list item, used only to create groups of list items.\n\nThis is the item to use inside a `ui5-list`.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/ListItemGroup.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **move-over** - Fired when a movable list item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the items of the <code>ui5-li-group</code>.\n- **header** - Defines the header of the component.\n\n**Note:** Using this slot, the default header text of group and the value of `headerText` property will be overwritten.\n\n### **CSS Parts:**\n - **header** - Used to style the header item of the group",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text of the <code>ui5-li-group</code>.",
          "values": []
        },
        {
          "name": "header-accessible-name",
          "description": "Defines the accessible name of the header.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-li",
      "description": "The `ui5-li` represents the simplest type of item for a `ui5-list`.\n\nThis is a list item,\nproviding the most common use cases such as `text`,\n`image` and `icon`.\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **image** - **Note:** While the slot allows option for setting custom avatar, to match the\ndesign guidelines, please use the `ui5-avatar` with it's default size - S.\n\n**Note:** If bigger `ui5-avatar` needs to be used, then the size of the\n`ui5-li` should be customized in order to fit.\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the list item\n- **description** - Used to style the description of the list item\n- **additional-text** - Used to style the additionalText of the list item\n- **icon** - Used to style the icon of the list item\n- **native-li** - Used to style the main li tag of the list item\n- **content** - Used to style the content area of the list item\n- **detail-button** - Used to style the button rendered when the list item is of type detail\n- **delete-button** - Used to style the button rendered when the list item is in delete mode\n- **radio** - Used to style the radio button rendered when the list item is in single selection mode\n- **checkbox** - Used to style the checkbox rendered when the list item is in multiple selection mode",
      "attributes": [
        {
          "name": "description",
          "description": "Defines the description displayed right under the item text, if such is present.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "icon-end",
          "description": "Defines whether the `icon` should be displayed in the beginning of the list item or in the end.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the `additionalText`, displayed in the end of the list item.",
          "values": []
        },
        {
          "name": "additional-text-state",
          "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "movable",
          "description": "Defines whether the item is movable.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the text alternative of the component.\nNote: If not provided a default text alternative will be set, if present.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-menu",
      "description": "### Overview\n\n`ui5-menu` component represents a hierarchical menu structure.\n\n### Structure\n\nThe `ui5-menu` can hold two types of entities:\n\n- `ui5-menu-item` components\n- `ui5-menu-separator` - used to separate menu items with a line\n\nAn arbitrary hierarchy structure can be represented by recursively nesting menu items.\n\n### Keyboard Handling\n\nThe `ui5-menu` provides advanced keyboard handling.\nThe user can use the following keyboard shortcuts in order to navigate trough the tree:\n\n- `Arrow Up` / `Arrow Down` - Navigates up and down the menu items that are currently visible.\n- `Arrow Right`, `Space` or `Enter` - Opens a sub-menu if there are menu items nested\nin the currently clicked menu item.\n- `Arrow Left` or `Escape` - Closes the currently opened sub-menu.\n\nwhen there is `endContent` :\n- `Arrow Left` or `ArrowRight` - Navigate between the menu item actions and the menu item itself\n- `Arrow Up` / `Arrow Down` - Navigates up and down the currently visible menu items\n\nNote: if the text ditrection is set to Right-to-left (RTL), `Arrow Right` and `Arrow Left` functionality is swapped.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Menu.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **item-click** - Fired when an item is being clicked.\n\n**Note:** Since 1.17.0 the event is preventable, allowing the menu to remain open after an item is pressed.\n- **before-open** - Fired before the menu is opened. This event can be cancelled, which will prevent the menu from opening.\n\n**Note:** Since 1.14.0 the event is also fired before a sub-menu opens.\n- **open** - Fired after the menu is opened.\n- **before-close** - Fired before the menu is closed. This event can be cancelled, which will prevent the menu from closing.\n- **close** - Fired after the menu is closed.\n\n### **Slots:**\n - **default** - Defines the items of this component.\n\n**Note:** Use `ui5-menu-item` and `ui5-menu-separator` for their intended design.",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text of the menu (displayed on mobile).",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates if the menu is open",
          "values": []
        },
        {
          "name": "loading",
          "description": "Defines if a loading indicator would be displayed inside the corresponding ui5-menu popover.",
          "values": []
        },
        {
          "name": "loading-delay",
          "description": "Defines the delay in milliseconds, after which the loading indicator will be displayed inside the corresponding ui5-menu popover..",
          "values": []
        },
        {
          "name": "opener",
          "description": "Defines the ID or DOM Reference of the element at which the menu is shown.\nWhen using this attribute in a declarative way, you must only use the `id` (as a string) of the element at which you want to show the popover.\nYou can only set the `opener` attribute to a DOM Reference when using JavaScript.",
          "values": [{ "name": "HTMLElement" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-menu-item",
      "description": "### Overview\n\n`ui5-menu-item` is the item to use inside a `ui5-menu`.\nAn arbitrary hierarchy structure can be represented by recursively nesting menu items.\n\n### Usage\n\n`ui5-menu-item` represents a node in a `ui5-menu`. The menu itself is rendered as a list,\nand each `ui5-menu-item` is represented by a list item in that list. Therefore, you should only use\n`ui5-menu-item` directly in your apps. The `ui5-li` list item is internal for the list, and not intended for public use.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MenuItem.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **before-open** - Fired before the menu is opened. This event can be cancelled, which will prevent the menu from opening.\n\n**Note:** Since 1.14.0 the event is also fired before a sub-menu opens.\n- **open** - Fired after the menu is opened.\n- **before-close** - Fired before the menu is closed. This event can be cancelled, which will prevent the menu from closing.\n- **close** - Fired after the menu is closed.\n- **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the items of this component.\n\n**Note:** The slot can hold `ui5-menu-item` and `ui5-menu-separator` items.\n\nIf there are items added to this slot, an arrow will be displayed at the end\nof the item in order to indicate that there are items added. In that case components added\nto `endContent` slot or `additionalText` content will not be displayed.\n\nThe priority of what will be displayed at the end of the menu item is as follows:\nsub-menu arrow (if there are items added in `items` slot) -> components added in `endContent` -> text set to `additionalText`.\n- **endContent** - Defines the components that should be displayed at the end of the menu item.\n\n**Note:** It is highly recommended to slot only components of type `ui5-button`,`ui5-link`\nor `ui5-icon` in order to preserve the intended design. If there are components added to this slot,\nand there is text set in `additionalText`, it will not be displayed. If there are items added to `items` slot,\nnether `additionalText` nor components added to this slot would be displayed.\n\nThe priority of what will be displayed at the end of the menu item is as follows:\nsub-menu arrow (if there are items added in `items` slot) -> components added in `endContent` -> text set to `additionalText`.\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the tree item.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the `additionalText`, displayed in the end of the menu item.\n\n**Note:** The additional text will not be displayed if there are items added in `items` slot or there are\ncomponents added to `endContent` slot.\n\nThe priority of what will be displayed at the end of the menu item is as follows:\nsub-menu arrow (if there are items added in `items` slot) -> components added in `endContent` -> text set to `additionalText`.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\n**Example:**\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether `ui5-menu-item` is in disabled state.\n\n**Note:** A disabled `ui5-menu-item` is noninteractive.",
          "values": []
        },
        {
          "name": "loading",
          "description": "Defines the delay in milliseconds, after which the loading indicator will be displayed inside the corresponding ui5-menu popover.\n\n**Note:** If set to `true` a `ui5-busy-indicator` component will be displayed into the related one to the current `ui5-menu-item` sub-menu popover.",
          "values": []
        },
        {
          "name": "loading-delay",
          "description": "Defines the delay in milliseconds, after which the loading indicator will be displayed inside the corresponding ui5-menu popover.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip for the menu item.",
          "values": []
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaKeyShortcuts**: Indicated the availability of a keyboard shortcuts defined for the menu item.\n\n- **role**: Defines the role of the menu item. If not set, menu item will have default role=\"menuitem\".",
          "values": [{ "name": "MenuItemAccessibilityAttributes" }]
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-menu-separator",
      "description": "The `ui5-menu-separator` represents a horizontal line to separate menu items inside a `ui5-menu`.\n\n\n---\n\n\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-message-strip",
      "description": "### Overview\n\nThe ui5-message-strip component allows for the embedding of application-related messages.\nIt supports four semantic designs, each with its own color and icon: \"Information\", \"Positive\", \"Critical\", and \"Negative\".\nAdditionally, users can choose from two color sets (\"ColorSet1\" and \"ColorSet2\"), each containing 10 predefined color schemes.\nEach message shows a \"Close\" button, so that it can be removed from the UI, if needed.\n\n### Usage\n\nFor the `ui5-message-strip` component, you can define whether it displays\nan icon in the beginning and a close button. Moreover, its size and background\ncan be controlled with CSS.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MessageStrip.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **close** - Fired when the close button is pressed either with a\nclick/tap or by using the Enter or Space key.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **icon** - Defines the content to be displayed as graphical element within the component.\n\n**Note:** If no icon is given, the default icon for the component type will be used.\nThe SAP-icons font provides numerous options.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the component type.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Critical" },
            { "name": "Information" },
            { "name": "ColorSet1" },
            { "name": "ColorSet2" }
          ]
        },
        {
          "name": "color-scheme",
          "description": "Defines the color scheme of the component.\nThere are 10 predefined schemes.\nTo use one you can set a number from `\"1\"` to `\"10\"`. The `colorScheme` `\"1\"` will be set by default.",
          "values": []
        },
        {
          "name": "hide-icon",
          "description": "Defines whether the MessageStrip will show an icon in the beginning.\nYou can directly provide an icon with the `icon` slot. Otherwise, the default icon for the type will be used.\n\n * **Note:** If <code>MessageStripDesign.ColorSet1</code> or <code>MessageStripDesign.ColorSet2</code> value is set to the <code>design</code> property, default icon will not be presented.",
          "values": []
        },
        {
          "name": "hide-close-button",
          "description": "Defines whether the MessageStrip renders close button.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-multi-combobox",
      "description": "### Overview\n\nThe `ui5-multi-combobox` component consists of a list box with items and a text field allowing the user to either type a value directly into the text field, or choose from the list of existing items.\n\nThe drop-down list is used for selecting and filtering values, it enables users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow to expand/collapse the list of available options.\nThe options in the list have checkboxes that permit multi-selection. Entered values are displayed as tokens.\n### Structure\nThe `ui5-multi-combobox` consists of the following elements:\n\n-  Tokenizer - a list of tokens with selected options.\n-  Input field - displays the selected option/s as token/s. Users can type to filter the list.\n-  Drop-down arrow - expands\\collapses the option list.\n-  Option list - the list of available options.\n\n### Keyboard Handling\n\nThe `ui5-multi-combobox` provides advanced keyboard handling.\n\n#### Picker\nIf the `ui5-multi-combobox` is focused,\nyou can open or close the drop-down by pressing [F4], [Alt] + [Up] or [Alt] + [Down] keys.\nOnce the drop-down is opened, you can use the `UP` and `DOWN` arrow keys\nto navigate through the available options and select one by pressing the `Space` or `Enter` keys.\n\n#### Tokens\n\n-  Left/Right arrow keys - moves the focus selection form the currently focused token to the previous/next one (if available).\n-  Delete -  deletes the token and focuses the previous token.\n-  Backspace -  deletes the token and focus the next token.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MultiComboBox.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke or clear icon is pressed.\n- **open** - Fired when the dropdown is opened.\n- **close** - Fired when the dropdown is closed.\n- **selection-change** - Fired when selection is changed by user interaction.\n\n### **Slots:**\n - **default** - Defines the component items.\n- **icon** - Defines the icon to be displayed in the component.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.\n\n### **CSS Parts:**\n - **token-\\{index\\}** - Used to style each token(where `token-0` corresponds to the first item)",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.\n**Note:** When the component is used inside a form element,\nthe value is sent as the first element in the form data, even if it's empty.",
          "values": []
        },
        {
          "name": "no-typeahead",
          "description": "Defines whether the value will be autcompleted to match an item",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
          "values": []
        },
        {
          "name": "no-validation",
          "description": "Defines if the user input will be prevented, if no matching item has been found",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "filter",
          "description": "Defines the filter type of the component.",
          "values": [
            { "name": "None" },
            { "name": "StartsWithPerTerm" },
            { "name": "StartsWith" },
            { "name": "Contains" }
          ]
        },
        {
          "name": "show-clear-icon",
          "description": "Defines whether the clear icon of the multi-combobox will be shown.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "show-select-all",
          "description": "Determines if the select all checkbox is visible on top of suggestions.",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates whether the items picker is open.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-mcb-item",
      "description": "The `ui5-mcb-item` represents the item for a `ui5-multi-combobox`.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        },
        {
          "name": "text",
          "description": "Defines the text of the component.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the additional text of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-mcb-item-group",
      "description": "The `ui5-mcb-item-group` is type of suggestion item,\nthat can be used to split the `ui5-multi-combobox` suggestions into groups.\n\n\n---\n\n\n\n\n### **Events:**\n - **move-over** - Fired when a movable list item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the items of the <code>ui5-mcb-item-group</code>.\n- **header** - Defines the header of the component.\n\n**Note:** Using this slot, the default header text of group and the value of `headerText` property will be overwritten.\n\n### **CSS Parts:**\n - **header** - Used to style the header item of the group",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text of the <code>ui5-li-group</code>.",
          "values": []
        },
        {
          "name": "header-accessible-name",
          "description": "Defines the accessible name of the header.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-multi-input",
      "description": "### Overview\nA `ui5-multi-input` field allows the user to enter multiple values, which are displayed as `ui5-token`.\n\nUser can choose interaction for creating tokens.\nFiori Guidelines say that user should create tokens when:\n\n- Type a value in the input and press enter or focus out the input field (`change` event is fired)\n- Move between suggestion items (`selection-change` event is fired)\n- Clicking on a suggestion item (`selection-change` event is fired if the clicked item is different than the current value. Also `change` event is fired )\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MultiInput.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **value-help-trigger** - Fired when the value help icon is pressed\nand F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are used.\n- **token-delete** - Fired when tokens are being deleted.\n- **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected.\n- **select** - Fired when some text has been selected.\n- **selection-change** - Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection.\n- **open** - Fired when the suggestions picker is open.\n- **close** - Fired when the suggestions picker is closed.\n\n### **Slots:**\n - **tokens** - Defines the component tokens.\n- **default** - Defines the suggestion items.\n\n**Note:** The suggestions would be displayed only if the `showSuggestions`\nproperty is set to `true`.\n\n**Note:** The `<ui5-suggestion-item>`, `<ui5-suggestion-item-group>` and `ui5-suggestion-item-custom` are recommended to be used as suggestion items.\n- **icon** - Defines the icon to be displayed in the component.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the Input component\n- **input** - Used to style the native input element\n- **clear-icon** - Used to style the clear icon, which can be pressed to clear user input text",
      "attributes": [
        {
          "name": "show-value-help-icon",
          "description": "Determines whether a value help icon will be visualized in the end of the input.\nPressing the icon will fire `value-help-trigger` event.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.\n**Note:** When the component is used inside a form element,\nthe value is sent as the first element in the form data, even if it's empty.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "no-typeahead",
          "description": "Defines whether the value will be autcompleted to match an item",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
          "values": [
            { "name": "Text" },
            { "name": "Email" },
            { "name": "Number" },
            { "name": "Password" },
            { "name": "Tel" },
            { "name": "URL" },
            { "name": "Search" }
          ]
        },
        {
          "name": "value",
          "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "show-suggestions",
          "description": "Defines whether the component should show suggestions, if such are present.",
          "values": []
        },
        {
          "name": "maxlength",
          "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the input.",
          "values": []
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "accessible-description-ref",
          "description": "Receives id(or many ids) of the elements that describe the input.",
          "values": []
        },
        {
          "name": "show-clear-icon",
          "description": "Defines whether the clear icon of the input will be shown.",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines whether the suggestions picker is open.\nThe picker will not open if the `showSuggestions` property is set to `false`, the input is disabled or the input is readonly.\nThe picker will close automatically and `close` event will be fired if the input is not in the viewport.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-option",
      "description": "### Overview\n\nThe `ui5-option` component defines the content of an option in the `ui5-select`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Option.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the `additionalText`, displayed in the end of the option.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the option.",
          "values": []
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-option-custom",
      "description": "### Overview\n\nThe `ui5-option-custom` component defines a custom content of an option in the `ui5-select`.\nA component to be the same way as the standard `ui5-option`.\nThe component accepts arbitrary HTML content to allow full customization.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/OptionCustom.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "display-text",
          "description": "Defines the text, displayed inside the `ui5-select` input filed\nwhen the option gets selected.",
          "values": []
        },
        {
          "name": "value",
          "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the option.",
          "values": []
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-panel",
      "description": "### Overview\n\nThe `ui5-panel` component is a container which has a header and a\ncontent area and is used\nfor grouping and displaying information. It can be collapsed to save space on the screen.\n\n### Guidelines:\n\n- Nesting two or more panels is not recommended.\n- Do not stack too many panels on one page.\n\n### Structure\nThe panel's header area consists of a title bar with a header text or custom header.\n\nThe header is clickable and can be used to toggle between the expanded and collapsed state. It includes an icon which rotates depending on the state.\n\nThe custom header can be set through the `header` slot and it may contain arbitraray content, such as: title, buttons or any other HTML elements.\n\nThe content area can contain an arbitrary set of controls.\n\n**Note:** The custom header is not clickable out of the box, but in this case the icon is interactive and allows to show/hide the content area.\n\n### Responsive Behavior\n\n- If the width of the panel is set to 100% (default), the panel and its children are\nresized responsively,\ndepending on its parent container.\n- If the panel has a fixed height, it will take up the space even if the panel is\ncollapsed.\n- When the panel is expandable (the `fixed` property is set to `false`),\nan arrow icon (pointing to the right) appears in front of the header.\n- When the animation is activated, expand/collapse uses a smooth animation to open or\nclose the content area.\n- When the panel expands/collapses, the arrow icon rotates 90 degrees\nclockwise/counter-clockwise.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Panel.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **toggle** - Fired when the component is expanded/collapsed by user interaction.\n\n### **Slots:**\n - **default** - Defines the content of the component. The content is visible only when the component is expanded.\n- **header** - Defines the component header area.\n\n**Note:** When a header is provided, the `headerText` property is ignored.\n\n### **CSS Parts:**\n - **header** - Used to style the wrapper of the header.\n- **content** - Used to style the wrapper of the content.",
      "attributes": [
        {
          "name": "header-text",
          "description": "This property is used to set the header text of the component.\nThe text is visible in both expanded and collapsed states.\n\n**Note:** This property is overridden by the `header` slot.",
          "values": []
        },
        {
          "name": "fixed",
          "description": "Determines whether the component is in a fixed state that is not\nexpandable/collapsible by user interaction.",
          "values": []
        },
        {
          "name": "collapsed",
          "description": "Indicates whether the component is collapsed and only the header is displayed.",
          "values": []
        },
        {
          "name": "no-animation",
          "description": "Indicates whether the transition between the expanded and the collapsed state of the component is animated. By default the animation is enabled.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Sets the accessible ARIA role of the component.\nDepending on the usage, you can change the role from the default `Form`\nto `Region` or `Complementary`.",
          "values": [
            { "name": "Complementary" },
            { "name": "Form" },
            { "name": "Region" }
          ]
        },
        {
          "name": "header-level",
          "description": "Defines the \"aria-level\" of component heading,\nset by the `headerText`.",
          "values": [
            { "name": "H1" },
            { "name": "H2" },
            { "name": "H3" },
            { "name": "H4" },
            { "name": "H5" },
            { "name": "H6" }
          ]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "sticky-header",
          "description": "Indicates whether the Panel header is sticky or not.\nIf stickyHeader is set to true, then whenever you scroll the content or\nthe application, the header of the panel will be always visible and\na solid color will be used for its design.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-popover",
      "description": "### Overview\n\nThe `ui5-popover` component displays additional information for an object\nin a compact way and without leaving the page.\nThe Popover can contain various UI elements, such as fields, tables, images, and charts.\nIt can also include actions in the footer.\n\n### Structure\n\nThe popover has three main areas:\n\n- Header (optional)\n- Content\n- Footer (optional)\n\n**Note:** The `ui5-popover` is closed when the user clicks\nor taps outside the popover\nor selects an action within the popover. You can prevent this with the\n`modal` property.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Popover.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening.\n- **open** - Fired after the component is opened.\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing.\n- **close** - Fired after the component is closed.\n\n### **Methods:**\n - **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n\n### **Slots:**\n - **header** - Defines the header HTML Element.\n- **footer** - Defines the footer HTML Element.\n- **default** - Defines the content of the Popup.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
          "values": []
        },
        {
          "name": "placement",
          "description": "Determines on which side the component is placed at.",
          "values": [
            { "name": "Top" },
            { "name": "Bottom" },
            { "name": "Start" },
            { "name": "End" }
          ]
        },
        {
          "name": "horizontal-align",
          "description": "Determines the horizontal alignment of the component.",
          "values": [
            { "name": "Start" },
            { "name": "End" },
            { "name": "Center" },
            { "name": "Stretch" }
          ]
        },
        {
          "name": "vertical-align",
          "description": "Determines the vertical alignment of the component.",
          "values": [
            { "name": "Top" },
            { "name": "Bottom" },
            { "name": "Center" },
            { "name": "Stretch" }
          ]
        },
        {
          "name": "modal",
          "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
          "values": []
        },
        {
          "name": "hide-arrow",
          "description": "Determines whether the component arrow is hidden.",
          "values": []
        },
        {
          "name": "allow-target-overlap",
          "description": "Determines if there is no enough space, the component can be placed\nover the target.",
          "values": []
        },
        {
          "name": "opener",
          "description": "Defines the ID or DOM Reference of the element at which the popover is shown.\nWhen using this attribute in a declarative way, you must only use the `id` (as a string) of the element at which you want to show the popover.\nYou can only set the `opener` attribute to a DOM Reference when using JavaScript.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "initial-focus",
          "description": "Defines the ID of the HTML Element, which will get the initial focus.\n\n**Note:** If an element with `autofocus` attribute is added inside the component,\n`initialFocus` won't take effect.",
          "values": []
        },
        {
          "name": "prevent-focus-restore",
          "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Allows setting a custom role.",
          "values": [
            { "name": "None" },
            { "name": "Dialog" },
            { "name": "AlertDialog" }
          ]
        },
        {
          "name": "prevent-initial-focus",
          "description": "Indicates whether initial focus should be prevented.",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates if the element is open",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "popup",
      "description": "### Overview\nBase class for all popup Web Components.\n\nIf you need to create your own popup-like custom UI5 Web Components.\n\n1. The Popup class handles modality:\n - The \"isModal\" getter can be overridden by derivatives to provide their own conditions when they are modal or not\n - Derivatives may call the \"blockPageScrolling\" and \"unblockPageScrolling\" static methods to temporarily remove scrollbars on the html element\n - Derivatives may call the \"openPopup\" and \"closePopup\" methods which handle focus, manage the popup registry and for modal popups, manage the blocking layer\n\n 2. Provides blocking layer (relevant for modal popups only):\n  - Controlled by the \"open\" and \"close\" methods\n\n3. The Popup class \"traps\" focus:\n - Derivatives may call the \"applyInitialFocus\" method (usually when opening, to transfer focus inside the popup)\n\n4. The template of this component exposes two inline partials you can override in derivatives:\n - beforeContent (upper part of the box, useful for header/title/close button)\n - afterContent (lower part, useful for footer/action buttons)\n\n\n---\n\n\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening.\n- **open** - Fired after the component is opened.\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing.\n- **close** - Fired after the component is closed.\n\n### **Methods:**\n - **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n\n### **Slots:**\n - **default** - Defines the content of the Popup.",
      "attributes": [
        {
          "name": "initial-focus",
          "description": "Defines the ID of the HTML Element, which will get the initial focus.\n\n**Note:** If an element with `autofocus` attribute is added inside the component,\n`initialFocus` won't take effect.",
          "values": []
        },
        {
          "name": "prevent-focus-restore",
          "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Allows setting a custom role.",
          "values": [
            { "name": "None" },
            { "name": "Dialog" },
            { "name": "AlertDialog" }
          ]
        },
        {
          "name": "prevent-initial-focus",
          "description": "Indicates whether initial focus should be prevented.",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates if the element is open",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-progress-indicator",
      "description": "### Overview\nShows the progress of a process in a graphical way. To indicate the progress,\nthe inside of the component is filled with a color.\n\n### Responsive Behavior\nYou can change the size of the Progress Indicator by changing its `width` or `height` CSS properties.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ProgressIndicator.js\";`\n\n\n---\n\n\n\n\n### **CSS Parts:**\n - **bar** - Used to style the main bar of the `ui5-progress-indicator`\n- **remaining-bar** - Used to style the remaining bar of the `ui5-progress-indicator`",
      "attributes": [
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "hide-value",
          "description": "Defines whether the component value is shown.",
          "values": []
        },
        {
          "name": "value",
          "description": "Specifies the numerical value in percent for the length of the component.\n\n**Note:**\nIf a value greater than 100 is provided, the percentValue is set to 100. In other cases of invalid value, percentValue is set to its default of 0.",
          "values": []
        },
        {
          "name": "display-value",
          "description": "Specifies the text value to be displayed in the bar.\n\n**Note:**\n\n- If there is no value provided or the value is empty, the default percentage value is shown.\n- If `hideValue` property is `true` both the `displayValue` and `value` property values are not shown.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-radio-button",
      "description": "### Overview\n\nThe `ui5-radio-button` component enables users to select a single option from a set of options.\nWhen a `ui5-radio-button` is selected by the user, the\n`change` event is fired.\nWhen a `ui5-radio-button` that is within a group is selected, the one\nthat was previously selected gets automatically deselected. You can group radio buttons by using the `name` property.\n\n**Note:** If `ui5-radio-button` is not part of a group, it can be selected once, but can not be deselected back.\n\n### Keyboard Handling\n\nOnce the `ui5-radio-button` is on focus, it might be selected by pressing the Space and Enter keys.\n\nThe Arrow Down/Arrow Up and Arrow Left/Arrow Right keys can be used to change selection between next/previous radio buttons in one group,\nwhile TAB and SHIFT + TAB can be used to enter or leave the radio button group.\n\n**Note:** On entering radio button group, the focus goes to the currently selected radio button.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RadioButton\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **outer-ring** - Used to style the outer ring of the `ui5-radio-button`.\n- **inner-ring** - Used to style the inner ring of the `ui5-radio-button`.",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component isn't editable or selectable.\nHowever, because it's focusable, it still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "checked",
          "description": "Defines whether the component is checked or not.\n\n**Note:** The property value can be changed with user interaction,\neither by clicking/tapping on the component,\nor by using the Space or Enter key.\n\n**Note:** Only enabled radio buttons can be checked.\nRead-only radio buttons are not selectable, and therefore are always unchecked.",
          "values": []
        },
        {
          "name": "text",
          "description": "Defines the text of the component.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\nRadio buttons with the same `name` will form a radio button group.\n\n**Note:** By this name the component will be identified upon submission in an HTML form.\n\n**Note:** The selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio buttons in same group.\n\n**Note:** Only one radio button can be selected per group.",
          "values": []
        },
        {
          "name": "value",
          "description": "Defines the form value of the component.\nWhen a form with a radio button group is submitted, the group's value\nwill be the value of the currently selected radio button.",
          "values": []
        },
        {
          "name": "wrapping-type",
          "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-range-slider",
      "description": "### Overview\nRepresents a numerical interval and two handles (grips) to select a sub-range within it.\nThe purpose of the component to enable visual selection of sub-ranges within a given interval.\n\n### Structure\nThe most important properties of the Range Slider are:\n\n- min - The minimum value of the slider range.\n- max - The maximum value of the slider range.\n- value - The current value of the slider.\n- step - Determines the increments in which the slider will move.\n- showTooltip - Determines if a tooltip should be displayed above the handle.\n- showTickmarks - Displays a visual divider between the step values.\n- labelInterval - Labels some or all of the tickmarks with their values.\n\n#### Notes:\n\n- The right and left handle can be moved individually and their positions could therefore switch.\n- The entire range can be moved along the interval.\n\n### Usage\nThe most common use case is to select and move sub-ranges on a continuous numerical scale.\n\n### Responsive Behavior\nYou can move the currently selected range by clicking on it and dragging it along the interval.\n\n### Keyboard Handling\n\n- `Left or Down Arrow` - Moves a component's handle or the entire selection one step to the left;\n- `Right or Up Arrow` - Moves a component's handle or the entire selection one step to the right;\n- `Left or Down Arrow + Ctrl/Cmd` - Moves a component's handle to the left or the entire range with step equal to 1/10th of the entire range;\n- `Right or Up Arrow + Ctrl/Cmd` - Moves a component's handle to the right or the entire range with step equal to 1/10th of the entire range;\n- `Plus` - Same as `Right or Up Arrow`;\n- `Minus` - Same as `Left or Down Arrow`;\n- `Home` - Moves the entire selection or the selected handle to the beginning of the component's range;\n- `End` - Moves the entire selection or the selected handle to the end of the component's range;\n- `Page Up` - Same as `Right or Up Arrow + Ctrl/Cmd`;\n- `Page Down` - Same as `Left or Down Arrow + Ctrl/Cmd`;\n- `Escape` - Resets the `startValue` and `endValue` properties to the values prior the component focusing;\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RangeSlider.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the value changes and the user has finished interacting with the slider.\n- **input** - Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.\n\n### **CSS Parts:**\n - **progress-container** - Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-range-slider`.\n- **progress-bar** - Used to style the progress bar, which shows the progress of the `ui5-range-slider`.\n- **handle** - Used to style the handles of the `ui5-range-slider`.",
      "attributes": [
        {
          "name": "start-value",
          "description": "Defines start point of a selection - position of a first handle on the slider.",
          "values": []
        },
        {
          "name": "end-value",
          "description": "Defines end point of a selection - position of a second handle on the slider.",
          "values": []
        },
        {
          "name": "min",
          "description": "Defines the minimum value of the slider.",
          "values": []
        },
        {
          "name": "max",
          "description": "Defines the maximum value of the slider.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "step",
          "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
          "values": []
        },
        {
          "name": "label-interval",
          "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
          "values": []
        },
        {
          "name": "show-tickmarks",
          "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
          "values": []
        },
        {
          "name": "show-tooltip",
          "description": "Enables handle tooltip displaying the current value.",
          "values": []
        },
        {
          "name": "editable-tooltip",
          "description": "\nIndicates whether input fields should be used as tooltips for the handles.\n\n**Note:** Setting this option to true will only work if showTooltip is set to true.\n**Note:** In order for the component to comply with the accessibility standard, it is recommended to set the editableTooltip property to true.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the slider is in disabled state.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-rating-indicator",
      "description": "### Overview\nThe Rating Indicator is used to display a specific number of icons that are used to rate an item.\nAdditionally, it is also used to display the average and overall ratings.\n\n### Usage\nThe recommended number of icons is between 5 and 7.\n\n### Responsive Behavior\nYou can change the size of the Rating Indicator by changing its `font-size` CSS property.\n\nExample: `<ui5-rating-indicator style=\"font-size: 3rem;\"></ui5-rating-indicator>`\n\n### Keyboard Handling\nWhen the `ui5-rating-indicator` is focused, the user can change the rating\nwith the following keyboard shortcuts:\n\n- [RIGHT/UP] - Increases the value of the rating by one step. If the highest value is reached, does nothing\n- [LEFT/DOWN] - Decreases the value of the rating by one step. If the lowest value is reached, does nothing.\n- [Home] - Sets the lowest value.\n- [End] - Sets the highest value.\n- [SPACE/ENTER/RETURN] - Increases the value of the rating by one step. If the highest value is reached, sets the rating to the lowest value.\n- Any number - Changes value to the corresponding number. If typed number is larger than the number of values, sets the highest value.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RatingIndicator.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - The event is fired when the value changes.",
      "attributes": [
        {
          "name": "value",
          "description": "The indicated value of the rating.\n\n**Note:** If you set a number which is not round, it would be shown as follows:\n\n- 1.0 - 1.2 -> 1\n- 1.3 - 1.7 -> 1.5\n- 1.8 - 1.9 -> 2",
          "values": []
        },
        {
          "name": "max",
          "description": "The number of displayed rating symbols.",
          "values": []
        },
        {
          "name": "size",
          "description": "Defines the size of the component.",
          "values": [{ "name": "S" }, { "name": "M" }, { "name": "L" }]
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-responsive-popover",
      "description": "### Overview\nThe `ui5-responsive-popover` acts as a Popover on desktop and tablet, while on phone it acts as a Dialog.\nThe component improves tremendously the user experience on mobile.\n\n### Usage\nUse it when you want to make sure that all the content is visible on any device.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ResponsivePopover.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening.\n- **open** - Fired after the component is opened.\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing.\n- **close** - Fired after the component is closed.\n\n### **Methods:**\n - **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n\n### **Slots:**\n - **header** - Defines the header HTML Element.\n- **footer** - Defines the footer HTML Element.\n- **default** - Defines the content of the Popup.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
          "values": []
        },
        {
          "name": "placement",
          "description": "Determines on which side the component is placed at.",
          "values": [
            { "name": "Top" },
            { "name": "Bottom" },
            { "name": "Start" },
            { "name": "End" }
          ]
        },
        {
          "name": "horizontal-align",
          "description": "Determines the horizontal alignment of the component.",
          "values": [
            { "name": "Start" },
            { "name": "End" },
            { "name": "Center" },
            { "name": "Stretch" }
          ]
        },
        {
          "name": "vertical-align",
          "description": "Determines the vertical alignment of the component.",
          "values": [
            { "name": "Top" },
            { "name": "Bottom" },
            { "name": "Center" },
            { "name": "Stretch" }
          ]
        },
        {
          "name": "modal",
          "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
          "values": []
        },
        {
          "name": "hide-arrow",
          "description": "Determines whether the component arrow is hidden.",
          "values": []
        },
        {
          "name": "allow-target-overlap",
          "description": "Determines if there is no enough space, the component can be placed\nover the target.",
          "values": []
        },
        {
          "name": "opener",
          "description": "Defines the ID or DOM Reference of the element at which the popover is shown.\nWhen using this attribute in a declarative way, you must only use the `id` (as a string) of the element at which you want to show the popover.\nYou can only set the `opener` attribute to a DOM Reference when using JavaScript.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "initial-focus",
          "description": "Defines the ID of the HTML Element, which will get the initial focus.\n\n**Note:** If an element with `autofocus` attribute is added inside the component,\n`initialFocus` won't take effect.",
          "values": []
        },
        {
          "name": "prevent-focus-restore",
          "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-role",
          "description": "Allows setting a custom role.",
          "values": [
            { "name": "None" },
            { "name": "Dialog" },
            { "name": "AlertDialog" }
          ]
        },
        {
          "name": "prevent-initial-focus",
          "description": "Indicates whether initial focus should be prevented.",
          "values": []
        },
        {
          "name": "open",
          "description": "Indicates if the element is open",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-segmented-button",
      "description": "### Overview\n\nThe `ui5-segmented-button` shows a group of items. When the user clicks or taps\none of the items, it stays in a pressed state. It automatically resizes the items\nto fit proportionally within the component. When no width is set, the component uses the available width.\n\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SegmentedButton.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **selection-change** - Fired when the selected item changes.\n\n### **Slots:**\n - **default** - Defines the items of `ui5-segmented-button`.\n\n**Note:** Multiple items are allowed.\n\n**Note:** Use the `ui5-segmented-button-item` for the intended design.",
      "attributes": [
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "selection-mode",
          "description": "Defines the component selection mode.",
          "values": [{ "name": "Single" }, { "name": "Multiple" }]
        },
        {
          "name": "selected-items",
          "description": "Returns an array of the currently selected items.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-segmented-button-item",
      "description": "### Overview\n\nUsers can use the `ui5-segmented-button-item` as part of a `ui5-segmented-button`.\n\nClicking or tapping on a `ui5-segmented-button-item` changes its state to `selected`.\nThe item returns to its initial state when the user clicks or taps on it again.\nBy applying additional custom CSS-styling classes, apps can give a different style to any\n`ui5-segmented-button-item`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\nA disabled component can't be selected or\nfocused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "selected",
          "description": "Determines whether the component is displayed as selected.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-select",
      "description": "### Overview\n\nThe `ui5-select` component is used to create a drop-down list.\n\n### Usage\n\nThere are two main usages of the `ui5-select>`.\n\n- With Option (`ui5-option`) web component:\n\nThe available options of the Select are defined by using the Option component.\nThe Option comes with predefined design and layout, including `icon`, `text` and `additional-text`.\n\n- With OptionCustom (`ui5-option-custom`) web component.\n\nOptions with custom content are defined by using the OptionCustom component.\nThe OptionCustom component comes with no predefined layout and it expects consumers to define it.\n\n### Selection\n\nThe options can be selected via user interaction (click or with the use of the Space and Enter keys)\nand programmatically - the Select component supports two distinct selection APIs, though mixing them is not supported:\n- The \"value\" property of the Select component\n- The \"selected\" property on individual options\n\n**Note:** If the \"value\" property is set but does not match any option,\nno option will be selected and the Select component will be displayed as empty.\n\n**Note:** when both \"value\" and \"selected\" are both used (although discouraged),\nthe \"value\" property will take precedence.\n\n### Keyboard Handling\n\nThe `ui5-select` provides advanced keyboard handling.\n\n- [F4] / [Alt] + [Up] / [Alt] + [Down] / [Space] or [Enter] - Opens/closes the drop-down.\n- [Up] or [Down] - If the drop-down is closed - changes selection to the next or the previous option. If the drop-down is opened - moves focus to the next or the previous option.\n- [Space], [Enter] - If the drop-down is opened - selects the focused option.\n- [Escape] - Closes the drop-down without changing the selection.\n- [Home] - Navigates to first option\n- [End] - Navigates to the last option\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Select\";`\n\n`import \"@ui5/webcomponents/dist/Option\";`\n`import \"@ui5/webcomponents/dist/OptionCustom\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selected option changes.\n- **live-change** - Fired when the user navigates through the options, but the selection is not finalized,\nor when pressing the ESC key to revert the current selection.\n- **open** - Fired after the component's dropdown menu opens.\n- **close** - Fired after the component's dropdown menu closes.\n\n### **Slots:**\n - **default** - Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-option` component to define the desired options.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n- **label** - Defines the HTML element that will be displayed in the component input part,\nrepresenting the selected option.\n\n**Note:** If not specified and `ui5-option-custom` is used,\neither the option's `display-text` or its textContent will be displayed.\n\n**Note:** If not specified and `ui5-option` is used,\nthe option's textContent will be displayed.\n\n### **CSS Parts:**\n - **popover** - Used to style the popover element",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the select.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the select.",
          "values": []
        },
        {
          "name": "value",
          "description": "Defines the value of the component:\n\n- when get - returns the value of the component or the value/text content of the selected option.\n- when set - selects the option with matching `value` property or text content.\n\n**Note:** Use either the Select's value or the Options' selected property.\nMixed usage could result in unexpected behavior.\n\n**Note:** If the given value does not match any existing option,\nno option will be selected and the Select component will be displayed as empty.",
          "values": [{ "name": "any" }]
        },
        {
          "name": "selected-option",
          "description": "Currently selected `ui5-option` element.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-slider",
      "description": "### Overview\nThe Slider component represents a numerical range and a handle (grip).\nThe purpose of the component is to enable visual selection of a value in\na continuous numerical range by moving an adjustable handle.\n\n### Structure\nThe most important properties of the Slider are:\n\n- min - The minimum value of the slider range.\n- max - The maximum value of the slider range.\n- value - The current value of the slider range.\n- step - Determines the increments in which the slider will move.\n- showTooltip - Determines if a tooltip should be displayed above the handle.\n- showTickmarks - Displays a visual divider between the step values.\n- labelInterval - Labels some or all of the tickmarks with their values.\n\n### Usage\nThe most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n\n### Responsive Behavior\nThe `ui5-slider` component adjusts to the size of its parent container by recalculating and\nresizing the width of the control. You can move the slider handle in several different ways:\n\n- Drag and drop the handle to the desired value.\n- Click/tap on the range bar to move the handle to that location.\n\n### Keyboard Handling\n\n- `Left or Down Arrow` - Moves the handle one step to the left, effectively decreasing the component's value by `step` amount;\n- `Right or Up Arrow` - Moves the handle one step to the right, effectively increasing the component's value by `step` amount;\n- `Left or Down Arrow + Ctrl/Cmd` - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;\n- `Right or Up Arrow + Ctrl/Cmd` - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;\n- `Plus` - Same as `Right or Up Arrow`;\n- `Minus` - Same as `Left or Down Arrow`;\n- `Home` - Moves the handle to the beginning of the range;\n- `End` - Moves the handle to the end of the range;\n- `Page Up` - Same as `Right or Up + Ctrl/Cmd`;\n- `Page Down` - Same as `Left or Down + Ctrl/Cmd`;\n- `Escape` - Resets the value property after interaction, to the position prior the component's focusing;\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Slider.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the value changes and the user has finished interacting with the slider.\n- **input** - Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.\n\n### **CSS Parts:**\n - **progress-container** - Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-slider`.\n- **progress-bar** - Used to style the progress bar, which shows the progress of the `ui5-slider`.\n- **handle** - Used to style the handle of the `ui5-slider`.",
      "attributes": [
        {
          "name": "value",
          "description": "Current value of the slider",
          "values": []
        },
        {
          "name": "min",
          "description": "Defines the minimum value of the slider.",
          "values": []
        },
        {
          "name": "max",
          "description": "Defines the maximum value of the slider.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "step",
          "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
          "values": []
        },
        {
          "name": "label-interval",
          "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
          "values": []
        },
        {
          "name": "show-tickmarks",
          "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
          "values": []
        },
        {
          "name": "show-tooltip",
          "description": "Enables handle tooltip displaying the current value.",
          "values": []
        },
        {
          "name": "editable-tooltip",
          "description": "\nIndicates whether input fields should be used as tooltips for the handles.\n\n**Note:** Setting this option to true will only work if showTooltip is set to true.\n**Note:** In order for the component to comply with the accessibility standard, it is recommended to set the editableTooltip property to true.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the slider is in disabled state.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "slider-base",
      "description": "### Overview\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the value changes and the user has finished interacting with the slider.\n- **input** - Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.",
      "attributes": [
        {
          "name": "min",
          "description": "Defines the minimum value of the slider.",
          "values": []
        },
        {
          "name": "max",
          "description": "Defines the maximum value of the slider.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "step",
          "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
          "values": []
        },
        {
          "name": "label-interval",
          "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
          "values": []
        },
        {
          "name": "show-tickmarks",
          "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
          "values": []
        },
        {
          "name": "show-tooltip",
          "description": "Enables handle tooltip displaying the current value.",
          "values": []
        },
        {
          "name": "editable-tooltip",
          "description": "\nIndicates whether input fields should be used as tooltips for the handles.\n\n**Note:** Setting this option to true will only work if showTooltip is set to true.\n**Note:** In order for the component to comply with the accessibility standard, it is recommended to set the editableTooltip property to true.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the slider is in disabled state.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-special-date",
      "description": "### Overview\n\nThe `ui5-special-date` component defines a special calendar date to be used inside `ui5-calendar`,\nwhich is visually distinguished from the rest of the dates.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "value",
          "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the type of the special date.",
          "values": [
            { "name": "Today" },
            { "name": "Selected" },
            { "name": "None" },
            { "name": "Working" },
            { "name": "NonWorking" },
            { "name": "Type01" },
            { "name": "Type02" },
            { "name": "Type03" },
            { "name": "Type04" },
            { "name": "Type05" },
            { "name": "Type06" },
            { "name": "Type07" },
            { "name": "Type08" },
            { "name": "Type09" },
            { "name": "Type10" },
            { "name": "Type11" },
            { "name": "... 8 more ..." },
            { "name": "Type20" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-split-button",
      "description": "### Overview\n\n`ui5-split-button` enables users to trigger actions. It is constructed of two separate actions -\ndefault action and arrow action that can be activated by clicking or tapping, or by\npressing certain keyboard keys - `Space` or `Enter` for default action,\nand `Arrow Down` or `Arrow Up` for arrow action.\n\n### Usage\n\n`ui5-split-button` consists two separate buttons:\n\n- for the first one (default action) you can define some `text` or an `icon`, or both.\n- the second one (arrow action) contains only `slim-arrow-down` icon.\n\nYou can choose a `design` from a set of predefined types (the same as for ui5-button) that offer\ndifferent styling to correspond to the triggered action. Both text and arrow actions have the same design.\n\nYou can set the `ui5-split-button` as enabled or disabled. Both parts of an enabled\n`ui5-split-button` can be pressed by clicking or tapping it, or by certain keys, which changes\nthe style to provide visual feedback to the user that it is pressed or hovered over with\nthe mouse cursor. A disabled `ui5-split-button` appears inactive and any of the two buttons\ncannot be pressed.\n\n### Keyboard Handling\n\n- `Space` or `Enter` - triggers the default action\n- `Shift` or `Escape` - if `Space` is pressed, releases the default action button without triggering the click event.\n- `Arrow Down`, `Arrow Up`, `Alt`+`Arrow Down`, `Alt`+`Arrow Up`, or `F4` - triggers the arrow action\nThere are separate events that are fired on activating of `ui5-split-button` parts:\n\n- `click` for the first button (default action)\n- `arrow-click` for the second button (arrow action)\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SplitButton.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the user clicks on the default action.\n- **arrow-click** - Fired when the user clicks on the arrow action.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n\n### **CSS Parts:**\n - **button** - Used to style the native button element\n- **icon** - Used to style the icon in the native button element\n- **endIcon** - Used to style the end icon in the native button element",
      "attributes": [
        {
          "name": "icon",
          "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\n\nSee all available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "active-arrow-button",
          "description": "Defines whether the arrow button should have the active state styles or not.",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the component design.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Transparent" },
            { "name": "Emphasized" },
            { "name": "Attention" }
          ]
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-step-input",
      "description": "### Overview\n\nThe `ui5-step-input` consists of an input field and buttons with icons to increase/decrease the value\nwith the predefined step.\n\nThe user can change the value of the component by pressing the increase/decrease buttons,\nby typing a number directly, by using the keyboard up/down and page up/down,\nor by using the mouse scroll wheel. Decimal values are supported.\n\n### Usage\n\nThe default step is 1 but the app developer can set a different one.\n\nApp developers can set a maximum and minimum value for the `StepInput`.\nThe increase/decrease button and the up/down keyboard navigation become disabled when\nthe value reaches the max/min or a new value is entered from the input which is greater/less than the max/min.\n\n#### When to use:\n\n- To adjust amounts, quantities, or other values quickly.\n- To adjust values for a specific step.\n\n#### When not to use:\n\n- To enter a static number (for example, postal code, phone number, or ID). In this case,\nuse the regular `ui5-input` instead.\n- To display a value that rarely needs to be adjusted and does not pertain to a particular step.\nIn this case, use the regular `ui5-input` instead.\n- To enter dates and times. In this case, use date/time related components instead.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/StepInput.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines a value of the component.",
          "values": []
        },
        {
          "name": "min",
          "description": "Defines a minimum value of the component.",
          "values": []
        },
        {
          "name": "max",
          "description": "Defines a maximum value of the component.",
          "values": []
        },
        {
          "name": "step",
          "description": "Defines a step of increasing/decreasing the value of the component.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Determines whether the component is displayed as disabled.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Determines whether the component is displayed as read-only.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "value-precision",
          "description": "Determines the number of digits after the decimal point of the component.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-suggestion-item",
      "description": "The `ui5-suggestion-item` represents the suggestion item of the `ui5-input`.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the component.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the `additionalText`, displayed in the end of the item.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-suggestion-item-custom",
      "description": "The `ui5-suggestion-item-custom` is type of suggestion item,\nthat can be used to place suggestion items with custom content in the input.\nThe text property is considered only for autocomplete.\nIn case the user needs highlighting functionality, check \"@ui5/webcomponents-base/dist/util/generateHighlightedMarkup.js\"\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the `ui5-suggestion-item-custom`.\n**Note:** The text property is considered only for autocomplete.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-suggestion-item-group",
      "description": "The `ui5-suggestion-item-group` is type of suggestion item,\nthat can be used to split the `ui5-input` suggestions into groups.\n\n\n---\n\n\n\n\n### **Events:**\n - **move-over** - Fired when a movable list item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the items of the <code>ui5-suggestion-item-group</code>.\n- **header** - Defines the header of the component.\n\n**Note:** Using this slot, the default header text of group and the value of `headerText` property will be overwritten.\n\n### **CSS Parts:**\n - **header** - Used to style the header item of the group",
      "attributes": [
        {
          "name": "header-text",
          "description": "Defines the header text of the <code>ui5-li-group</code>.",
          "values": []
        },
        {
          "name": "header-accessible-name",
          "description": "Defines the accessible name of the header.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-switch",
      "description": "### Overview\nThe `ui5-switch` component is used for changing between binary states.\n\nThe component can display texts, that will be switched, based on the component state, via the `textOn` and `textOff` properties,\nbut texts longer than 3 letters will be cutted off.\n\nHowever, users are able to customize the width of `ui5-switch` with pure CSS (`<ui5-switch style=\"width: 200px\">`), and set widths, depending on the texts they would use.\n\nNote: the component would not automatically stretch to fit the whole text width.\n\n### Keyboard Handling\nThe state can be changed by pressing the Space and Enter keys.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Switch\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **slider** - Used to style the track, where the handle is being slid\n- **text-on** - Used to style the `textOn` property text\n- **text-off** - Used to style the `textOff` property text\n- **handle** - Used to style the handle of the switch",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the component design.\n\n**Note:** If `Graphical` type is set,\npositive and negative icons will replace the `textOn` and `textOff`.",
          "values": [{ "name": "Textual" }, { "name": "Graphical" }]
        },
        {
          "name": "checked",
          "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking the component, or by pressing the `Enter` or `Space` key.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is noninteractive.",
          "values": []
        },
        {
          "name": "text-on",
          "description": "Defines the text, displayed when the component is checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
          "values": []
        },
        {
          "name": "text-off",
          "description": "Defines the text, displayed when the component is not checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Sets the accessible ARIA name of the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.\n\n**Note:** If applicable an external label reference should always be the preferred option to provide context to the `ui5-switch` component over a tooltip.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tab",
      "description": "The `ui5-tab` represents a selectable item inside a `ui5-tabcontainer`.\nIt defines both the item in the tab strip (top part of the `ui5-tabcontainer`) and the\ncontent that is presented to the user once the tab is selected.\n\n\n---\n\n\n\n\n### **Methods:**\n - **getDomRefInStrip(): _HTMLElement | undefined_** - Returns the DOM reference of the tab that is placed in the header.\n\n**Note:** Tabs, placed in the `items` slot of other tabs are not shown in the header. Calling this method on such tabs will return `undefined`.\n\n**Note:** If you need a DOM ref to the tab content please use the `getDomRef` method.\n\n### **Slots:**\n - **default** - Holds the content associated with this tab.\n- **items** - Defines hierarchies with nested sub tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design.",
      "attributes": [
        {
          "name": "text",
          "description": "The text to be displayed for the item.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Disabled tabs can't be selected.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Represents the \"additionalText\" text, which is displayed in the tab. In the cases when in the same time there are tabs with icons and tabs without icons, if a tab has no icon the \"additionalText\" is displayed larger.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon source URI to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous built-in icons.\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the component's design color.\n\nThe design is applied to:\n\n- the component icon\n- the `text` when the component overflows\n- the tab selection line\n\nAvailable designs are: `\"Default\"`, `\"Neutral\"`, `\"Positive\"`, `\"Critical\"` and `\"Negative\"`.\n\n**Note:** The design depends on the current theme.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Critical" },
            { "name": "Neutral" }
          ]
        },
        {
          "name": "selected",
          "description": "Specifies if the component is selected.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tabcontainer",
      "description": "### Overview\n\nThe `ui5-tabcontainer` represents a collection of tabs with associated content.\nNavigation through the tabs changes the content display of the currently active content area.\nA tab can be labeled with text only, or icons with text.\n\n### Structure\n\nThe `ui5-tabcontainer` can hold two types of entities:\n\n- `ui5-tab` - contains all the information on an item (text and icon)\n- `ui5-tab-separator` - used to separate tabs with a line\n\n### Hierarchies\nMultiple sub tabs could be placed underneath one main tab. Nesting allows deeper hierarchies with indentations\nto indicate the level of each nested tab. When a tab has both sub tabs and own content its click area is split\nto allow the user to display the content or alternatively to expand / collapse the list of sub tabs.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TabContainer.js\";`\n\n`import \"@ui5/webcomponents/dist/Tab.js\";` (for `ui5-tab`)\n\n`import \"@ui5/webcomponents/dist/TabSeparator.js\";` (for `ui5-tab-separator`)\n\n\n---\n\n\n\n\n### **Events:**\n - **tab-select** - Fired when a tab is selected.\n- **move-over** - Fired when element is being moved over the tab container.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n- **move** - Fired when element is moved to the tab container.\n\n**Note:** `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\n### **Slots:**\n - **default** - Defines the tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design.\n- **overflowButton** - Defines the button which will open the overflow menu. If nothing is provided to this slot,\nthe default button will be used.\n- **startOverflowButton** - Defines the button which will open the start overflow menu if available. If nothing is provided to this slot,\nthe default button will be used.\n\n### **CSS Parts:**\n - **content** - Used to style the content of the component\n- **tabstrip** - Used to style the tabstrip of the component",
      "attributes": [
        {
          "name": "collapsed",
          "description": "Defines whether the tab content is collapsed.",
          "values": []
        },
        {
          "name": "tab-layout",
          "description": "Defines the alignment of the content and the `additionalText` of a tab.\n\n**Note:**\nThe content and the `additionalText` would be displayed vertically by default,\nbut when set to `Inline`, they would be displayed horizontally.",
          "values": [{ "name": "Standard" }, { "name": "Inline" }]
        },
        {
          "name": "overflow-mode",
          "description": "Defines the overflow mode of the header (the tab strip). If you have a large number of tabs, only the tabs that can fit on screen will be visible.\nAll other tabs that can 't fit on the screen are available in an overflow tab \"More\".\n\n**Note:**\nOnly one overflow at the end would be displayed by default,\nbut when set to `StartAndEnd`, there will be two overflows on both ends, and tab order will not change on tab selection.",
          "values": [{ "name": "End" }, { "name": "StartAndEnd" }]
        },
        {
          "name": "header-background-design",
          "description": "Sets the background color of the Tab Container's header as `Solid`, `Transparent`, or `Translucent`.",
          "values": [
            { "name": "Transparent" },
            { "name": "Solid" },
            { "name": "Translucent" }
          ]
        },
        {
          "name": "content-background-design",
          "description": "Sets the background color of the Tab Container's content as `Solid`, `Transparent`, or `Translucent`.",
          "values": [
            { "name": "Transparent" },
            { "name": "Solid" },
            { "name": "Translucent" }
          ]
        },
        {
          "name": "no-auto-selection",
          "description": "Defines if automatic tab selection is deactivated.\n\n**Note:** By default, if none of the child tabs have the `selected` property set, the first tab will be automatically selected.\nSetting this property to `true` allows preventing this behavior.",
          "values": []
        },
        {
          "name": "all-items",
          "description": "Returns all slotted tabs and their subTabs in a flattened array.\nThe order of tabs is depth-first.",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tab-separator",
      "description": "The `ui5-tab-separator` represents a vertical line to separate tabs inside a `ui5-tabcontainer`.\n\n\n---\n\n\n\n\n### **Methods:**\n - **getDomRefInStrip(): _HTMLElement | undefined_** - Returns the DOM reference of the separator that is placed in the header.\n\n**Note:** Separators, placed in the `items` slot of other tabs are not shown in the header. Calling this method on such separators will return `undefined`.",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-table",
      "description": "### Overview\n\nThe `ui5-table` component provides a set of sophisticated features for displaying and dealing with vast amounts of data in a responsive manner.\nTo render the `ui5-table`, you need to define the columns and rows. You can use the provided `ui5-table-header-row` and `ui5-table-row` components for this purpose.\n\n### Features\n\nThe `ui5-table` can be enhanced in its functionalities by applying different features.\nFeatures can be slotted into the `features` slot, to enable them in the component.\nFeatures need to be imported separately, as they are not enabled by default.\n\nThe following features are currently available:\n\n* [TableSelection](../TableSelection) - adds selection capabilities to the table\n* [TableGrowing](../TableGrowing) - provides growing capabilities to load more data\n\n### Keyboard Handling\n\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\nFurthermore, you can interact with `ui5-table` via the following keys:\n\nIf the focus is on a row, the following keyboard shortcuts are available:\n* <kbd>Down</kbd> - Navigates down\n* <kbd>Up</kbd> - Navigates up\n* <kbd>Right</kbd> - Selects the first cell of the row\n* <kbd>Space</kbd> - Toggles the selection of the row\n* <kbd>Ctrl/Cmd + A</kbd> - In multi selection mode, toggles the selection of all rows\n* <kbd>Home</kbd> - Navigates to the first row, if the focus is on the first row, navigates to the header row\n* <kbd>End</kbd> - Navigates to the last row, if the focus is on the last row, navigates to the growing button\n* <kbd>Page Up</kbd> - Navigates one page up, if the focus is on the first row, navigates to the header row\n* <kbd>Page Down</kbd> - Navigates one page down, if the focus is on the last row, navigates to the growing button\n* <kbd>F2</kbd> - Focuses the first tabbable element in the row\n* <kbd>F7</kbd> - If focus position is remembered, moves focus to the corresponding focus position row, otherwise to the first tabbable element within the row\n* <kbd>[Shift]Tab</kbd> - Move focus to the element in the tab chain outside the table\n\n\nIf the focus is on a cell, the following keyboard shortcuts are available:\n* <kbd>Down</kbd> - Navigates down\n* <kbd>Up</kbd> - Navigates up\n* <kbd>Right</kbd> - Navigates right\n* <kbd>Left</kbd> - Navigates left, if the focus is on the first cell of the row, the focus is moved to the row.\n* <kbd>Home</kbd> - Navigates to the first cell of the current row, if the focus is on the first cell, navigates to the corresponding row\n* <kbd>End</kbd> - Navigates to the last cell of the current row, if the focus is on the last cell, navigates to the corresponding row\n* <kbd>Page Up</kbd> - Navigates one page up while keeping the focus in same column\n* <kbd>Page Down</kbd> - Navigates one page down while keeping the focus in same column\n* <kbd>F2</kbd> - Toggles the focus between the first tabbable cell content and the cell\n* <kbd>Enter</kbd> - Focuses the first tabbable cell content\n* <kbd>F7</kbd> - If the focus is on an interactive element inside a row, moves focus to the corresponding row and remembers the focus position of the element within the row\n* <kbd>[Shift]Tab</kbd> - Move focus to the element in the tab chain outside the table\n\n\nIf the focus is on an interactive cell content, the following keyboard shortcuts are available:\n* <kbd>Down</kbd> - Move the focus to the interactive element in the same column of the previous row, unless the focused element prevents the default\n* <kbd>Up</kbd> - Move the focus to the interactive element in the same column of the next row, unless the focused element prevents the default\n* <kbd>[Shift]Tab</kbd> - Move the focus to the element in the tab chain\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Table.js\";`\\\n`import \"@ui5/webcomponents/dist/TableRow.js\";` (`ui5-table-row`)\\\n`import \"@ui5/webcomponents/dist/TableCell.js\";` (`ui5-table-cell`)\\\n`import \"@ui5/webcomponents/dist/TableHeaderRow.js\";` (`ui5-table-header-row`)\\\n`import \"@ui5/webcomponents/dist/TableHeaderCell.js\";` (`ui5-table-header-cell`)\n\n\n---\n\n\n\n\n### **Events:**\n - **row-click** - Fired when an interactive row is clicked.\n- **move-over** - Fired when a movable item is moved over a potential drop target during a dragging operation.\n\nIf the new position is valid, prevent the default action of the event using `preventDefault()`.\n\n**Note:** If the dragging operation is a cross-browser operation or files are moved to a potential drop target,\nthe `source` parameter will be `null`.\n- **move** - Fired when a movable list item is dropped onto a drop target.\n\n**Notes:**\n\nThe `move` event is fired only if there was a preceding `move-over` with prevented default action.\n\nIf the dragging operation is a cross-browser operation or files are moved to a potential drop target,\nthe `source` parameter will be `null`.\n- **row-action-click** - Fired when a row action is clicked.\n\n### **Slots:**\n - **default** - Defines the rows of the component.\n\n**Note:** Use `ui5-table-row` for the intended design.\n- **headerRow** - Defines the header row of the component.\n\n**Note:** Use `ui5-table-header-row` for the intended design.\n- **noData** - Defines the custom visualization if there is no data available.\n- **features** - Defines the features of the component.",
      "attributes": [
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Identifies the element (or elements) that labels the component.",
          "values": []
        },
        {
          "name": "no-data-text",
          "description": "Defines the text to be displayed when there are no rows in the component.",
          "values": []
        },
        {
          "name": "overflow-mode",
          "description": "Defines the mode of the <code>ui5-table</code> overflow behavior.\n\nAvailable options are:\n\n<code>Scroll</code> - Columns are shown as regular columns and horizontal scrolling is enabled.\n<code>Popin</code> - Columns are shown as pop-ins instead of regular columns.",
          "values": [{ "name": "Scroll" }, { "name": "Popin" }]
        },
        {
          "name": "loading",
          "description": "Defines if the loading indicator should be shown.\n\n**Note:** When the component is loading, it is not interactive.",
          "values": []
        },
        {
          "name": "loading-delay",
          "description": "Defines the delay in milliseconds, after which the loading indicator will show up for this component.",
          "values": []
        },
        {
          "name": "row-action-count",
          "description": "Defines the maximum number of row actions that is displayed, which determines the width of the row action column.\n\n**Note:** It is recommended to use a maximum of 3 row actions, as exceeding this limit may take up too much space on smaller screens.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-cell",
      "description": "### Overview\n\nThe `ui5-table-cell` represents a cell inside of a `ui5-table`.\nIt is tightly coupled to the `ui5-table` and thus should only be used in the table component.\n\n### ES6 Module Import\n\n`import @ui5/webcomponents/dist/TableCell.js;`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "horizontal-align",
          "description": "Determines the horizontal alignment of table cells.",
          "values": [
            { "name": "Start" },
            { "name": "End" },
            { "name": "Center" },
            { "name": "Left" },
            { "name": "Right" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "table-cell-base",
      "description": "A class to serve as a foundation for the `TableCell` and `TableHeaderCell` classes.\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "horizontal-align",
          "description": "Determines the horizontal alignment of table cells.",
          "values": [
            { "name": "Start" },
            { "name": "End" },
            { "name": "Center" },
            { "name": "Left" },
            { "name": "Right" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-growing",
      "description": "### Overview\n\nThe `ui5-table-growing` component is used inside the `ui5-table` to add a growing/data loading functionalities\nto the table.\n\nThe component offers two options:\n* Button - a More button is displayed, clicking it will load more data.\n* Scroll - additional data is loaded automatically when the user scrolls to the end of the table.\n\n### Usage\n\nThe `ui5-table-growing` component is only used inside the `ui5-table` component as a feature.\nIt has to be slotted inside the `ui5-table` in the `features` slot.\nThe component is not intended to be used as a standalone component.\n\n```html\n<ui5-table>\n\t<ui5-table-growing mode=\"Button\" text=\"More\" slot=\"features\"></ui5-table-growing>\n</ui5-table>\n```\n\n**Notes**:\n* When the `ui5-table-growing` component is used with the `Scroll` mode and the table is currently not scrollable,\nthe component will render a growing button instead to ensure growing capabilities until the table becomes scrollable.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableGrowing.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **load-more** - Fired when the growing button is pressed or the user scrolls to the end of the table.",
      "attributes": [
        {
          "name": "mode",
          "description": "Defines the mode of the <code>ui5-table</code> growing.\n\nAvailable options are:\n\nButton - Shows a More button at the bottom of the table, pressing it will load more rows.\n\nScroll - The rows are loaded automatically by scrolling to the bottom of the table. If the table is not scrollable,\na growing button will be rendered instead to ensure growing functionality.",
          "values": [{ "name": "Button" }, { "name": "Scroll" }]
        },
        {
          "name": "text",
          "description": "Defines the text that will be displayed inside the growing button.\nHas no effect when mode is set to `Scroll`.\n\n**Note:** When not provided and the mode is set to Button, a default text is displayed, corresponding to the\ncurrent language.",
          "values": []
        },
        {
          "name": "subtext",
          "description": "Defines the text that will be displayed below the `text` inside the growing button.\nHas no effect when mode is set to Scroll.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-header-cell",
      "description": "### Overview\n\nThe `ui5-table-header-cell` component represents a column in the `ui5-table`.\n\nAs it is tightly coupled to the `ui5-table`, it should only be used in the `ui5-table-header-row`\nto ensure correct layout and design.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableHeaderCell.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **action** - Defines the action of the column.\n\n**Note:** While multiple actions are technically possible, this is not supported.\n- **default** - Defines the content of the component.",
      "attributes": [
        {
          "name": "width",
          "description": "Defines the width of column.",
          "values": []
        },
        {
          "name": "min-width",
          "description": "Defines the minimum width of the column.\n\nIf the table is in `Popin` mode and the minimum width does not fit anymore,\nthe column will move into the popin.\n\n**Note:** If `minWidth` has the `auto` value, the table ensures that the column is wider than at least `3rem`.",
          "values": []
        },
        {
          "name": "max-width",
          "description": "Defines the maximum width of the column.",
          "values": []
        },
        {
          "name": "importance",
          "description": "Defines the importance of the column.\n\nThis property affects the popin behaviour.\nColumns with higher importance will move into the popin area later then less important\ncolumns.",
          "values": []
        },
        {
          "name": "popin-text",
          "description": "The text for the column when it pops in.",
          "values": []
        },
        {
          "name": "sort-indicator",
          "description": "Defines the sort indicator of the column.",
          "values": [
            { "name": "None" },
            { "name": "Ascending" },
            { "name": "Descending" }
          ]
        },
        {
          "name": "popin-hidden",
          "description": "Defines if the column is hidden in the popin.\n\n**Note:** Please be aware that hiding the column in the popin might lead to accessibility issues as\nusers might not be able to access the content of the column on small screens.",
          "values": []
        },
        {
          "name": "horizontal-align",
          "description": "Determines the horizontal alignment of table cells.",
          "values": [
            { "name": "Start" },
            { "name": "End" },
            { "name": "Center" },
            { "name": "Left" },
            { "name": "Right" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-header-cell-action-ai",
      "description": "### Overview\n\nThe `ui5-table-header-cell-action-ai` component defines a dedicated AI action for the table column.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableHeaderCellActionAI.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when a header cell action is clicked.",
      "attributes": [],
      "references": []
    },
    {
      "name": "table-header-cell-action-base",
      "description": "The `TableHeaderCellActionBase` class serves as a foundation for table header cell actions.\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when a header cell action is clicked.",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-table-header-row",
      "description": "### Overview\n\nThe `ui5-table-header-row` component represents the table headers of a `ui5-table`.\n\nIt is tightly coupled to the `ui5-table` and should therefore be used in the `ui5-table` only.\nThe header row is placed in the `headerRow` slot of the table.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableHeaderRow.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the cells of the component.\n\n**Note:** Use `ui5-table-header-cell` for the intended design.",
      "attributes": [
        {
          "name": "sticky",
          "description": "Sticks the `ui5-table-header-row` to the top of a table.\n\nNote: If used in combination with overflowMode \"Scroll\", the table needs a defined height for the sticky header to work as expected.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-row",
      "description": "### Overview\n\nThe `ui5-table-row` component represents a row in the `ui5-table`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableRow.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the cells of the component.\n\n**Note:** Use `ui5-table-cell` for the intended design.\n- **actions** - Defines the actions of the component.\n\n**Note:** Use `ui5-table-row-action` or `ui5-table-row-action-navigation` for the intended design.",
      "attributes": [
        {
          "name": "row-key",
          "description": "Unique identifier of the row.\n\n**Note:** For selection features to work properly, this property is mandatory, and its value must not contain spaces.",
          "values": []
        },
        {
          "name": "position",
          "description": "Defines the position of the row related to the total number of rows within the table when the `ui5-table-virtualizer` feature is used.",
          "values": []
        },
        {
          "name": "interactive",
          "description": "Defines the interactive state of the row.",
          "values": []
        },
        {
          "name": "navigated",
          "description": "Defines the navigated state of the row.",
          "values": []
        },
        {
          "name": "movable",
          "description": "Defines whether the row is movable.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-row-action",
      "description": "### Overview\n\nThe `ui5-table-row-action` component defines an action for table rows.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableRowAction.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when a row action is clicked.",
      "attributes": [
        {
          "name": "icon",
          "description": "Defines the icon of the row action.\n\n**Note:** For row actions to work properly, this property is mandatory.\n\n**Note:** SAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "text",
          "description": "Defines the text of the row action.\n\n**Note:** For row actions to work properly, this property is mandatory.",
          "values": []
        },
        {
          "name": "invisible",
          "description": "Defines the visibility of the row action.\n\n**Note:** Invisible row actions still take up space, allowing to hide the action while maintaining its position.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "table-row-action-base",
      "description": "The `TableRowActionBase` class serves as a foundation for table row actions.\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when a row action is clicked.",
      "attributes": [
        {
          "name": "invisible",
          "description": "Defines the visibility of the row action.\n\n**Note:** Invisible row actions still take up space, allowing to hide the action while maintaining its position.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-row-action-navigation",
      "description": "### Overview\n\nThe `ui5-table-row-action-navigation` component defines a navigation action for table rows.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableRowActionNavigation.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when a row action is clicked.",
      "attributes": [
        {
          "name": "interactive",
          "description": "Defines the interactive state of the navigation action.",
          "values": []
        },
        {
          "name": "invisible",
          "description": "Defines the visibility of the row action.\n\n**Note:** Invisible row actions still take up space, allowing to hide the action while maintaining its position.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "table-row-base",
      "description": "A class to serve as a foundation for the `TableRow` and `TableHeaderRow` classes.\n\n\n---\n\n\n",
      "attributes": [],
      "references": []
    },
    {
      "name": "ui5-table-selection",
      "description": "### Overview\n\nThe `ui5-table-selection` component is used inside the `ui5-table` to add key-based selection capabilities to the `ui5-table`.\n\nThe component offers three selection modes:\n* Single - select a single row.\n* Multiple - select multiple rows.\n* None - no selection active.\n\nAs the selection is key-based, `ui5-table-row` components need to define a unique `row-key` property.\n\n### Usage\n\nThe `ui5-table-selection` component is only used inside the `ui5-table` component as a feature.\nIt has to be slotted inside the `ui5-table` in the `features` slot.\nThe component is not intended to be used as a standalone component.\n\n```html\n<ui5-table>\n\t<ui5-table-selection mode=\"Multiple\" slot=\"features\"></ui5-table-selection>\n</ui5-table>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableSelection.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selection is changed by user interaction.",
      "attributes": [
        {
          "name": "mode",
          "description": "Defines the selection mode.",
          "values": [
            { "name": "Single" },
            { "name": "Multiple" },
            { "name": "None" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected rows separated by a space.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "table-selection-base",
      "description": "The `TableSelectionBase` class serves as a foundation for table selections.\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selection is changed by user interaction.\n\n### **Methods:**\n - **getRowByKey(rowKey: _string_): _TableRow | undefined_** - Returns the table row instance for the given row key.",
      "attributes": [
        {
          "name": "selected",
          "description": "Defines the selected elements of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-selection-multi",
      "description": "### Overview\n\nThe `ui5-table-selection-multi` component is used inside the `ui5-table` to add multi-selection capabilities to the `ui5-table`.\nSince selection is key-based, each `ui5-table-row` must define a unique `row-key` property.\n\n### Usage\n\nThe `ui5-table-selection-multi` component is a feature designed exclusively for use within the `ui5-table` component.\nIt must be placed inside the `features` slot of `ui5-table`.\nThis component is not intended for standalone use.\n\n```html\n<ui5-table>\n\t<ui5-table-selection-multi slot=\"features\" selected=\"Row1 Row3\"></ui5-table-selection-multi>\n</ui5-table>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableSelectionMulti.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selection is changed by user interaction.\n\n### **Methods:**\n - **getSelectedRows(): _Array<TableRow>_** - Returns an array of the selected rows.\n- **getSelectedAsSet(): _Set<string>_** - Returns the `selected` property as a set of unique `row-key` values.\n- **setSelectedAsSet(selectedSet: _Set<string>_): _void_** - Sets the `selected` property using the provided set of unique `row-key` values.\n- **getRowByKey(rowKey: _string_): _TableRow | undefined_** - Returns the table row instance for the given row key.",
      "attributes": [
        {
          "name": "selected",
          "description": "Defines the `row-key` values of selected rows, with each value separated by a space.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-selection-single",
      "description": "### Overview\n\nThe `ui5-table-selection-single` component is used inside the `ui5-table` to add single selection capabilities to the `ui5-table`.\nSince selection is key-based, each `ui5-table-row` must define a unique `row-key` property.\n\n### Usage\n\nThe `ui5-table-selection-single` component is a feature designed exclusively for use within the `ui5-table` component.\nIt must be placed inside the `features` slot of `ui5-table`.\nThis component is not intended for standalone use.\n\n```html\n<ui5-table>\n\t<ui5-table-selection-single slot=\"features\" selected=\"Row1\"></ui5-table-selection-single>\n</ui5-table>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TableSelectionSingle.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selection is changed by user interaction.\n\n### **Methods:**\n - **getSelectedRow(): _TableRow | undefined_** - Returns the selected row.\n- **getRowByKey(rowKey: _string_): _TableRow | undefined_** - Returns the table row instance for the given row key.",
      "attributes": [
        {
          "name": "selected",
          "description": "Defines the `row-key` value of the selected row.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-table-virtualizer",
      "description": "### Overview\n\nThe `ui5-table-virtualizer` component is used inside the `ui5-table` to virtualize the table rows, if the `overflowMode` property of the table is set to 'Scroll'.\nIt is responsible for rendering only the rows that are visible in the viewport and updating them on scroll.\nThis allows large numbers of rows to exist, but maintain high performance by only paying the cost for those that are currently visible.\n\n**Note:** The maximum number of virtualized rows is limited by browser constraints, specifically the maximum supported height for a DOM element.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/TableVirtualizer.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **range-change** - Fired when the virtualizer is changed by user interaction e.g. on scrolling.\n\n### **Methods:**\n - **reset(): _void_** - Resets the virtualizer to its initial state and triggers the `range-change` event.",
      "attributes": [
        {
          "name": "row-height",
          "description": "Defines the height of the rows in the table.\n\n**Note:** For virtualization to work properly, this property is mandatory.",
          "values": []
        },
        {
          "name": "row-count",
          "description": "Defines the total count of rows in the table.\n\n**Note:** For virtualization to work properly, this property is mandatory.",
          "values": []
        },
        {
          "name": "extra-rows",
          "description": "Defines the count of extra rows to be rendered at the top and bottom of the table.\n\n**Note:** This property is experimental and may be changed or deleted in the future.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tag",
      "description": "### Overview\n\nThe `ui5-tag` is a component which serves\nthe purpose to attract the user attention to some piece\nof information (state, quantity, condition, etc.).\nIt can contain icon and text information, and its design can be chosen from specific design types.\n\n### Usage Guidelines\n\n- If the text is longer than the width of the component, it can wrap, or it can show ellipsis, depending on the `wrappingType` property.\n- Colors can be semantic or not semantic.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Tag.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the user clicks on an interactive tag.\n\n**Note:** The event will be fired if the `interactive` property is `true`\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **icon** - Defines the icon to be displayed in the component.\n\n### **CSS Parts:**\n - **root** - Used to style the root element.",
      "attributes": [
        {
          "name": "design",
          "description": "Defines the design type of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Critical" },
            { "name": "Information" },
            { "name": "Neutral" },
            { "name": "Set1" },
            { "name": "Set2" }
          ]
        },
        {
          "name": "color-scheme",
          "description": "Defines the color scheme of the component.\nThere are 10 predefined schemes.\nTo use one you can set a number from `\"1\"` to `\"10\"`. The `colorScheme` `\"1\"` will be set by default.",
          "values": []
        },
        {
          "name": "hide-state-icon",
          "description": "Defines if the default state icon is shown.",
          "values": []
        },
        {
          "name": "interactive",
          "description": "Defines if the component is interactive (focusable and pressable).",
          "values": []
        },
        {
          "name": "wrapping-type",
          "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** For option \"Normal\" the text will wrap and the\nwords will not be broken based on hyphenation.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        },
        {
          "name": "size",
          "description": "Defines predefined size of the component.",
          "values": [{ "name": "S" }, { "name": "L" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-text",
      "description": "<h3>Overview</h3>\n\nThe `ui5-text` component displays text that can be used in any content area of an application.\n\n<h3>Usage</h3>\n\n- Use the `ui5-text` if you want to display text inside a form, table, or any other content area.\n- Do not use the `ui5-text` if you need to reference input type of components (use ui5-label).\n\n<h3>Responsive behavior</h3>\n\nThe `ui5-text` component is fully adaptive to all screen sizes.\nBy default, the text will wrap when the space is not enough.\nIn addition, the component supports truncation via the <code>max-lines</code> property,\nby defining the number of lines the text should wrap before start truncating.\n\n<h3>ES6 Module Import</h3>\n\n<code>import \"@ui5/webcomponents/dist/Text\";</code>\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.",
      "attributes": [
        {
          "name": "max-lines",
          "description": "Defines the number of lines the text should wrap before it truncates.",
          "values": []
        },
        {
          "name": "empty-indicator-mode",
          "description": "Specifies if an empty indicator should be displayed when there is no text.",
          "values": [{ "name": "On" }, { "name": "Off" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-textarea",
      "description": "### Overview\n\nThe `ui5-textarea` component is used to enter multiple rows of text.\n\nWhen empty, it can hold a placeholder similar to a `ui5-input`.\nYou can define the rows of the `ui5-textarea` and also determine specific behavior when handling long texts.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TextArea.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the text has changed and the focus leaves the component.\n- **input** - Fired when the value of the component changes at each keystroke or when\nsomething is pasted.\n- **select** - Fired when some text has been selected.\n- **scroll** - Fired when textarea is scrolled.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n \n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed if the component has\n`valueState` of type `Information`, `Critical` or `Negative`.\n\n### **CSS Parts:**\n - **textarea** - Used to style the native textarea",
      "attributes": [
        {
          "name": "value",
          "description": "Defines the value of the component.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Indicates whether the user can interact with the component or not.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.\n\n**Note:** If `maxlength` property is set,\nthe component turns into \"Critical\" state once the characters exceeds the limit.\nIn this case, only the \"Negative\" state is considered and can be applied.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "rows",
          "description": "Defines the number of visible text rows for the component.\n\n**Notes:**\n\n- If the `growing` property is enabled, this property defines the minimum rows to be displayed\nin the textarea.\n- The CSS `height` property wins over the `rows` property, if both are set.",
          "values": []
        },
        {
          "name": "maxlength",
          "description": "Defines the maximum number of characters that the `value` can have.",
          "values": []
        },
        {
          "name": "show-exceeded-text",
          "description": "Determines whether the characters exceeding the maximum allowed character count are visible\nin the component.\n\nIf set to `false`, the user is not allowed to enter more characters than what is set in the\n`maxlength` property.\nIf set to `true` the characters exceeding the `maxlength` value are selected on\npaste and the counter below the component displays their number.",
          "values": []
        },
        {
          "name": "growing",
          "description": "Enables the component to automatically grow and shrink dynamically with its content.",
          "values": []
        },
        {
          "name": "growing-max-rows",
          "description": "Defines the maximum number of rows that the component can grow.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the textarea.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-time-picker",
      "description": "### Overview\nThe `ui5-time-picker` component provides an input field with assigned clocks which are opened on user action.\nThe `ui5-time-picker` allows users to select a localized time using touch, mouse, or keyboard input.\nIt consists of two parts: the time input field and the clocks.\n\n### Usage\nThe user can enter a time by:\n\n- Using the clocks that are displayed in a popup\n- Typing it in directly in the input field\n\nWhen the user makes an entry and chooses the enter key, the clocks show the corresponding time (hours, minutes and seconds separately).\nWhen the user directly triggers the clocks display, the actual time is displayed.\nFor the `ui5-time-picker`\n\n### Formatting\n\nIf a time is entered by typing it into\nthe input field, it must fit to the used time format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](http://unicode.org/reports/tr35/#Date_Field_Symbol_Table).\n\nFor example, if the `format-pattern` is \"HH:mm:ss\",\na valid value string is \"11:42:35\" and the same is displayed in the input.\n\n### Keyboard handling\n[F4], [Alt]+[Up], [Alt]+[Down] Open/Close picker dialog and move focus to it.\n\nWhen closed:\n\n- [Page Up] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.\n- [Page Down] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am and vice versa.\n- [Shift]+[Page Up] - Increments minutes by 1.\n- [Shift]+[Page Down] - Decrements minutes by 1.\n- [Shift]+[Ctrl]+[Page Up] - Increments seconds by 1.\n- [Shift]+[Ctrl]+[Page Down] - Decrements seconds by 1.\n-\n\nWhen opened:\n\n- [Page Up] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.\n- [Page Down] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am and vice versa.\n- [Shift]+[Page Up] - Increments minutes by 1.\n- [Shift]+[Page Down] - Decrements minutes by 1.\n- [Shift]+[Ctrl]+[Page Up] - Increments seconds by 1.\n- [Shift]+[Ctrl]+[Page Down] - Decrements seconds by 1.\n- [A] or [P] - Selects AM or PM respectively.\n- [0]-[9] - Allows direct time selecting (hours/minutes/seconds).\n- [:] - Allows switching between hours/minutes/seconds clocks. If the last clock is displayed and [:] is pressed, the first clock is beind displayed.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TimePicker.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by clicking the \"OK\" button or\nwhen the text in the input field has changed and the focus leaves the input field.\n- **input** - Fired when the value of the `ui5-time-picker` is changed at each key stroke.\n- **open** - Fired after the value-help dialog of the component is opened.\n- **close** - Fired after the value-help dialog of the component is closed.\n\n### **Methods:**\n - **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date and time\naccording to the `formatPattern` property of the TimePicker instance\n- **isValid(value: _string | undefined_): _boolean_** - Checks if a value is valid against the current `formatPattern` value.\n\n**Note:** an empty string is considered as valid value.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the `ui5-time-picker`.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the `ui5-time-picker` is in `Information`, `Critical` or `Negative` value state.",
      "attributes": [
        {
          "name": "value",
          "description": "Defines a formatted time value.",
          "values": []
        },
        {
          "name": "name",
          "description": "Determines the name by which the component will be identified upon submission in an HTML form.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "disabled",
          "description": "Defines the disabled state of the comonent.",
          "values": []
        },
        {
          "name": "readonly",
          "description": "Defines the readonly state of the comonent.",
          "values": []
        },
        {
          "name": "placeholder",
          "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
          "values": []
        },
        {
          "name": "format-pattern",
          "description": "Determines the format, displayed in the input field.\n\nExample:\nHH:mm:ss -> 11:42:35\nhh:mm:ss a -> 2:23:15 PM\nmm:ss -> 12:04 (only minutes and seconds)",
          "values": []
        },
        {
          "name": "open",
          "description": "Defines the open or closed state of the popover.",
          "values": []
        },
        {
          "name": "required",
          "description": "Defines whether the component is required.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the aria-label attribute for the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id (or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "date-value",
          "description": "Currently selected time represented as JavaScript Date instance",
          "values": [{ "name": "any" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-title",
      "description": "### Overview\n\nThe `ui5-title` component is used to display titles inside a page.\nIt is a simple, large-sized text with explicit header/title semantics.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Title.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\nThis component supports nesting a `Link` component inside.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "wrapping-type",
          "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
          "values": [{ "name": "None" }, { "name": "Normal" }]
        },
        {
          "name": "level",
          "description": "Defines the component level.\nAvailable options are: `\"H6\"` to `\"H1\"`.\nThis property does not influence the style of the component.\nUse the property `size` for this purpose instead.",
          "values": [
            { "name": "H1" },
            { "name": "H2" },
            { "name": "H3" },
            { "name": "H4" },
            { "name": "H5" },
            { "name": "H6" }
          ]
        },
        {
          "name": "size",
          "description": "Defines the visual appearance of the title.\nAvailable options are: `\"H6\"` to `\"H1\"`.",
          "values": [
            { "name": "H1" },
            { "name": "H2" },
            { "name": "H3" },
            { "name": "H4" },
            { "name": "H5" },
            { "name": "H6" }
          ]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toast",
      "description": "### Overview\n\nThe `ui5-toast` is a small, non-disruptive popup for success or information messages that\ndisappears automatically after a few seconds.\n\n### Usage\n\n#### When to use:\n\n- You want to display a short success or information message.\n- You do not want to interrupt users while they are performing an action.\n- You want to confirm a successful action.\n\n#### When not to use:\n\n- You want to display error or warning message.\n- You want to interrupt users while they are performing an action.\n- You want to make sure that users read the message before they leave the page.\n- You want users to be able to copy some part of the message text.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Toast.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **close** - Fired after the component is auto closed.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "duration",
          "description": "Defines the duration in milliseconds for which component\nremains on the screen before it's automatically closed.\n\n**Note:** The minimum supported value is `500` ms\nand even if a lower value is set, the duration would remain `500` ms.",
          "values": []
        },
        {
          "name": "placement",
          "description": "Defines the placement of the component.",
          "values": [
            { "name": "TopStart" },
            { "name": "TopCenter" },
            { "name": "TopEnd" },
            { "name": "MiddleStart" },
            { "name": "MiddleCenter" },
            { "name": "MiddleEnd" },
            { "name": "BottomStart" },
            { "name": "BottomCenter" },
            { "name": "BottomEnd" }
          ]
        },
        {
          "name": "open",
          "description": "Indicates whether the component is open (visible).",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toggle-button",
      "description": "### Overview\n\nThe `ui5-toggle-button` component is an enhanced `ui5-button`\nthat can be toggled between pressed and normal states.\nUsers can use the `ui5-toggle-button` as a switch to turn a setting on or off.\nIt can also be used to represent an independent choice similar to a check box.\n\nClicking or tapping on a `ui5-toggle-button` changes its state to `pressed`. The button returns to\nits initial state when the user clicks or taps on it again.\nBy applying additional custom CSS-styling classes, apps can give a different style to any `ui5-toggle-button`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ToggleButton.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **badge** - Adds a badge to the button.\n\n### **CSS Parts:**\n - **button** - Used to style the native button element\n- **icon** - Used to style the icon in the native button element\n- **endIcon** - Used to style the end icon in the native button element",
      "attributes": [
        {
          "name": "pressed",
          "description": "Determines whether the component is displayed as pressed.",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the component design.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Transparent" },
            { "name": "Emphasized" },
            { "name": "Attention" }
          ]
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "icon",
          "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "end-icon",
          "description": "Defines the icon, displayed as graphical element within the component after the button text.\n\n**Note:** It is highly recommended to use `endIcon` property only together with `icon` and/or `text` properties.\nUsage of `endIcon` only should be avoided.\n\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "submits",
          "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** This property is only applicable within the context of an HTML Form element.`",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\nAccepts the following string values: `true` or `false`\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.\n\n- **controls**: Identifies the element (or elements) whose contents or presence are controlled by the button element.\nAccepts a lowercase string value.",
          "values": [{ "name": "ButtonAccessibilityAttributes" }]
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines whether the button has special form-related functionality.\n\n**Note:** This property is only applicable within the context of an HTML Form element.",
          "values": [
            { "name": "Button" },
            { "name": "Submit" },
            { "name": "Reset" }
          ]
        },
        {
          "name": "accessible-role",
          "description": "Describes the accessibility role of the button.\n\n**Note:** Use <code>ButtonAccessibleRole.Link</code> role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
          "values": [{ "name": "Button" }, { "name": "Link" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-token",
      "description": "### Overview\n\nTokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Token.js\";`\n\n\n---\n\n\n\n\n### **Slots:**\n - **closeIcon** - Defines the close icon for the token. If nothing is provided to this slot, the default close icon will be used.\nAccepts `ui5-icon`.",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the token.",
          "values": []
        },
        {
          "name": "selected",
          "description": "Defines whether the component is selected or not.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tokenizer",
      "description": "### Overview\n\nA `ui5-tokenizer` is an invisible container for `ui5-token`s that supports keyboard navigation and token selection.\n\nThe `ui5-tokenizer` consists of two parts:\n- Tokens - displays the available tokens.\n- N-more indicator - contains the number of the remaining tokens that cannot be displayed due to the limited space.\n\n### Keyboard Handling\n\n#### Basic Navigation\nThe `ui5-tokenizer` provides advanced keyboard handling.\nWhen a token is focused the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n- [Left] or [Right] / [Up] or [Down] - Navigates left and right through the tokens.\n- [Home] - Navigates to the first token.\n- [End] - Navigates to the last token.\n\nThe user can use the following keyboard shortcuts to perform actions (such as select, delete):\n\n- [Space] - Selects a token.\n- [Backspace] / [Delete] - Deletes a token.\n**Note:** The deletion of a token is handled by the application with the use of the `token-delete` event.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Tokenizer.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **token-delete** - Fired when tokens are being deleted (delete icon, delete or backspace is pressed)\n- **selection-change** - Fired when token selection is changed by user interaction",
      "attributes": [
        {
          "name": "readonly",
          "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
          "values": []
        },
        {
          "name": "multi-line",
          "description": "Defines whether tokens are displayed on multiple lines.\n\n**Note:** The `multiLine` property is in an experimental state and is a subject to change.",
          "values": []
        },
        {
          "name": "show-clear-all",
          "description": "Defines whether \"Clear All\" button is present. Ensure `multiLine` is enabled, otherwise `showClearAll` will have no effect.\n\n**Note:** The `showClearAll` property is in an experimental state and is a subject to change.",
          "values": []
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar",
      "description": "### Overview\n\nThe `ui5-toolbar` component is used to create a horizontal layout with items.\nThe items can be overflowing in a popover, when the space is not enough to show all of them.\n\n### Keyboard Handling\nThe `ui5-toolbar` provides advanced keyboard handling.\n\n- The control is not interactive, but can contain of interactive elements\n- [Tab] - iterates through elements\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Toolbar.js\";`\n\n\n---\n\n\n\n\n### **Methods:**\n - **isOverflowOpen(): _boolean_** - Returns if the overflow popup is open.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n \n  **Note:** Currently only `ui5-toolbar-button`, `ui5-toolbar-select`, `ui5-toolbar-separator` and `ui5-toolbar-spacer` are allowed here.",
      "attributes": [
        {
          "name": "align-content",
          "description": "Indicated the direction in which the Toolbar items will be aligned.",
          "values": [{ "name": "Start" }, { "name": "End" }]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the input.",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the toolbar design.",
          "values": [{ "name": "Transparent" }, { "name": "Solid" }]
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar-button",
      "description": "### Overview\nThe `ui5-toolbar-button` represents an abstract action,\nused in the `ui5-toolbar`.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/ToolbarButton.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.",
      "attributes": [
        {
          "name": "disabled",
          "description": "Defines if the action is disabled.\n\n**Note:** a disabled action can't be pressed or focused, and it is not in the tab chain.",
          "values": []
        },
        {
          "name": "design",
          "description": "Defines the action design.",
          "values": [
            { "name": "Default" },
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "Transparent" },
            { "name": "Emphasized" },
            { "name": "Attention" }
          ]
        },
        {
          "name": "icon",
          "description": "Defines the `icon` source URI.\n\n**Note:** SAP-icons font provides numerous buil-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "end-icon",
          "description": "Defines the icon, displayed as graphical element within the component after the button text.\n\n**Note:** It is highly recommended to use `endIcon` property only together with `icon` and/or `text` properties.\nUsage of `endIcon` only should be avoided.\n\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\n\nThe following fields are supported:\n\n- **expanded**: Indicates whether the button, or another grouping element it controls, is currently expanded or collapsed.\nAccepts the following string values: `true` or `false`\n\n- **hasPopup**: Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by the button.\nAccepts the following string values: `dialog`, `grid`, `listbox`, `menu` or `tree`.\n\n- **controls**: Identifies the element (or elements) whose contents or presence are controlled by the button element.\nAccepts a lowercase string value.",
          "values": [{ "name": "ButtonAccessibilityAttributes" }]
        },
        { "name": "text", "description": "Button text", "values": [] },
        {
          "name": "width",
          "description": "Defines the width of the button.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
          "values": []
        },
        {
          "name": "overflow-priority",
          "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
          "values": [
            { "name": "Default" },
            { "name": "NeverOverflow" },
            { "name": "AlwaysOverflow" }
          ]
        },
        {
          "name": "prevent-overflow-closing",
          "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "toolbar-item",
      "description": "Represents an abstract class for items, used in the `ui5-toolbar`.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "overflow-priority",
          "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
          "values": [
            { "name": "Default" },
            { "name": "NeverOverflow" },
            { "name": "AlwaysOverflow" }
          ]
        },
        {
          "name": "prevent-overflow-closing",
          "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar-select",
      "description": "### Overview\nThe `ui5-toolbar-select` component is used to create a toolbar drop-down list.\nThe items inside the `ui5-toolbar-select` define the available options by using the `ui5-toolbar-select-option` component.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/ToolbarSelect.js\";`\n\n`import \"@ui5/webcomponents/dist/ToolbarSelectOption.js\";` (comes with `ui5-toolbar-select`)\n\n\n---\n\n\n\n\n### **Events:**\n - **change** - Fired when the selected option changes.\n- **open** - Fired after the component's dropdown menu opens.\n- **close** - Fired after the component's dropdown menu closes.\n\n### **Slots:**\n - **default** - Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-toolbar-select-option` component to define the desired options.",
      "attributes": [
        {
          "name": "width",
          "description": "Defines the width of the select.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
          "values": []
        },
        {
          "name": "value-state",
          "description": "Defines the value state of the component.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "disabled",
          "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible ARIA name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Receives id(or many ids) of the elements that label the select.",
          "values": []
        },
        {
          "name": "overflow-priority",
          "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
          "values": [
            { "name": "Default" },
            { "name": "NeverOverflow" },
            { "name": "AlwaysOverflow" }
          ]
        },
        {
          "name": "prevent-overflow-closing",
          "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar-select-option",
      "description": "### Overview\n\nThe `ui5-toolbar-select-option` component defines the content of an option in the `ui5-toolbar-select`.\n\n\n---\n\n\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
      "attributes": [
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar-separator",
      "description": "### Overview\nThe `ui5-toolbar-separator` is an element, used for visual separation between two elements.\nIt takes no space in calculating toolbar items width.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "overflow-priority",
          "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
          "values": [
            { "name": "Default" },
            { "name": "NeverOverflow" },
            { "name": "AlwaysOverflow" }
          ]
        },
        {
          "name": "prevent-overflow-closing",
          "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-toolbar-spacer",
      "description": "### Overview\nThe `ui5-toolbar-spacer` is an element, used for taking needed space for toolbar items to take 100% width.\nIt takes no space in calculating toolbar items width.\n\n\n---\n\n\n",
      "attributes": [
        {
          "name": "width",
          "description": "Defines the width of the spacer.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
          "values": []
        },
        {
          "name": "overflow-priority",
          "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
          "values": [
            { "name": "Default" },
            { "name": "NeverOverflow" },
            { "name": "AlwaysOverflow" }
          ]
        },
        {
          "name": "prevent-overflow-closing",
          "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tree",
      "description": "### Overview\nThe `ui5-tree` component provides a tree structure for displaying data in a hierarchy.\n\n### Usage\n\n#### When to use:\n\n- To display hierarchically structured items.\n- To select one or more items out of a set of hierarchically structured items.\n\n#### When not to use:\n\n- To display items not hierarchically structured. In this case, use the List component.\n- To select one item from a very small number of non-hierarchical items. Select or ComboBox might be more appropriate.\n- The hierarchy turns out to have only two levels. In this case, use List with group items.\n\n### Keyboard Handling\n\nThe `ui5-tree` provides advanced keyboard handling.\nThe user can use the following keyboard shortcuts in order to navigate trough the tree:\n\n- [Up] or [Down] - Navigates up and down the tree items that are currently visible.\n- [Right] - Drills down the tree by expanding the tree nodes.\n- [Left] - Goes up the tree and collapses the tree nodes.\n\nThe user can use the following keyboard shortcuts to perform selection,\nwhen the `selectionMode` property is in use:\n\n- [Space] - Selects the currently focused item upon keyup.\n- [Enter]  - Selects the currently focused item upon keydown.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Tree.js\";`\n\n`import \"@ui5/webcomponents/dist/TreeItem.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **item-toggle** - Fired when a tree item is expanded or collapsed.\n\n**Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\nThis may be handy for example if you want to dynamically load tree items upon the user expanding a node.\nEven if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n- **item-mouseover** - Fired when the mouse cursor enters the tree item borders.\n- **item-mouseout** - Fired when the mouse cursor leaves the tree item borders.\n- **item-click** - Fired when a tree item is activated.\n- **item-delete** - Fired when the Delete button of any tree item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `selectionMode` property is set to `Delete`.\n- **selection-change** - Fired when selection is changed by user interaction\nin `Single`, `SingleStart`, `SingleEnd` and `Multiple` modes.\n\n### **Methods:**\n - **walk(callback: _WalkCallback_): _void_** - Perform Depth-First-Search walk on the tree and run a callback on each node\n\n### **Slots:**\n - **default** - Defines the items of the component. Tree items may have other tree items as children.\n\n**Note:** Use `ui5-tree-item` for the intended design.\n- **header** - Defines the component header.\n\n**Note:** When the `header` slot is set, the\n`headerText` property is ignored.",
      "attributes": [
        {
          "name": "selection-mode",
          "description": "Defines the selection mode of the component. Since the tree uses a `ui5-list` to display its structure,\nthe tree modes are exactly the same as the list modes, and are all applicable.",
          "values": [
            { "name": "Single" },
            { "name": "Multiple" },
            { "name": "None" },
            { "name": "SingleStart" },
            { "name": "SingleEnd" },
            { "name": "SingleAuto" },
            { "name": "Delete" }
          ]
        },
        {
          "name": "no-data-text",
          "description": "Defines the text that is displayed when the component contains no items.",
          "values": []
        },
        {
          "name": "header-text",
          "description": "Defines the component header text.\n\n**Note:** If the `header` slot is set, this property is ignored.",
          "values": []
        },
        {
          "name": "footer-text",
          "description": "Defines the component footer text.",
          "values": []
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "accessible-name-ref",
          "description": "Defines the IDs of the elements that label the component.",
          "values": []
        },
        {
          "name": "accessible-description",
          "description": "Defines the accessible description of the component.",
          "values": []
        },
        {
          "name": "accessible-description-ref",
          "description": "Defines the IDs of the elements that describe the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tree-item",
      "description": "### Overview\nThe `ui5-tree-item` represents a node in a tree structure, shown as a `ui5-list`.\n\nThis is the item to use inside a `ui5-tree`.\nYou can represent an arbitrary tree structure by recursively nesting tree items.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/TreeItem.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Methods:**\n - **toggle(): _void_** - Call this method to manually switch the `expanded` state of a tree item.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n\n**Note:** Use `ui5-tree-item` or `ui5-tree-item-custom`\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the tree list item\n- **additionalText** - Used to style the additionalText of the tree list item\n- **icon** - Used to style the icon of the tree list item",
      "attributes": [
        {
          "name": "text",
          "description": "Defines the text of the tree item.",
          "values": []
        },
        {
          "name": "additional-text",
          "description": "Defines the `additionalText`, displayed in the end of the tree item.",
          "values": []
        },
        {
          "name": "icon",
          "description": "If set, an icon will be displayed before the text of the tree list item.",
          "values": []
        },
        {
          "name": "expanded",
          "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
          "values": []
        },
        {
          "name": "movable",
          "description": "Defines whether the item is movable.",
          "values": []
        },
        {
          "name": "indeterminate",
          "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `Multiple` mode.",
          "values": []
        },
        {
          "name": "has-children",
          "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
          "values": []
        },
        {
          "name": "additional-text-state",
          "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "tree-item-base",
      "description": "A class to serve as a foundation\nfor the `TreeItem` and `TreeItemCustom` classes.\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Methods:**\n - **toggle(): _void_** - Call this method to manually switch the `expanded` state of a tree item.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n\n**Note:** Use `ui5-tree-item` or `ui5-tree-item-custom`\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.",
      "attributes": [
        {
          "name": "icon",
          "description": "If set, an icon will be displayed before the text of the tree list item.",
          "values": []
        },
        {
          "name": "expanded",
          "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
          "values": []
        },
        {
          "name": "movable",
          "description": "Defines whether the item is movable.",
          "values": []
        },
        {
          "name": "indeterminate",
          "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `Multiple` mode.",
          "values": []
        },
        {
          "name": "has-children",
          "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
          "values": []
        },
        {
          "name": "additional-text-state",
          "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    },
    {
      "name": "ui5-tree-item-custom",
      "description": "The `ui5-tree-item-custom` represents a node in a tree structure, shown as a `ui5-list`.\n\nThis is the item to use inside a `ui5-tree`.\nYou can represent an arbitrary tree structure by recursively nesting tree items.\n\nYou can use this item to put any custom content inside the tree item.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/TreeItemCustom.js\";`\n\n\n---\n\n\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Methods:**\n - **toggle(): _void_** - Call this method to manually switch the `expanded` state of a tree item.\n\n### **Slots:**\n - **content** - Defines the content of the `ui5-tree-item`.\n- **default** - Defines the items of the component.\n\n**Note:** Use `ui5-tree-item` or `ui5-tree-item-custom`\n- **deleteButton** - Defines the delete button, displayed in \"Delete\" mode.\n**Note:** While the slot allows custom buttons, to match\ndesign guidelines, please use the `ui5-button` component.\n**Note:** When the slot is not present, a built-in delete button will be displayed.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the tree list item\n- **additionalText** - Used to style the additionalText of the tree list item\n- **icon** - Used to style the icon of the tree list item",
      "attributes": [
        {
          "name": "hide-selection-element",
          "description": "Defines whether the tree list item should display the selection element.",
          "values": []
        },
        {
          "name": "icon",
          "description": "If set, an icon will be displayed before the text of the tree list item.",
          "values": []
        },
        {
          "name": "expanded",
          "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
          "values": []
        },
        {
          "name": "movable",
          "description": "Defines whether the item is movable.",
          "values": []
        },
        {
          "name": "indeterminate",
          "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `Multiple` mode.",
          "values": []
        },
        {
          "name": "has-children",
          "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
          "values": []
        },
        {
          "name": "additional-text-state",
          "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "accessible-name",
          "description": "Defines the accessible name of the component.",
          "values": []
        },
        {
          "name": "type",
          "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
          "values": [
            { "name": "Navigation" },
            { "name": "Inactive" },
            { "name": "Active" },
            { "name": "Detail" }
          ]
        },
        {
          "name": "accessibility-attributes",
          "description": "Defines the additional accessibility attributes that will be applied to the component.\nThe following fields are supported:\n\n- **ariaSetsize**: Defines the number of items in the current set  when not all items in the set are present in the DOM.\n**Note:** The value is an integer reflecting the number of items in the complete set. If the size of the entire set is unknown, set `-1`.\n\n\t- **ariaPosinset**: Defines an element's number or position in the current set when not all items are present in the DOM.\n\t**Note:** The value is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known.",
          "values": [{ "name": "ListItemAccessibilityAttributes" }]
        },
        {
          "name": "navigated",
          "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
          "values": []
        },
        {
          "name": "tooltip",
          "description": "Defines the text of the tooltip that would be displayed for the list item.",
          "values": []
        },
        {
          "name": "highlight",
          "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Positive\"`, `\"Critical\"`, `\"Information\"` and `\"Negative\"`.",
          "values": [
            { "name": "Positive" },
            { "name": "Negative" },
            { "name": "None" },
            { "name": "Critical" },
            { "name": "Information" }
          ]
        },
        {
          "name": "selected",
          "description": "Defines the selected state of the component.",
          "values": []
        }
      ],
      "references": []
    }
  ]
}
