{"version":3,"file":"Filters.js","sourceRoot":"","sources":["../src/Filters.ts"],"names":[],"mappings":"AAAA,MAAM,SAAS,GAAG,qBAAqB,CAAC;AAExC,MAAM,YAAY,GAAG,CAAC,GAAW,EAAU,EAAE;IAC5C,OAAO,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;AACvC,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAI,KAAa,EAAE,KAAe,EAAE,QAAgB,EAAE,EAAE;IACjF,MAAM,GAAG,GAAG,IAAI,MAAM,CAAC,UAAU,YAAY,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAE7E,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,QAA6B,CAAW,CAAC;QAE3D,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;QAElB,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAI,KAAa,EAAE,KAAe,EAAE,QAAgB,EAAY,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,QAA6B,CAAY,CAAC,WAAW,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AAC1M,MAAM,QAAQ,GAAG,CAAI,KAAa,EAAE,KAAe,EAAE,QAAgB,EAAY,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,QAA6B,CAAY,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;AACtM,MAAM,IAAI,GAAG,CAAI,CAAS,EAAE,KAAe,EAAY,EAAE,CAAC,KAAK,CAAC;AAEhE,OAAO,EACN,iBAAiB,EACjB,UAAU,EACV,QAAQ,EACR,IAAI,GACJ,CAAC","sourcesContent":["const escapeReg = /[[\\]{}()*+?.\\\\^$|]/g;\n\nconst escapeRegExp = (str: string): string => {\n\treturn str.replace(escapeReg, \"\\\\$&\");\n};\n\nconst StartsWithPerTerm = <T>(value: string, items: Array<T>, propName: string) => {\n\tconst reg = new RegExp(`(^|\\\\s)${escapeRegExp(value.toLowerCase())}.*`, \"g\");\n\n\treturn items.filter(item => {\n\t\tconst text = item[propName as keyof typeof item] as string;\n\n\t\treg.lastIndex = 0;\n\n\t\treturn reg.test(text.toLowerCase());\n\t});\n};\n\nconst StartsWith = <T>(value: string, items: Array<T>, propName: string): Array<T> => items.filter(item => (item[propName as keyof typeof item] as string).toLowerCase().startsWith(value.toLowerCase()));\nconst Contains = <T>(value: string, items: Array<T>, propName: string): Array<T> => items.filter(item => (item[propName as keyof typeof item] as string).toLowerCase().includes(value.toLowerCase()));\nconst None = <T>(_: string, items: Array<T>): Array<T> => items;\n\nexport {\n\tStartsWithPerTerm,\n\tStartsWith,\n\tContains,\n\tNone,\n};\n"]}