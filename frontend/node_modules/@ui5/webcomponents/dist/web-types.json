{
  "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
  "name": "@ui5/webcomponents",
  "version": "1.24.20",
  "description-markup": "markdown",
  "contributions": {
    "html": {
      "elements": [
        {
          "name": "ui5-avatar",
          "description": "### Overview\n\nAn image-like component that has different display options for representing images and icons\nin different shapes and sizes, depending on the use case.\n\nThe shape can be circular or square. There are several predefined sizes, as well as an option to\nset a custom size.\n\n### Keyboard Handling\n\n- [Space] / [Enter] or [Return] - Fires the `click` event if the `interactive` property is set to true.\n- [Shift] - If [Space] is pressed, pressing [Shift] releases the component without triggering the click event.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Avatar.js\";`\n---\n\n\n### **Slots:**\n - **default** - Receives the desired `<img>` tag\n\n**Note:** If you experience flickering of the provided image, you can hide the component until it is being defined with the following CSS:\n- **badge** - Defines the optional badge that will be used for visual affordance.\n\n**Note:** While the slot allows for custom badges, to achieve\nthe Fiori design, please use `ui5-badge` with `ui5-icon`\nin the corresponding `icon` slot, without text nodes.",
          "doc-url": "",
          "attributes": [
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "interactive",
              "description": "Defines if the avatar is interactive (focusable and pressable).\n\n**Note:** This property won't have effect if the `disabled`\nproperty is set to `true`.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "Defines the name of the UI5 Icon, that will be displayed.\n\n**Note:** If `image` slot is provided, the property will be ignored.\n\n**Note:** You should import the desired icon first, then use its name as \"icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar icon=\"employee\">`\n\n**Note:** If no icon or an empty one is provided, by default the \"employee\" icon should be displayed.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "fallback-icon",
              "description": "Defines the name of the fallback icon, which should be displayed in the following cases:\n\n\t- If the initials are not valid (more than 3 letters, unsupported languages or empty initials).\n\t- If there are three initials and they do not fit in the shape (e.g. WWW for some of the sizes).\n\t- If the image src is wrong.\n\n**Note:** If not set, a default fallback icon \"employee\" is displayed.\n\n**Note:** You should import the desired icon first, then use its name as \"fallback-icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar fallback-icon=\"alert\">`\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "initials",
              "description": "Defines the displayed initials.\n\nUp to three Latin letters can be displayed as initials.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "shape",
              "description": "Defines the shape of the component.",
              "value": {
                "type": "\"Circle\" | \"Square\"",
                "default": "\"Circle\""
              }
            },
            {
              "name": "size",
              "description": "Defines predefined size of the component.",
              "value": {
                "type": "\"XS\" | \"S\" | \"M\" | \"L\" | \"XL\"",
                "default": "\"S\""
              }
            },
            {
              "name": "color-scheme",
              "description": "Defines the background color of the desired image.",
              "value": {
                "type": "\"Accent1\" | \"Accent2\" | \"Accent3\" | \"Accent4\" | \"Accent5\" | \"Accent6\" | \"Accent7\" | \"Accent8\" | \"Accent9\" | \"Accent10\" | \"Placeholder\"",
                "default": "\"Accent6\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Receives the desired `<img>` tag\n\n**Note:** If you experience flickering of the provided image, you can hide the component until it is being defined with the following CSS:"
            },
            {
              "name": "badge",
              "description": "Defines the optional badge that will be used for visual affordance.\n\n**Note:** While the slot allows for custom badges, to achieve\nthe Fiori design, please use `ui5-badge` with `ui5-icon`\nin the corresponding `icon` slot, without text nodes."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "interactive",
                "description": "Defines if the avatar is interactive (focusable and pressable).\n\n**Note:** This property won't have effect if the `disabled`\nproperty is set to `true`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "Defines the name of the UI5 Icon, that will be displayed.\n\n**Note:** If `image` slot is provided, the property will be ignored.\n\n**Note:** You should import the desired icon first, then use its name as \"icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar icon=\"employee\">`\n\n**Note:** If no icon or an empty one is provided, by default the \"employee\" icon should be displayed.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "fallback-icon",
                "description": "Defines the name of the fallback icon, which should be displayed in the following cases:\n\n\t- If the initials are not valid (more than 3 letters, unsupported languages or empty initials).\n\t- If there are three initials and they do not fit in the shape (e.g. WWW for some of the sizes).\n\t- If the image src is wrong.\n\n**Note:** If not set, a default fallback icon \"employee\" is displayed.\n\n**Note:** You should import the desired icon first, then use its name as \"fallback-icon\".\n\n`import \"@ui5/webcomponents-icons/dist/{icon_name}.js\"`\n\n`<ui5-avatar fallback-icon=\"alert\">`\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "initials",
                "description": "Defines the displayed initials.\n\nUp to three Latin letters can be displayed as initials.",
                "value": { "type": "string" }
              },
              {
                "name": "shape",
                "description": "Defines the shape of the component.",
                "value": { "type": "\"Circle\" | \"Square\"" }
              },
              {
                "name": "size",
                "description": "Defines predefined size of the component.",
                "value": { "type": "\"XS\" | \"S\" | \"M\" | \"L\" | \"XL\"" }
              },
              {
                "name": "color-scheme",
                "description": "Defines the background color of the desired image.",
                "value": {
                  "type": "\"Accent1\" | \"Accent2\" | \"Accent3\" | \"Accent4\" | \"Accent5\" | \"Accent6\" | \"Accent7\" | \"Accent8\" | \"Accent9\" | \"Accent10\" | \"Placeholder\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-avatar-group",
          "description": "### Overview\n\nDisplays a group of avatars arranged horizontally. It is useful to visually\nshowcase a group of related avatars, such as, project team members or employees.\n\nThe component allows you to display the avatars in different sizes,\ndepending on your use case.\n\nThe `AvatarGroup` component has two group types:\n\n- `Group` type: The avatars are displayed as partially overlapped on\ntop of each other and the entire group has one click/tap area.\n- `Individual` type: The avatars are displayed side-by-side and each\navatar has its own click/tap area.\n\n### Usage\n\nUse the `AvatarGroup` if:\n\n- You want to display a group of avatars.\n- You want to display several avatars which have something in common.\n\nDo not use the `AvatarGroup` if:\n\n- You want to display a single avatar.\n- You want to display a gallery for simple images.\n- You want to use it for other visual content than avatars.\n\n### Responsive Behavior\n\nWhen the available space is less than the width required to display all avatars,\nan overflow visualization appears as a button placed at the end with the same shape\nand size as the avatars. The visualization displays the number of avatars that have overflowed\nand are not currently visible.\n\n### Keyboard Handling\nThe component provides advanced keyboard handling.\nWhen focused, the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n`type` Individual:\n\n- [Tab] - Move focus to the overflow button\n- [Left] - Navigate one avatar to the left\n- [Right] - Navigate one avatar to the right\n- [Home] - Navigate to the first avatar\n- [End] - Navigate to the last avatar\n- [Space] / [Enter] or [Return] - Trigger `ui5-click` event\n\n`type` Group:\n\n- [Tab] - Move focus to the next interactive element after the component\n- [Space] / [Enter] or [Return] - Trigger `ui5-click` event\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nclick/tap or by using the Enter or Space key.\n- **overflow** - Fired when the count of visible `ui5-avatar` elements in the\ncomponent has changed\n\n### **Slots:**\n - **default** - Defines the items of the component. Use the `ui5-avatar` component as an item.\n\n**Note:** The UX guidelines recommends using avatars with \"Circle\" shape.\n\nMoreover, if you use avatars with \"Square\" shape, there will be visual inconsistency\nas the built-in overflow action has \"Circle\" shape.\n- **overflowButton** - Defines the overflow button of the component.\n\n**Note:** We recommend using the `ui5-button` component.\n\n**Note:** If this slot is not used, the component will display the built-in overflow button.",
          "doc-url": "",
          "attributes": [
            {
              "name": "type",
              "description": "Defines the mode of the `AvatarGroup`.",
              "value": {
                "type": "\"Group\" | \"Individual\"",
                "default": "\"Group\""
              }
            },
            {
              "name": "hidden-items",
              "description": "Returns an array containing the `ui5-avatar` instances that are currently not displayed due to lack of space.",
              "value": { "type": "any", "default": "[]" }
            },
            {
              "name": "color-scheme",
              "description": "Returns an array containing the `AvatarColorScheme` values that correspond to the avatars in the component.",
              "value": { "type": "any", "default": "[]" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of the component. Use the `ui5-avatar` component as an item.\n\n**Note:** The UX guidelines recommends using avatars with \"Circle\" shape.\n\nMoreover, if you use avatars with \"Square\" shape, there will be visual inconsistency\nas the built-in overflow action has \"Circle\" shape."
            },
            {
              "name": "overflowButton",
              "description": "Defines the overflow button of the component.\n\n**Note:** We recommend using the `ui5-button` component.\n\n**Note:** If this slot is not used, the component will display the built-in overflow button."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated either with a\nclick/tap or by using the Enter or Space key."
            },
            {
              "name": "overflow",
              "description": "Fired when the count of visible `ui5-avatar` elements in the\ncomponent has changed"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "type",
                "description": "Defines the mode of the `AvatarGroup`.",
                "value": { "type": "\"Group\" | \"Individual\"" }
              },
              {
                "name": "hidden-items",
                "description": "Returns an array containing the `ui5-avatar` instances that are currently not displayed due to lack of space.",
                "value": { "type": "any" }
              },
              {
                "name": "color-scheme",
                "description": "Returns an array containing the `AvatarColorScheme` values that correspond to the avatars in the component.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated either with a\nclick/tap or by using the Enter or Space key."
              },
              {
                "name": "overflow",
                "description": "Fired when the count of visible `ui5-avatar` elements in the\ncomponent has changed"
              }
            ]
          }
        },
        {
          "name": "ui5-badge",
          "description": "### Overview\n\nThe `ui5-badge` is a component which serves\nthe purpose to attract the user attention to some piece\nof information (state, quantity, condition, etc.).\nIt can contain icon and text information, and its design can be chosen from specific design types.\n\n### Usage Guidelines\n\n- If the text is longer than the width of the component, it can wrap, or it can show ellipsis, depending on the `wrappingType` property.\n- Colors can be semantic or not semantic.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Badge.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the user clicks on an interactive badge.\n\n**Note:** The event will be fired if the `interactive` property is `true`\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **icon** - Defines the icon to be displayed in the component.",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the design type of the component.",
              "value": {
                "type": "\"Set1\" | \"Set2\" | \"Set3\" | \"Neutral\" | \"Information\" | \"Positive\" | \"Negative\" | \"Critical\"",
                "default": "\"Set3\""
              }
            },
            {
              "name": "color-scheme",
              "description": "Defines the color scheme of the component.\nThere are 10 predefined schemes.\nTo use one you can set a number from `\"1\"` to `\"10\"`. The `colorScheme` `\"1\"` will be set by default.\n\n**Note:** Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.",
              "value": { "type": "string", "default": "\"1\"" }
            },
            {
              "name": "hide-state-icon",
              "description": "Defines if the default state icon is shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "interactive",
              "description": "Defines if the component is interactive (focusable and pressable).\n\n**Note:** The badge cannot be `interactive`\nwhen `design` property is `BadgeDesign.Set3`",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "wrapping-type",
              "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** For option \"Normal\" the text will wrap and the\nwords will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            },
            {
              "name": "icon",
              "description": "Defines the icon to be displayed in the component."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the user clicks on an interactive badge.\n\n**Note:** The event will be fired if the `interactive` property is `true`"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the design type of the component.",
                "value": {
                  "type": "\"Set1\" | \"Set2\" | \"Set3\" | \"Neutral\" | \"Information\" | \"Positive\" | \"Negative\" | \"Critical\""
                }
              },
              {
                "name": "color-scheme",
                "description": "Defines the color scheme of the component.\nThere are 10 predefined schemes.\nTo use one you can set a number from `\"1\"` to `\"10\"`. The `colorScheme` `\"1\"` will be set by default.\n\n**Note:** Color schemes have no visual representation in High Contrast Black (sap_belize_hcb) theme.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-state-icon",
                "description": "Defines if the default state icon is shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "interactive",
                "description": "Defines if the component is interactive (focusable and pressable).\n\n**Note:** The badge cannot be `interactive`\nwhen `design` property is `BadgeDesign.Set3`",
                "value": { "type": "boolean" }
              },
              {
                "name": "wrapping-type",
                "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** For option \"Normal\" the text will wrap and the\nwords will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the user clicks on an interactive badge.\n\n**Note:** The event will be fired if the `interactive` property is `true`"
              }
            ]
          }
        },
        {
          "name": "ui5-breadcrumbs",
          "description": "### Overview\nEnables users to navigate between items by providing a list of links to previous steps in the user's navigation path.\nIt helps the user to be aware of their location within the application and allows faster navigation.\n\nThe last three steps can be accessed as links directly, while the remaining links prior to them are available\nin a drop-down menu.\n\nYou can choose the type of separator to be used from a number of predefined options.\n\n### Keyboard Handling\nThe `ui5-breadcrumbs` provides advanced keyboard handling.\n\n- [F4], [Alt] + [Up], [Alt] + [Down], [Space], or [Enter] - If the dropdown arrow is focused - opens/closes the drop-down.\n- [Space],[Enter] - Activates the focused item and triggers the `item-click` event.\n- [Escape] - Closes the drop-down.\n- [Left] - If the drop-down is closed - navigates one item to the left.\n- [Right] - If the drop-down is closed - navigates one item to the right.\n- [Up] - If the drop-down is open - moves focus to the next item.\n- [Down] - If the drop-down is open - moves focus to the previous item.\n- [Home] - Navigates to the first item.\n- [End] - Navigates to the last item.\n---\n\n\n### **Events:**\n - **item-click** - Fires when a `BreadcrumbsItem` is clicked.\n\n**Note:** You can prevent browser location change by calling `event.preventDefault()`.\n\n### **Slots:**\n - **default** - Defines the component items.\n\n**Note:** Use the `ui5-breadcrumbs-item` component to define the desired items.",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the visual appearance of the last BreadcrumbsItem.\n\nThe Breadcrumbs supports two visual appearances for the last BreadcrumbsItem:\n- \"Standard\" - displaying the last item as \"current page\" (bold and without separator)\n- \"NoCurrentPage\" - displaying the last item as a regular BreadcrumbsItem, followed by separator",
              "value": {
                "type": "\"Standard\" | \"NoCurrentPage\"",
                "default": "\"Standard\""
              }
            },
            {
              "name": "separator-style",
              "description": "Determines the visual style of the separator between the breadcrumb items.",
              "value": {
                "type": "\"Slash\" | \"BackSlash\" | \"DoubleBackSlash\" | \"DoubleGreaterThan\" | \"DoubleSlash\" | \"GreaterThan\"",
                "default": "\"Slash\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component items.\n\n**Note:** Use the `ui5-breadcrumbs-item` component to define the desired items."
            }
          ],
          "events": [
            {
              "name": "item-click",
              "description": "Fires when a `BreadcrumbsItem` is clicked.\n\n**Note:** You can prevent browser location change by calling `event.preventDefault()`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the visual appearance of the last BreadcrumbsItem.\n\nThe Breadcrumbs supports two visual appearances for the last BreadcrumbsItem:\n- \"Standard\" - displaying the last item as \"current page\" (bold and without separator)\n- \"NoCurrentPage\" - displaying the last item as a regular BreadcrumbsItem, followed by separator",
                "value": { "type": "\"Standard\" | \"NoCurrentPage\"" }
              },
              {
                "name": "separator-style",
                "description": "Determines the visual style of the separator between the breadcrumb items.",
                "value": {
                  "type": "\"Slash\" | \"BackSlash\" | \"DoubleBackSlash\" | \"DoubleGreaterThan\" | \"DoubleSlash\" | \"GreaterThan\""
                }
              }
            ],
            "events": [
              {
                "name": "item-click",
                "description": "Fires when a `BreadcrumbsItem` is clicked.\n\n**Note:** You can prevent browser location change by calling `event.preventDefault()`."
              }
            ]
          }
        },
        {
          "name": "ui5-breadcrumbs-item",
          "description": "### Overview\n\nThe `ui5-breadcrumbs-item` component defines the content of an item in `ui5-breadcrumbs`.\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "href",
              "description": "Defines the link href.\n\n**Note:** Standard hyperlink behavior is supported.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "target",
              "description": "Defines the link target.\n\nAvailable options are:\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**Note:** This property must only be used when the `href` property is set.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the item.",
              "value": { "type": "string", "default": "undefined" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "href",
                "description": "Defines the link href.\n\n**Note:** Standard hyperlink behavior is supported.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "Defines the link target.\n\nAvailable options are:\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**Note:** This property must only be used when the `href` property is set.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the item.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-busy-indicator",
          "description": "### Overview\n\nThe `ui5-busy-indicator` signals that some operation is going on and that the\nuser must wait. It does not block the current UI screen so other operations could be triggered in parallel.\nIt displays 3 dots and each dot expands and shrinks at a different rate, resulting in a cascading flow of animation.\n\n### Usage\nFor the `ui5-busy-indicator` you can define the size, the text and whether it is shown or hidden.\nIn order to hide it, use the \"active\" property.\n\nIn order to show busy state over an HTML element, simply nest the HTML element in a `ui5-busy-indicator` instance.\n\n**Note:** Since `ui5-busy-indicator` has `display: inline-block;` by default and no width of its own,\nwhenever you need to wrap a block-level element, you should set `display: block` to the busy indicator as well.\n\n#### When to use:\n\n- The user needs to be able to cancel the operation.\n- Only part of the application or a particular component is affected.\n\n#### When not to use:\n\n- The operation takes less than one second.\n- You need to block the screen and prevent the user from starting another activity.\n- Do not show multiple busy indicators at once.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/BusyIndicator.js\";`\n---\n\n\n### **Slots:**\n - **default** - Determines the content over which the component will appear.",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines text to be displayed below the component. It can be used to inform the user of the current operation.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "size",
              "description": "Defines the size of the component.",
              "value": {
                "type": "\"Small\" | \"Medium\" | \"Large\"",
                "default": "\"Medium\""
              }
            },
            {
              "name": "active",
              "description": "Defines if the busy indicator is visible on the screen. By default it is not.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "delay",
              "description": "Defines the delay in milliseconds, after which the busy indicator will be visible on the screen.",
              "value": { "type": "number", "default": "1000" }
            },
            {
              "name": "text-placement",
              "description": "Defines the placement of the text.",
              "value": {
                "type": "\"Top\" | \"Bottom\"",
                "default": "\"Bottom\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Determines the content over which the component will appear."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines text to be displayed below the component. It can be used to inform the user of the current operation.",
                "value": { "type": "string" }
              },
              {
                "name": "size",
                "description": "Defines the size of the component.",
                "value": { "type": "\"Small\" | \"Medium\" | \"Large\"" }
              },
              {
                "name": "active",
                "description": "Defines if the busy indicator is visible on the screen. By default it is not.",
                "value": { "type": "boolean" }
              },
              {
                "name": "delay",
                "description": "Defines the delay in milliseconds, after which the busy indicator will be visible on the screen.",
                "value": { "type": "number" }
              },
              {
                "name": "text-placement",
                "description": "Defines the placement of the text.",
                "value": { "type": "\"Top\" | \"Bottom\"" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-button",
          "description": "### Overview\n\nThe `ui5-button` component represents a simple push button.\nIt enables users to trigger actions by clicking or tapping the `ui5-button`, or by pressing\ncertain keyboard keys, such as Enter.\n\n### Usage\n\nFor the `ui5-button` UI, you can define text, icon, or both. You can also specify\nwhether the text or the icon is displayed first.\n\nYou can choose from a set of predefined types that offer different\nstyling to correspond to the triggered action.\n\nYou can set the `ui5-button` as enabled or disabled. An enabled\n`ui5-button` can be pressed by clicking or tapping it. The button changes\nits style to provide visual feedback to the user that it is pressed or hovered over with\nthe mouse cursor. A disabled `ui5-button` appears inactive and cannot be pressed.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Button.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n\n### **CSS Parts:**\n - **button** - Used to style the native button element",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the component design.",
              "value": {
                "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon-end",
              "description": "Defines whether the icon should be displayed after the component text.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "submits",
              "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** For the `submits` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines whether the button has special form-related functionality.\n\n**Note:** For the `type` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
              "value": {
                "type": "\"Button\" | \"Submit\" | \"Reset\"",
                "default": "\"Button\""
              }
            },
            {
              "name": "accessible-role",
              "description": "Describes the accessibility role of the button.\n\n**Note:** Use link role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
              "value": {
                "type": "\"Button\" | \"Link\"",
                "default": "\"Button\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the component design.",
                "value": {
                  "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\""
                }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "icon-end",
                "description": "Defines whether the icon should be displayed after the component text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "submits",
                "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** For the `submits` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines whether the button has special form-related functionality.\n\n**Note:** For the `type` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
                "value": { "type": "\"Button\" | \"Submit\" | \"Reset\"" }
              },
              {
                "name": "accessible-role",
                "description": "Describes the accessibility role of the button.\n\n**Note:** Use link role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
                "value": { "type": "\"Button\" | \"Link\"" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
              }
            ]
          }
        },
        {
          "name": "ui5-calendar",
          "description": "### Overview\n\nThe `ui5-calendar` component allows users to select one or more dates.\n\nCurrently selected dates are represented with instances of `ui5-date` as\nchildren of the `ui5-calendar`. The value property of each `ui5-date` must be a\ndate string, correctly formatted according to the `ui5-calendar`'s `formatPattern` property.\nWhenever the user changes the date selection, `ui5-calendar` will automatically create/remove instances\nof `ui5-date` in itself, unless you prevent this behavior by calling `preventDefault()` for the\n`selected-dates-change` event. This is useful if you want to control the selected dates externally.\n\n### Usage\n\nThe user can navigate to a particular date by:\n\n- Pressing over a month inside the months view\n- Pressing over an year inside the years view\n\nThe user can confirm a date selection by pressing over a date inside the days view.\n\n### Keyboard Handling\nThe `ui5-calendar` provides advanced keyboard handling.\nWhen a picker is showed and focused the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n- Day picker:\n\n- [F4] - Shows month picker\n- [Shift] + [F4] - Shows year picker\n- [Page Up] - Navigate to the previous month\n- [Page Down] - Navigate to the next month\n- [Shift] + [Page Up] - Navigate to the previous year\n- [Shift] + [Page Down] - Navigate to the next year\n- [Ctrl] + [Shift] + [Page Up] - Navigate ten years backwards\n- [Ctrl] + [Shift] + [Page Down] - Navigate ten years forwards\n- [Home] - Navigate to the first day of the week\n- [End] - Navigate to the last day of the week\n- [Ctrl] + [Home] - Navigate to the first day of the month\n- [Ctrl] + [End] - Navigate to the last day of the month\n\n- Month picker:\n\n- [Page Up] - Navigate to the previous year\n- [Page Down] - Navigate to the next year\n- [Home] - Navigate to the first month of the current row\n- [End] - Navigate to the last month of the current row\n- [Ctrl] + [Home] - Navigate to the first month of the current year\n- [Ctrl] + [End] - Navigate to the last month of the year\n\n- Year picker:\n\n- [Page Up] - Navigate to the previous year range\n- [Page Down] - Navigate the next year range\n- [Home] - Navigate to the first year of the current row\n- [End] - Navigate to the last year of the current row\n- [Ctrl] + [Home] - Navigate to the first year of the current year range\n- [Ctrl] + [End] - Navigate to the last year of the current year range\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### Calendar types\nThe component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese and Persian.\nBy default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese or Persian calendar,\nyou need to set the `primaryCalendarType` property and import one or more of the following modules:\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\";`\n\nOr, you can use the global configuration and set the `calendarType` key:\n\n```html\n<script data-id=\"sap-ui-config\" type=\"application/json\">\n\t{\n\t\t\"calendarType\": \"Japanese\"\n\t}\n</script>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Calendar.js\";`\n---\n\n\n### **Events:**\n - **selected-dates-change** - Fired when the selected dates change.\n\n**Note:** If you call `preventDefault()` for this event, the component will not\ncreate instances of `ui5-date` for the newly selected dates. In that case you should do this manually.\n\n### **Slots:**\n - **calendarLegend** - Defines the calendar legend of the component.\n- **default** - Defines the selected date or dates (depending on the `selectionMode` property)\nfor this calendar as instances of `ui5-date`.\n- **specialDates** - Defines the special dates, visually emphasized in the calendar.",
          "doc-url": "",
          "attributes": [
            {
              "name": "selection-mode",
              "description": "Defines the type of selection used in the calendar component.\nAccepted property values are:\n\n- `CalendarSelectionMode.Single` - enables a single date selection.(default value)\n- `CalendarSelectionMode.Range` - enables selection of a date range.\n- `CalendarSelectionMode.Multiple` - enables selection of multiple dates.",
              "value": {
                "type": "\"Single\" | \"Multiple\" | \"Range\"",
                "default": "\"Single\""
              }
            },
            {
              "name": "hide-week-numbers",
              "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "primary-calendar-type",
              "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "secondary-calendar-type",
              "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "format-pattern",
              "description": "Determines the format, displayed in the input field.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "min-date",
              "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "max-date",
              "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "calendarLegend",
              "description": "Defines the calendar legend of the component."
            },
            {
              "name": "default",
              "description": "Defines the selected date or dates (depending on the `selectionMode` property)\nfor this calendar as instances of `ui5-date`."
            },
            {
              "name": "specialDates",
              "description": "Defines the special dates, visually emphasized in the calendar."
            }
          ],
          "events": [
            {
              "name": "selected-dates-change",
              "description": "Fired when the selected dates change.\n\n**Note:** If you call `preventDefault()` for this event, the component will not\ncreate instances of `ui5-date` for the newly selected dates. In that case you should do this manually."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "selection-mode",
                "description": "Defines the type of selection used in the calendar component.\nAccepted property values are:\n\n- `CalendarSelectionMode.Single` - enables a single date selection.(default value)\n- `CalendarSelectionMode.Range` - enables selection of a date range.\n- `CalendarSelectionMode.Multiple` - enables selection of multiple dates.",
                "value": { "type": "\"Single\" | \"Multiple\" | \"Range\"" }
              },
              {
                "name": "hide-week-numbers",
                "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
                "value": { "type": "boolean" }
              },
              {
                "name": "primary-calendar-type",
                "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "secondary-calendar-type",
                "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "format-pattern",
                "description": "Determines the format, displayed in the input field.",
                "value": { "type": "string" }
              },
              {
                "name": "min-date",
                "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              },
              {
                "name": "max-date",
                "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "selected-dates-change",
                "description": "Fired when the selected dates change.\n\n**Note:** If you call `preventDefault()` for this event, the component will not\ncreate instances of `ui5-date` for the newly selected dates. In that case you should do this manually."
              }
            ]
          }
        },
        {
          "name": "ui5-date",
          "description": "### Overview\n\nThe `ui5-date` component defines a calendar date to be used inside `ui5-calendar`\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-calendar-legend",
          "description": "### Overview\n\nThe `ui5-calendar-legend` component is designed for use within the `ui5-calendar` to display a legend.\nEach `ui5-calendar-legend-item` represents a unique date type, specifying its visual style\nand a corresponding textual label.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CalendarLegend.js\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the items of the component.",
          "doc-url": "",
          "attributes": [
            {
              "name": "hide-today",
              "description": "Hides the Today item in the legend.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-selected-day",
              "description": "Hides the Selected day item in the legend.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-non-working-day",
              "description": "Hides the Non-Working day item in the legend.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-working-day",
              "description": "Hides the Working day item in the legend.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of the component."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "hide-today",
                "description": "Hides the Today item in the legend.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-selected-day",
                "description": "Hides the Selected day item in the legend.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-non-working-day",
                "description": "Hides the Non-Working day item in the legend.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-working-day",
                "description": "Hides the Working day item in the legend.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-calendar-legend-item",
          "description": "### Overview\n\nEach `ui5-calendar-legend-item` represents a legend item, displaying a color with a label.\nThe color is determined by the `type` property and the label by the `text` property.\nIf a `ui5-special-date` is used within the `ui5-calendar` and a type is set, clicking on a `ui5-calendar-legend-item`\nwith the same type will emphasize the respective date(s) in the calendar.\n\n### Usage\nThe `ui5-calendar-legend-item` is intended to be used within the `ui5-calendar-legend` component.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CalendarLegendItem.js\";`\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text content of the Calendar Legend Item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the type of the Calendar Legend Item.",
              "value": {
                "type": "\"None\" | \"Today\" | \"Selected\" | \"Working\" | \"NonWorking\" | \"Type01\" | \"Type02\" | \"Type03\" | \"Type04\" | \"Type05\" | \"Type06\" | \"Type07\" | \"Type08\" | \"Type09\" | \"Type10\" | \"Type11\" | ... 8 more ... | \"Type20\"",
                "default": "\"None\""
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text content of the Calendar Legend Item.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the type of the Calendar Legend Item.",
                "value": {
                  "type": "\"None\" | \"Today\" | \"Selected\" | \"Working\" | \"NonWorking\" | \"Type01\" | \"Type02\" | \"Type03\" | \"Type04\" | \"Type05\" | \"Type06\" | \"Type07\" | \"Type08\" | \"Type09\" | \"Type10\" | \"Type11\" | ... 8 more ... | \"Type20\""
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-card",
          "description": "### Overview\n\nThe `ui5-card` is a component that represents information in the form of a\ntile with separate header and content areas.\nThe content area of a `ui5-card` can be arbitrary HTML content.\nThe header can be used through slot `header`. For which there is a `ui5-card-header` component to achieve the card look and feel.\n\nNote: We recommend the usage of `ui5-card-header` for the header slot, so advantage can be taken for keyboard handling, styling and accessibility.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Card\";`\n\n`import \"@ui5/webcomponents/dist/CardHeader.js\";` (for `ui5-card-header`)\n---\n\n\n### **Slots:**\n - **default** - Defines the content of the component.\n- **header** - Defines the header of the component.\n\n**Note:** Use `ui5-card-header` for the intended design.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the card component\n- **content** - Used to style the content of the card",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component, which is used as the name of the card region and should be unique per card.\n\n**Note:** `accessibleName` should be always set, unless `accessibleNameRef` is set.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component."
            },
            {
              "name": "header",
              "description": "Defines the header of the component.\n\n**Note:** Use `ui5-card-header` for the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component, which is used as the name of the card region and should be unique per card.\n\n**Note:** `accessibleName` should be always set, unless `accessibleNameRef` is set.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-card-header",
          "description": "### Overview\n\nThe `ui5-card-header` is a component, meant to be used as a header of the `ui5-card` component.\nIt displays valuable information, that can be defined with several properties, such as: `titleText`, `subtitleText`, `status`\nand two slots: `avatar` and `action`.\n\n### Keyboard handling\nIn case you enable `interactive` property, you can press the `ui5-card-header` by Space and Enter keys.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CardHeader\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated by mouse/tap or by using the Enter or Space key.\n\n**Note:** The event would be fired only if the `interactive` property is set to true.\n\n### **Slots:**\n - **avatar** - Defines an avatar image, displayed in the left most part of the header.\n- **action** - Defines an action, displayed in the right most part of the header.\n\n### **CSS Parts:**\n - **root** - Used to style the root DOM element of the CardHeader\n- **title** - Used to style the title of the CardHeader\n- **subtitle** - Used to style the subtitle of the CardHeader\n- **status** - Used to style the status of the CardHeader",
          "doc-url": "",
          "attributes": [
            {
              "name": "title-text",
              "description": "Defines the title text.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "subtitle-text",
              "description": "Defines the subtitle text.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "status",
              "description": "Defines the status text.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "interactive",
              "description": "Defines if the component would be interactive,\ne.g gets hover effect, gets focus outline and `click` event is fired, when pressed.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "avatar",
              "description": "Defines an avatar image, displayed in the left most part of the header."
            },
            {
              "name": "action",
              "description": "Defines an action, displayed in the right most part of the header."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated by mouse/tap or by using the Enter or Space key.\n\n**Note:** The event would be fired only if the `interactive` property is set to true."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "title-text",
                "description": "Defines the title text.",
                "value": { "type": "string" }
              },
              {
                "name": "subtitle-text",
                "description": "Defines the subtitle text.",
                "value": { "type": "string" }
              },
              {
                "name": "status",
                "description": "Defines the status text.",
                "value": { "type": "string" }
              },
              {
                "name": "interactive",
                "description": "Defines if the component would be interactive,\ne.g gets hover effect, gets focus outline and `click` event is fired, when pressed.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated by mouse/tap or by using the Enter or Space key.\n\n**Note:** The event would be fired only if the `interactive` property is set to true."
              }
            ]
          }
        },
        {
          "name": "ui5-carousel",
          "description": "### Overview\nThe Carousel allows the user to browse through a set of items.\nThe component is mostly used for showing a gallery of images, but can hold any other HTML element.\n\nThere are several ways to perform navigation:\n\n- on desktop - the user can navigate using the navigation arrows or with keyboard shorcuts.\n- on mobile - the user can use swipe gestures.\n\n### Usage\n\n#### When to use:\n\n- The items you want to display are very different from each other.\n- You want to display the items one after the other.\n\n#### When not to use:\n\n- The items you want to display need to be visible at the same time.\n- The items you want to display are uniform and very similar.\n\n### Keyboard Handling\n\n#### Basic Navigation\nWhen the `ui5-carousel` is focused the user can navigate between the items\nwith the following keyboard shortcuts:\n\n- [Up] or [Down] - Navigates to previous and next item\n- [Left] or [Right] - Navigates to previous and next item\n\n### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Carousel.js\";`\n---\n\n\n### **Events:**\n - **navigate** - Fired whenever the page changes due to user interaction,\nwhen the user clicks on the navigation arrows or while resizing,\nbased on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s` properties.\n\n### **Methods:**\n - **navigateTo(itemIndex: _number_): _void_** - Changes the currently displayed page.\n\n### **Slots:**\n - **default** - Defines the content of the component.\n\n### **CSS Parts:**\n - **content** - Used to style the content of the component",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the input.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "cyclic",
              "description": "Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "items-per-page-s",
              "description": "Defines the number of items per page on small size (up to 640px). One item per page shown by default.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "items-per-page-m",
              "description": "Defines the number of items per page on medium size (from 640px to 1024px). One item per page shown by default.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "items-per-page-l",
              "description": "Defines the number of items per page on large size (more than 1024px). One item per page shown by default.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "hide-navigation-arrows",
              "description": "Defines the visibility of the navigation arrows.\nIf set to true the navigation arrows will be hidden.\n\n**Note:** The navigation arrows are never displayed on touch devices.\nIn this case, the user can swipe to navigate through the items.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-page-indicator",
              "description": "Defines the visibility of the page indicator.\nIf set to true the page indicator will be hidden.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "page-indicator-style",
              "description": "Defines the style of the page indicator.\nAvailable options are:\n\n- `Default` - The page indicator will be visualized as dots if there are fewer than 9 pages. If there are more pages, the page indicator will switch to displaying the current page and the total number of pages. (e.g. X of Y)\n- `Numeric` - The page indicator will display the current page and the total number of pages. (e.g. X of Y)",
              "value": {
                "type": "\"Default\" | \"Numeric\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "background-design",
              "description": "Defines the carousel's background design.",
              "value": {
                "type": "BackgroundDesign",
                "default": "\"Translucent\""
              }
            },
            {
              "name": "page-indicator-background-design",
              "description": "Defines the page indicator background design.",
              "value": { "type": "BackgroundDesign", "default": "\"Solid\"" }
            },
            {
              "name": "page-indicator-border-design",
              "description": "Defines the page indicator border design.",
              "value": { "type": "BorderDesign", "default": "\"Solid\"" }
            },
            {
              "name": "arrows-placement",
              "description": "Defines the position of arrows.\n\nAvailable options are:\n\n- `Content` - the arrows are placed on the sides of the current page.\n- `Navigation` - the arrows are placed on the sides of the page indicator.",
              "value": {
                "type": "\"Content\" | \"Navigation\"",
                "default": "\"Content\""
              }
            },
            {
              "name": "visible-items-indices",
              "description": "The indices of the currently visible items of the component.",
              "value": { "type": "any", "default": "[]" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component."
            }
          ],
          "events": [
            {
              "name": "navigate",
              "description": "Fired whenever the page changes due to user interaction,\nwhen the user clicks on the navigation arrows or while resizing,\nbased on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s` properties."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the input.",
                "value": { "type": "string" }
              },
              {
                "name": "cyclic",
                "description": "Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.",
                "value": { "type": "boolean" }
              },
              {
                "name": "items-per-page-s",
                "description": "Defines the number of items per page on small size (up to 640px). One item per page shown by default.",
                "value": { "type": "number" }
              },
              {
                "name": "items-per-page-m",
                "description": "Defines the number of items per page on medium size (from 640px to 1024px). One item per page shown by default.",
                "value": { "type": "number" }
              },
              {
                "name": "items-per-page-l",
                "description": "Defines the number of items per page on large size (more than 1024px). One item per page shown by default.",
                "value": { "type": "number" }
              },
              {
                "name": "hide-navigation-arrows",
                "description": "Defines the visibility of the navigation arrows.\nIf set to true the navigation arrows will be hidden.\n\n**Note:** The navigation arrows are never displayed on touch devices.\nIn this case, the user can swipe to navigate through the items.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-page-indicator",
                "description": "Defines the visibility of the page indicator.\nIf set to true the page indicator will be hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "page-indicator-style",
                "description": "Defines the style of the page indicator.\nAvailable options are:\n\n- `Default` - The page indicator will be visualized as dots if there are fewer than 9 pages. If there are more pages, the page indicator will switch to displaying the current page and the total number of pages. (e.g. X of Y)\n- `Numeric` - The page indicator will display the current page and the total number of pages. (e.g. X of Y)",
                "value": { "type": "\"Default\" | \"Numeric\"" }
              },
              {
                "name": "background-design",
                "description": "Defines the carousel's background design.",
                "value": { "type": "BackgroundDesign" }
              },
              {
                "name": "page-indicator-background-design",
                "description": "Defines the page indicator background design.",
                "value": { "type": "BackgroundDesign" }
              },
              {
                "name": "page-indicator-border-design",
                "description": "Defines the page indicator border design.",
                "value": { "type": "BorderDesign" }
              },
              {
                "name": "arrows-placement",
                "description": "Defines the position of arrows.\n\nAvailable options are:\n\n- `Content` - the arrows are placed on the sides of the current page.\n- `Navigation` - the arrows are placed on the sides of the page indicator.",
                "value": { "type": "\"Content\" | \"Navigation\"" }
              },
              {
                "name": "visible-items-indices",
                "description": "The indices of the currently visible items of the component.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "navigate",
                "description": "Fired whenever the page changes due to user interaction,\nwhen the user clicks on the navigation arrows or while resizing,\nbased on the `items-per-page-l`, `items-per-page-m` and `items-per-page-s` properties."
              }
            ]
          }
        },
        {
          "name": "ui5-checkbox",
          "description": "### Overview\n\nAllows the user to set a binary value, such as true/false or yes/no for an item.\n\nThe `ui5-checkbox` component consists of a box and a label that describes its purpose.\nIf it's checked, an indicator is displayed inside the box.\nTo check/uncheck the `ui5-checkbox`, the user has to click or tap the square\nbox or its label.\n\nThe `ui5-checkbox` component only has 2 states - checked and unchecked.\nClicking or tapping toggles the `ui5-checkbox` between checked and unchecked state.\n\n### Usage\n\nYou can define the checkbox text with via the `text` property. If the text exceeds the available width, it is truncated by default.\nIn case you prefer text to wrap, set the `wrappingType` property to \"Normal\".\nThe touchable area for toggling the `ui5-checkbox` ends where the text ends.\n\nYou can disable the `ui5-checkbox` by setting the `disabled` property to\n`true`,\nor use the `ui5-checkbox` in read-only mode by setting the `readonly`\nproperty to `true`.\n\n### Keyboard Handling\n\nThe user can use the following keyboard shortcuts to toggle the checked state of the `ui5-checkbox`.\n\n- [Space],[Enter] - Toggles between different states: checked, not checked.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/CheckBox.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **root** - Used to style the outermost wrapper of the `ui5-checkbox`\n- **label** - Used to style the label of the `ui5-checkbox`\n- **icon** - Used to style the icon of the `ui5-checkbox`",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "display-only",
              "description": "Determines whether the `ui5-checkbox` is in display only state.\n\nWhen set to `true`, the `ui5-checkbox` is not interactive, not editable, not focusable\nand not in the tab chain. This setting is used for forms in review mode.\n\n**Note:** When the property `disabled` is set to `true` this property has no effect.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "indeterminate",
              "description": "Defines whether the component is displayed as partially checked.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction and the resulting visual state depends on the values of the `indeterminate`\nand `checked` properties:\n\n-  If the component is checked and indeterminate, it will be displayed as partially checked\n-  If the component is checked and it is not indeterminate, it will be displayed as checked\n-  If the component is not checked, it will be displayed as not checked regardless value of the indeterminate attribute",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "checked",
              "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking/tapping on the component, or by\npressing the Enter or Space key.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "wrapping-type",
              "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the component checked state changes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "display-only",
                "description": "Determines whether the `ui5-checkbox` is in display only state.\n\nWhen set to `true`, the `ui5-checkbox` is not interactive, not editable, not focusable\nand not in the tab chain. This setting is used for forms in review mode.\n\n**Note:** When the property `disabled` is set to `true` this property has no effect.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "indeterminate",
                "description": "Defines whether the component is displayed as partially checked.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction and the resulting visual state depends on the values of the `indeterminate`\nand `checked` properties:\n\n-  If the component is checked and indeterminate, it will be displayed as partially checked\n-  If the component is checked and it is not indeterminate, it will be displayed as checked\n-  If the component is not checked, it will be displayed as not checked regardless value of the indeterminate attribute",
                "value": { "type": "boolean" }
              },
              {
                "name": "checked",
                "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking/tapping on the component, or by\npressing the Enter or Space key.",
                "value": { "type": "boolean" }
              },
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "wrapping-type",
                "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the component checked state changes."
              }
            ]
          }
        },
        {
          "name": "ui5-color-palette",
          "description": "### Overview\nThe `ui5-color-palette` provides the users with a range of predefined colors. The colors are fixed and do not change with the theme.\n\n### Usage\n\nThe `ui5-color-palette` is meant for users that need to select a color from a predefined set.\nTo define the colors, use the `ui5-color-palette-item` component inside the default slot of the `ui5-color-palette`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ColorPalette.js\";`\n---\n\n\n### **Events:**\n - **item-click** - Fired when the user selects a color.\n\n### **Slots:**\n - **default** - Defines the `ui5-color-palette-item` elements.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Defines the `ui5-color-palette-item` elements."
            }
          ],
          "events": [
            {
              "name": "item-click",
              "description": "Fired when the user selects a color."
            }
          ],
          "js": {
            "properties": [],
            "events": [
              {
                "name": "item-click",
                "description": "Fired when the user selects a color."
              }
            ]
          }
        },
        {
          "name": "ui5-color-palette-item",
          "description": "### Overview\n\nThe `ui5-color-palette-item` component represents a color in the the `ui5-color-palette`.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines the colour of the component.\n\n**Note:** The value should be a valid CSS color.",
              "value": { "type": "string | undefined", "default": "undefined" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines the colour of the component.\n\n**Note:** The value should be a valid CSS color.",
                "value": { "type": "string | undefined" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-color-palette-popover",
          "description": "### Overview\nRepresents a predefined range of colors for easier selection.\n\nOverview\nThe ColorPalettePopover provides the users with a slot to predefine colors.\n\nYou can customize them with the use of the colors property. You can specify a defaultColor and display a \"Default color\" button for the user to choose directly.\nYou can display a \"More colors...\" button that opens an additional color picker for the user to choose specific colors that are not present in the predefined range.\n\n### Usage\n\nThe palette is intended for users, who don't want to check and remember the different values of the colors and spend large amount of time to configure the right color through the color picker.\n\nFor the `ui5-color-palette-popover`\n### ES6 Module Import\n\n`import @ui5/webcomponents/dist/ColorPalettePopover.js\";`\n---\n\n\n### **Events:**\n - **item-click** - Fired when the user selects a color.\n- **close** - Fired when the `ui5-color-palette-popover` is closed due to user interaction.\n\n### **Methods:**\n - **showAt(opener: _HTMLElement_): _void_** - @deprecated The method is deprecated in favour of `open` and `opener` properties. - Shows the ColorPalettePopover.\n- **openPopover(opener: _HTMLElement_): _void_** - @deprecated The method is deprecated in favour of `open` and `opener` properties. - Shows the ColorPalettePopover.\n\n### **Slots:**\n - **default** - Defines the content of the component.",
          "doc-url": "",
          "attributes": [
            {
              "name": "show-recent-colors",
              "description": "Defines whether the user can see the last used colors in the bottom of the component",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "show-more-colors",
              "description": "Defines whether the user can choose a custom color from a component.\n\n**Note:** In order to use this property you need to import the following module: `\"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js\"`",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "show-default-color",
              "description": "Defines whether the user can choose the default color from a button.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "default-color",
              "description": "Defines the default color of the component.\n\n**Note:** The default color should be a part of the ColorPalette colors`",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "open",
              "description": "Defines the open | closed state of the popover.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "opener",
              "description": "Defines the ID or DOM Reference of the element that the popover is shown at.",
              "value": {
                "type": "string | HTMLElement | undefined",
                "default": "undefined"
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component."
            }
          ],
          "events": [
            {
              "name": "item-click",
              "description": "Fired when the user selects a color."
            },
            {
              "name": "close",
              "description": "Fired when the `ui5-color-palette-popover` is closed due to user interaction."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "show-recent-colors",
                "description": "Defines whether the user can see the last used colors in the bottom of the component",
                "value": { "type": "boolean" }
              },
              {
                "name": "show-more-colors",
                "description": "Defines whether the user can choose a custom color from a component.\n\n**Note:** In order to use this property you need to import the following module: `\"@ui5/webcomponents/dist/features/ColorPaletteMoreColors.js\"`",
                "value": { "type": "boolean" }
              },
              {
                "name": "show-default-color",
                "description": "Defines whether the user can choose the default color from a button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "default-color",
                "description": "Defines the default color of the component.\n\n**Note:** The default color should be a part of the ColorPalette colors`",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "open",
                "description": "Defines the open | closed state of the popover.",
                "value": { "type": "boolean" }
              },
              {
                "name": "opener",
                "description": "Defines the ID or DOM Reference of the element that the popover is shown at.",
                "value": { "type": "string | HTMLElement | undefined" }
              }
            ],
            "events": [
              {
                "name": "item-click",
                "description": "Fired when the user selects a color."
              },
              {
                "name": "close",
                "description": "Fired when the `ui5-color-palette-popover` is closed due to user interaction."
              }
            ]
          }
        },
        {
          "name": "ui5-color-picker",
          "description": "### Overview\nThe `ui5-color-picker` allows users to choose any color and provides different input options for selecting colors.\n\n### Usage\n\n#### When to use\nUse the color picker if:\n\n-  users need to select any color freely.\n\n#### When not to use\n\n-  Users need to select one color from a predefined set of colors. Use the ColorPalette component instead.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ColorPicker.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the the selected color is changed",
          "doc-url": "",
          "attributes": [
            {
              "name": "color",
              "description": "Defines the currently selected color of the component.\n\n**Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.",
              "value": {
                "type": "string",
                "default": "\"rgba(255, 255, 255, 1)\""
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the the selected color is changed"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "color",
                "description": "Defines the currently selected color of the component.\n\n**Note**: use HEX, RGB, RGBA, HSV formats or a CSS color name when modifying this property.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the the selected color is changed"
              }
            ]
          }
        },
        {
          "name": "ui5-combobox",
          "description": "### Overview\n\nThe `ui5-combobox` component represents a drop-down menu with a list of the available options and a text input field to narrow down the options.\n\nIt is commonly used to enable users to select an option from a predefined list.\n\n### Structure\nThe `ui5-combobox` consists of the following elements:\n\n-  Input field - displays the selected option or a custom user entry. Users can type to narrow down the list or enter their own value.\n-  Drop-down arrow - expands\\collapses the option list.\n-  Option list - the list of available options.\n\n### Keyboard Handling\n\nThe `ui5-combobox` provides advanced keyboard handling.\n\n- [F4], [Alt]+[Up], or [Alt]+[Down] - Toggles the picker.\n- [Escape] - Closes the picker, if open. If closed, cancels changes and reverts the typed in value.\n- [Enter] or [Return] - If picker is open, takes over the currently selected item and closes it.\n- [Down] - Selects the next matching item in the picker.\n- [Up] - Selects the previous matching item in the picker.\n- [Page Down] - Moves selection down by page size (10 items by default).\n- [Page Up] - Moves selection up by page size (10 items by default).\n- [Home] - If focus is in the ComboBox, moves cursor at the beginning of text. If focus is in the picker, selects the first item.\n- [End] - If focus is in the ComboBox, moves cursor at the end of text. If focus is in the picker, selects the last item.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ComboBox.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter, focusout or an item is selected.\n- **input** - Fired when typing in input or clear icon is pressed.\n\n**Note:** filterValue property is updated, input is changed.\n- **selection-change** - Fired when selection is changed by user interaction\n\n### **Slots:**\n - **default** - Defines the component items.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the `ui5-combobox` is in `Information`, `Warning` or `Error` value state.\n- **icon** - Defines the icon to be displayed in the input field.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines the value of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "no-typeahead",
              "description": "Defines whether the value will be autocompleted to match an item",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "loading",
              "description": "Indicates whether a loading indicator should be shown in the picker.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "filter",
              "description": "Defines the filter type of the component.",
              "value": {
                "type": "\"None\" | \"StartsWithPerTerm\" | \"StartsWith\" | \"Contains\"",
                "default": "\"StartsWithPerTerm\""
              }
            },
            {
              "name": "show-clear-icon",
              "description": "Defines whether the clear icon of the combobox will be shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component items."
            },
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the `ui5-combobox` is in `Information`, `Warning` or `Error` value state."
            },
            {
              "name": "icon",
              "description": "Defines the icon to be displayed in the input field."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter, focusout or an item is selected."
            },
            {
              "name": "input",
              "description": "Fired when typing in input or clear icon is pressed.\n\n**Note:** filterValue property is updated, input is changed."
            },
            {
              "name": "selection-change",
              "description": "Fired when selection is changed by user interaction"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines the value of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "no-typeahead",
                "description": "Defines whether the value will be autocompleted to match an item",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "loading",
                "description": "Indicates whether a loading indicator should be shown in the picker.",
                "value": { "type": "boolean" }
              },
              {
                "name": "filter",
                "description": "Defines the filter type of the component.",
                "value": {
                  "type": "\"None\" | \"StartsWithPerTerm\" | \"StartsWith\" | \"Contains\""
                }
              },
              {
                "name": "show-clear-icon",
                "description": "Defines whether the clear icon of the combobox will be shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter, focusout or an item is selected."
              },
              {
                "name": "input",
                "description": "Fired when typing in input or clear icon is pressed.\n\n**Note:** filterValue property is updated, input is changed."
              },
              {
                "name": "selection-change",
                "description": "Fired when selection is changed by user interaction"
              }
            ]
          }
        },
        {
          "name": "ui5-cb-group-item",
          "description": "The `ui5-cb-group-item` is type of suggestion item,\nthat can be used to split the `ui5-combobox` suggestions into groups.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-cb-item",
          "description": "The `ui5-cb-item` represents the item for a `ui5-combobox`.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the additional text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the additional text of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-li-custom",
          "description": "A component to be used as custom list item within the `ui5-list`\nthe same way as the standard `ui5-li`.\n\nThe component accepts arbitrary HTML content to allow full customization.\n---\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the content of the component.\n\n### **CSS Parts:**\n - **native-li** - Used to style the main li tag of the list item\n- **content** - Used to style the content area of the list item\n- **detail-button** - Used to style the button rendered when the list item is of type detail\n- **delete-button** - Used to style the button rendered when the list item is in delete mode\n- **radio** - Used to style the radio button rendered when the list item is in single selection mode\n- **checkbox** - Used to style the checkbox rendered when the list item is in multiple selection mode",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\n\n**Note**: If not provided a default text alternative will be set, if present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "navigated",
              "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip that would be displayed for the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "highlight",
              "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component."
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "description": "Fired when the user clicks on the detail button when type is `Detail`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\n\n**Note**: If not provided a default text alternative will be set, if present.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "navigated",
                "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip that would be displayed for the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "highlight",
                "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "detail-click",
                "description": "Fired when the user clicks on the detail button when type is `Detail`."
              }
            ]
          }
        },
        {
          "name": "ui5-date-picker",
          "description": "### Overview\n\nThe `ui5-date-picker` component provides an input field with assigned calendar which opens on user action.\nThe `ui5-date-picker` allows users to select a localized date using touch,\nmouse, or keyboard input. It consists of two parts: the date input field and the\ndate picker.\n\n### Usage\n\nThe user can enter a date by:\n\n- Using the calendar that opens in a popup\n- Typing it in directly in the input field\n\nWhen the user makes an entry and presses the enter key, the calendar shows the corresponding date.\nWhen the user directly triggers the calendar display, the actual date is displayed.\n\n### Formatting\n\nIf a date is entered by typing it into\nthe input field, it must fit to the used date format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](http://unicode.org/reports/tr35/#Date_Field_Symbol_Table).\n\nFor example, if the `format-pattern` is \"yyyy-MM-dd\",\na valid value string is \"2015-07-30\" and the same is displayed in the input.\n\n### Keyboard Handling\nThe `ui5-date-picker` provides advanced keyboard handling.\nIf the `ui5-date-picker` is focused,\nyou can open or close the drop-down by pressing [F4], [Alt] + [Up] or [Alt] + [Down] keys.\nOnce the drop-down is opened, you can use the [Up], [Down], [Left] or [Right] arrow keys\nto navigate through the dates and select one by pressing the `Space` or `Enter` keys. Moreover you can\nuse TAB to reach the buttons for changing month and year.\n\nIf the `ui5-date-picker` input field is focused and its corresponding picker dialog is not opened,\nthen users can increment or decrement the date referenced by `dateValue` property\nby using the following shortcuts:\n\n- [Page Down] - Decrements the corresponding day of the month by one\n- [Shift] + [Page Down] - Decrements the corresponding month by one\n- [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n- [Page Up] - Increments the corresponding day of the month by one\n- [Shift] + [Page Up] - Increments the corresponding month by one\n- [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n\n### Calendar types\nThe component supports several calendar types - Gregorian, Buddhist, Islamic, Japanese and Persian.\nBy default the Gregorian Calendar is used. In order to use the Buddhist, Islamic, Japanese or Persian calendar,\nyou need to set the `primaryCalendarType` property and import one or more of the following modules:\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Buddhist.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Islamic.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Japanese.js\";`\n\n`import \"@ui5/webcomponents-localization/dist/features/calendar/Persian.js\";`\n\nOr, you can use the global configuration and set the `calendarType` key:\n\n```html\n<script data-id=\"sap-ui-config\" type=\"application/json\">\n\t{\n\t\t\"calendarType\": \"Japanese\"\n\t}\n<script>\n```\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DatePicker.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n\n### **Methods:**\n - **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n- **closePicker(): _void_** - Closes the picker.\n- **openPicker(): _Promise<void>_** - Opens the picker.\n- **isOpen(): _boolean_** - Checks if the picker is open.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines a formatted date value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Determines whether the component is displayed as disabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Determines whether the component is displayed as read-only.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "hide-week-numbers",
              "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the aria-label attribute for the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "date-value",
              "description": "Currently selected date represented as a Local JavaScript Date instance.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "primary-calendar-type",
              "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "secondary-calendar-type",
              "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "format-pattern",
              "description": "Determines the format, displayed in the input field.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "min-date",
              "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "max-date",
              "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component is changed at each key stroke."
            },
            {
              "name": "value-state-change",
              "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines a formatted date value.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Determines whether the component is displayed as disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Determines whether the component is displayed as read-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-week-numbers",
                "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the aria-label attribute for the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "date-value",
                "description": "Currently selected date represented as a Local JavaScript Date instance.",
                "value": { "type": "any" }
              },
              {
                "name": "primary-calendar-type",
                "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "secondary-calendar-type",
                "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "format-pattern",
                "description": "Determines the format, displayed in the input field.",
                "value": { "type": "string" }
              },
              {
                "name": "min-date",
                "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              },
              {
                "name": "max-date",
                "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component is changed at each key stroke."
              },
              {
                "name": "value-state-change",
                "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
              }
            ]
          }
        },
        {
          "name": "ui5-daterange-picker",
          "description": "### Overview\nThe DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n\n### Usage\nThe user can enter a date by:\nUsing the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\nFor the `ui5-daterange-picker`\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DateRangePicker.js\";`\n\n### Keyboard Handling\nThe `ui5-daterange-picker` provides advanced keyboard handling.\n\nWhen the `ui5-daterange-picker` input field is focused the user can\nincrement or decrement respectively the range start or end date, depending on where the cursor is.\nThe following shortcuts are available:\n\n- [Page Down] - Decrements the corresponding day of the month by one\n- [Shift] + [Page Down] - Decrements the corresponding month by one\n- [Shift] + [Ctrl] + [Page Down] - Decrements the corresponding year by one\n- [Page Up] - Increments the corresponding day of the month by one\n- [Shift] + [Page Up] - Increments the corresponding month by one\n- [Shift] + [Ctrl] + [Page Up] - Increments the corresponding year by one\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n\n### **Methods:**\n - **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n- **closePicker(): _void_** - Closes the picker.\n- **openPicker(): _Promise<void>_** - Opens the picker.\n- **isOpen(): _boolean_** - Checks if the picker is open.",
          "doc-url": "",
          "attributes": [
            {
              "name": "delimiter",
              "description": "Determines the symbol which separates the dates.\nIf not supplied, the default time interval delimiter for the current locale will be used.",
              "value": { "type": "string", "default": "\"-\"" }
            },
            {
              "name": "date-value",
              "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "date-value-utc",
              "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "start-date-value",
              "description": "Returns the start date of the currently selected range as JavaScript Date instance.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "end-date-value",
              "description": "Returns the end date of the currently selected range as JavaScript Date instance.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "value",
              "description": "Defines a formatted date value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Determines whether the component is displayed as disabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Determines whether the component is displayed as read-only.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "hide-week-numbers",
              "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the aria-label attribute for the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "primary-calendar-type",
              "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "secondary-calendar-type",
              "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "format-pattern",
              "description": "Determines the format, displayed in the input field.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "min-date",
              "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "max-date",
              "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component is changed at each key stroke."
            },
            {
              "name": "value-state-change",
              "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "delimiter",
                "description": "Determines the symbol which separates the dates.\nIf not supplied, the default time interval delimiter for the current locale will be used.",
                "value": { "type": "string" }
              },
              {
                "name": "date-value",
                "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
                "value": { "type": "any" }
              },
              {
                "name": "date-value-utc",
                "description": "**Note:** The getter method is inherited and not supported. If called it will return an empty value.",
                "value": { "type": "any" }
              },
              {
                "name": "start-date-value",
                "description": "Returns the start date of the currently selected range as JavaScript Date instance.",
                "value": { "type": "any" }
              },
              {
                "name": "end-date-value",
                "description": "Returns the end date of the currently selected range as JavaScript Date instance.",
                "value": { "type": "any" }
              },
              {
                "name": "value",
                "description": "Defines a formatted date value.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Determines whether the component is displayed as disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Determines whether the component is displayed as read-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-week-numbers",
                "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the aria-label attribute for the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "primary-calendar-type",
                "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "secondary-calendar-type",
                "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "format-pattern",
                "description": "Determines the format, displayed in the input field.",
                "value": { "type": "string" }
              },
              {
                "name": "min-date",
                "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              },
              {
                "name": "max-date",
                "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component is changed at each key stroke."
              },
              {
                "name": "value-state-change",
                "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
              }
            ]
          }
        },
        {
          "name": "ui5-datetime-picker",
          "description": "### Overview\nThe `DateTimePicker` component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\nand for the purpose it consists of input field and Date/Time picker.\n\n### Usage\n\nUse the `DateTimePicker` if you need a combined date and time input component.\nDon't use it if you want to use either date, or time value.\nIn this case, use the `DatePicker` or the `TimePicker` components instead.\n\nThe user can set date/time by:\n\n- using the calendar and the time selectors\n- typing in the input field\n\nProgrammatically, to set date/time for the `DateTimePicker`, use the `value` property\n\n### Formatting\n\nThe value entered by typing into the input field must fit to the used date/time format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n\n**Example:** the following format `dd/MM/yyyy, hh:mm:ss aa`\ncorresponds the `13/04/2020, 03:16:16 AM` value.\n\nThe small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n\n**Example:** the following format `dd/MM/yyyy, HH:mm:ss`\ncorresponds the `13/04/2020, 15:16:16` value.\n\nThe capital 'H' indicates \"24\" hours format.\n\n**Note:** If the `formatPattern` does NOT include time,\nthe `DateTimePicker` will fallback to the default time format according to the locale.\n\n**Note:** If no placeholder is set to the `DateTimePicker`,\nthe current `formatPattern` is displayed as a placeholder.\nIf another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n\n**Note:** If the user input does NOT match the `formatPattern`,\nthe `DateTimePicker` makes an attempt to parse it based on the\nlocale settings.\n\n### Responsive behavior\n\nThe `DateTimePicker` is responsive and fully adapts to all devices.\nFor larger screens, such as tablet or desktop, it is displayed as a popover, while\non phone devices, it is displayed full screen.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/DateTimePicker.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component is changed at each key stroke.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n\n### **Methods:**\n - **openPicker(): _Promise<void>_** - Opens the picker.\n- **isValid(value: _string_): _boolean_** - Checks if a value is valid against the current date format of the DatePicker.\n- **isInValidRange(value: _string_): _boolean_** - Checks if a date is between the minimum and maximum date.\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date\naccording to the `formatPattern` property of the DatePicker instance\n- **closePicker(): _void_** - Closes the picker.\n- **isOpen(): _boolean_** - Checks if the picker is open.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines a formatted date value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Determines whether the component is displayed as disabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Determines whether the component is displayed as read-only.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "hide-week-numbers",
              "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the aria-label attribute for the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "date-value",
              "description": "Currently selected date represented as a Local JavaScript Date instance.",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "primary-calendar-type",
              "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "secondary-calendar-type",
              "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
              "value": {
                "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "format-pattern",
              "description": "Determines the format, displayed in the input field.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "min-date",
              "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "max-date",
              "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component is changed at each key stroke."
            },
            {
              "name": "value-state-change",
              "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines a formatted date value.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Determines whether the component is displayed as disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Determines whether the component is displayed as read-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-week-numbers",
                "description": "Defines the visibility of the week numbers column.\n\n**Note:** For calendars other than Gregorian,\nthe week numbers are not displayed regardless of what is set.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the aria-label attribute for the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "date-value",
                "description": "Currently selected date represented as a Local JavaScript Date instance.",
                "value": { "type": "any" }
              },
              {
                "name": "primary-calendar-type",
                "description": "Sets a calendar type used for display.\nIf not set, the calendar type of the global configuration is used.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "secondary-calendar-type",
                "description": "Defines the secondary calendar type.\nIf not set, the calendar will only show the primary calendar type.",
                "value": {
                  "type": "\"Gregorian\" | \"Islamic\" | \"Japanese\" | \"Buddhist\" | \"Persian\" | undefined"
                }
              },
              {
                "name": "format-pattern",
                "description": "Determines the format, displayed in the input field.",
                "value": { "type": "string" }
              },
              {
                "name": "min-date",
                "description": "Determines the minimum date available for selection.\n\n**Note:** If the formatPattern property is not set, the minDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              },
              {
                "name": "max-date",
                "description": "Determines the maximum date available for selection.\n\n**Note:** If the formatPattern property is not set, the maxDate value must be provided in the ISO date format (YYYY-MM-dd).",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component is changed at each key stroke."
              },
              {
                "name": "value-state-change",
                "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
              }
            ]
          }
        },
        {
          "name": "ui5-dialog",
          "description": "### Overview\nThe `ui5-dialog` component is used to temporarily display some information in a\nsize-limited window in front of the regular app screen.\nIt is used to prompt the user for an action or a confirmation.\nThe `ui5-dialog` interrupts the current app processing as it is the only focused UI element and\nthe main screen is dimmed/blocked.\nThe dialog combines concepts known from other technologies where the windows have\nnames such as dialog box, dialog window, pop-up, pop-up window, alert box, or message box.\n\nThe `ui5-dialog` is modal, which means that an user action is required before it is possible to return to the parent window.\nTo open multiple dialogs, each dialog element should be separate in the markup. This will ensure the correct modal behavior. Avoid nesting dialogs within each other.\nThe content of the `ui5-dialog` is fully customizable.\n\n### Structure\nA `ui5-dialog` consists of a header, content, and a footer for action buttons.\nThe `ui5-dialog` is usually displayed at the center of the screen.\nIts position can be changed by the user. To enable this, you need to set the property `draggable` accordingly.\n\n\n### Responsive Behavior\nThe `stretch` property can be used to stretch the `ui5-dialog` to full screen. For better usability, it's recommended to stretch the dialog to full screen on phone devices.\n\n**Note:** When a `ui5-bar` is used in the header or in the footer, you should remove the default dialog's paddings.\n\nFor more information see the sample \"Bar in Header/Footer\".\n\n### Keyboard Handling\n\n#### Basic Navigation\nWhen the `ui5-dialog` has the `draggable` property set to `true` and the header is focused, the user can move the dialog\nwith the following keyboard shortcuts:\n\n- [Up] or [Down] arrow keys - Move the dialog up/down.\n- [Left] or [Right] arrow keys - Move the dialog left/right.\n\n#### Resizing\nWhen the `ui5-dialog` has the `resizable` property set to `true` and the header is focused, the user can change the size of the dialog\nwith the following keyboard shortcuts:\n\n- [Shift] + [Up] or [Down] - Decrease/Increase the height of the dialog.\n- [Shift] + [Left] or [Right] - Decrease/Increase the width of the dialog.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Dialog\";`\n\n**Note:** We recommend placing popup-like components (`ui5-dialog` and `ui5-popover`)\noutside any other components. Preferably, the popup-like components should be placed\nin an upper level HTML element. Otherwise, in some cases the parent HTML elements can break\nthe position and/or z-index management of the popup-like components.\n\n**Note:** We don't recommend nesting popup-like components (`ui5-dialog`, `ui5-popover`).\n---\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**\n- **after-open** - Fired after the component is opened. **This event does not bubble.**\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**\n- **after-close** - Fired after the component is closed. **This event does not bubble.**\n\n### **Methods:**\n - **show(preventInitialFocus: _boolean_): _Promise<void>_** - Shows the dialog.\n- **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n- **isOpen(): _boolean_** - Tells if the component is opened\n- **close(): _void_** - Closes the popup.\n\n### **Slots:**\n - **header** - Defines the header HTML Element.\n\n**Note:** When a `ui5-bar` is used in the header, you should remove the default dialog's paddings.\n\n**Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application developer.\n`accessibleName` should be used.\n- **footer** - Defines the footer HTML Element.\n\n**Note:** When a `ui5-bar` is used in the footer, you should remove the default dialog's paddings.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "stretch",
              "description": "Determines if the dialog will be stretched to full screen on mobile. On desktop,\nthe dialog will be stretched to approximately 90% of the viewport.\n\n**Note:** For better usability of the component it is recommended to set this property to \"true\" when the dialog is opened on phone.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "draggable",
              "description": "Determines whether the component is draggable.\nIf this property is set to true, the Dialog will be draggable by its header.\n\n**Note:** The component can be draggable only in desktop mode.\n\n**Note:** This property overrides the default HTML \"draggable\" attribute native behavior.\nWhen \"draggable\" is set to true, the native browser \"draggable\"\nbehavior is prevented and only the Dialog custom logic (\"draggable by its header\") works.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "resizable",
              "description": "Configures the component to be resizable.\nIf this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages.\nIn RTL languages, the resize handle will be placed in the bottom left corner.\n\n**Note:** The component can be resizable only in desktop mode.\n\n**Note:** Upon resizing, externally defined height and width styling will be ignored.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "state",
              "description": "Defines the state of the `Dialog`.\n\n**Note:** If `\"Error\"` and `\"Warning\"` state is set, it will change the\naccessibility role to \"alertdialog\", if the accessibleRole property is set to `\"Dialog\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "initial-focus",
              "description": "Defines the ID of the HTML Element, which will get the initial focus.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "prevent-focus-restore",
              "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "description": "Indicates if the element is open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-role",
              "description": "Allows setting a custom role.",
              "value": {
                "type": "\"None\" | \"Dialog\" | \"AlertDialog\"",
                "default": "\"Dialog\""
              }
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "Defines the header HTML Element.\n\n**Note:** When a `ui5-bar` is used in the header, you should remove the default dialog's paddings.\n\n**Note:** If `header` slot is provided, the labelling of the dialog is a responsibility of the application developer.\n`accessibleName` should be used."
            },
            {
              "name": "footer",
              "description": "Defines the footer HTML Element.\n\n**Note:** When a `ui5-bar` is used in the footer, you should remove the default dialog's paddings."
            }
          ],
          "events": [
            {
              "name": "before-open",
              "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
            },
            {
              "name": "after-open",
              "description": "Fired after the component is opened. **This event does not bubble.**"
            },
            {
              "name": "before-close",
              "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
            },
            {
              "name": "after-close",
              "description": "Fired after the component is closed. **This event does not bubble.**"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
                "value": { "type": "string" }
              },
              {
                "name": "stretch",
                "description": "Determines if the dialog will be stretched to full screen on mobile. On desktop,\nthe dialog will be stretched to approximately 90% of the viewport.\n\n**Note:** For better usability of the component it is recommended to set this property to \"true\" when the dialog is opened on phone.",
                "value": { "type": "boolean" }
              },
              {
                "name": "draggable",
                "description": "Determines whether the component is draggable.\nIf this property is set to true, the Dialog will be draggable by its header.\n\n**Note:** The component can be draggable only in desktop mode.\n\n**Note:** This property overrides the default HTML \"draggable\" attribute native behavior.\nWhen \"draggable\" is set to true, the native browser \"draggable\"\nbehavior is prevented and only the Dialog custom logic (\"draggable by its header\") works.",
                "value": { "type": "boolean" }
              },
              {
                "name": "resizable",
                "description": "Configures the component to be resizable.\nIf this property is set to true, the Dialog will have a resize handle in its bottom right corner in LTR languages.\nIn RTL languages, the resize handle will be placed in the bottom left corner.\n\n**Note:** The component can be resizable only in desktop mode.\n\n**Note:** Upon resizing, externally defined height and width styling will be ignored.",
                "value": { "type": "boolean" }
              },
              {
                "name": "state",
                "description": "Defines the state of the `Dialog`.\n\n**Note:** If `\"Error\"` and `\"Warning\"` state is set, it will change the\naccessibility role to \"alertdialog\", if the accessibleRole property is set to `\"Dialog\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "initial-focus",
                "description": "Defines the ID of the HTML Element, which will get the initial focus.",
                "value": { "type": "string" }
              },
              {
                "name": "prevent-focus-restore",
                "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Indicates if the element is open",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-role",
                "description": "Allows setting a custom role.",
                "value": { "type": "\"None\" | \"Dialog\" | \"AlertDialog\"" }
              }
            ],
            "events": [
              {
                "name": "before-open",
                "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
              },
              {
                "name": "after-open",
                "description": "Fired after the component is opened. **This event does not bubble.**"
              },
              {
                "name": "before-close",
                "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
              },
              {
                "name": "after-close",
                "description": "Fired after the component is closed. **This event does not bubble.**"
              }
            ]
          }
        },
        {
          "name": "ui5-file-uploader",
          "description": "### Overview\n\nThe `ui5-file-uploader` opens a file explorer dialog and enables users to upload files.\nThe component consists of input field, but you can provide an HTML element by your choice\nto trigger the file upload, by using the default slot.\nFurthermore, you can set the property \"hideInput\" to \"true\" to hide the input field.\n\nTo get all selected files, you can simply use the read-only \"files\" property.\nTo restrict the types of files the user can select, you can use the \"accept\" property.\n\nAnd, similar to all input based components, the FileUploader supports \"valueState\", \"placeholder\", \"name\", and \"disabled\" properties.\n\nFor the `ui5-file-uploader`\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/FileUploader.js\";`\n---\n\n\n### **Events:**\n - **change** - Event is fired when the value of the file path has been changed.\n\n**Note:** Keep in mind that because of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button of the uploads window is pressed.\n\n### **Slots:**\n - **default** - By default the component contains a single input field. With this slot you can pass any content that you wish to add. See the samples for more information.\n\n**Note:** If no content is provided in this slot, the component will only consist of an input field and will not be interactable using the keyboard.\nAlso it is not recommended to use any non-interactable components, as it may lead to poor accessibility experience.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.",
          "doc-url": "",
          "attributes": [
            {
              "name": "accept",
              "description": "Comma-separated list of file types that the component should accept.\n\n**Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you want to accept png's only.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "hide-input",
              "description": "If set to \"true\", the input field of component will not be rendered. Only the default slot that is passed will be rendered.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "multiple",
              "description": "Allows multiple files to be chosen.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value",
              "description": "Defines the name/names of the file/files to upload.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "files",
              "description": "FileList of all selected files.",
              "value": { "type": "any", "default": "null" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "By default the component contains a single input field. With this slot you can pass any content that you wish to add. See the samples for more information.\n\n**Note:** If no content is provided in this slot, the component will only consist of an input field and will not be interactable using the keyboard.\nAlso it is not recommended to use any non-interactable components, as it may lead to poor accessibility experience."
            },
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Event is fired when the value of the file path has been changed.\n\n**Note:** Keep in mind that because of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button of the uploads window is pressed."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "accept",
                "description": "Comma-separated list of file types that the component should accept.\n\n**Note:** Please make sure you are adding the `.` in front on the file type, e.g. `.png` in case you want to accept png's only.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-input",
                "description": "If set to \"true\", the input field of component will not be rendered. Only the default slot that is passed will be rendered.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "multiple",
                "description": "Allows multiple files to be chosen.",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "Defines the name/names of the file/files to upload.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "files",
                "description": "FileList of all selected files.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Event is fired when the value of the file path has been changed.\n\n**Note:** Keep in mind that because of the HTML input element of type file, the event is also fired in Chrome browser when the Cancel button of the uploads window is pressed."
              }
            ]
          }
        },
        {
          "name": "ui5-li-groupheader",
          "description": "The `ui5-li-groupheader` is a special list item, used only to separate other list items into logical groups.\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\n\n**Note:** If not provided a default text alternative will be set, if present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\n\n**Note:** If not provided a default text alternative will be set, if present.",
                "value": { "type": "string" }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-icon",
          "description": "### Overview\n\nThe `ui5-icon` component represents an SVG icon.\nThere are two main scenarios how the `ui5-icon` component is used:\nas a purely decorative element,\nor as an interactive element that can be focused and clicked.\n\n### Usage\n\n1. **Get familiar with the icons collections.**\n\nBefore displaying an icon, you need to explore the icons collections to find and import the desired icon.\n\nCurrently there are 3 icons collection, available as 3 npm packages:\n\n- [@ui5/webcomponents-icons](https://www.npmjs.com/package/@ui5/webcomponents-icons) represents the \"SAP-icons\" collection and includes the following\n[icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons).\n- [@ui5/webcomponents-icons-tnt](https://www.npmjs.com/package/@ui5/webcomponents-icons-tnt) represents the \"tnt\" collection and includes the following\n[icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons-TNT).\n- [@ui5/webcomponents-icons-icons-business-suite](https://www.npmjs.com/package/@ui5/webcomponents-icons-business-suite) represents the \"business-suite\" collection and includes the following\n[icons](https://ui5.sap.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/BusinessSuiteInAppSymbols).\n\n2. **After exploring the icons collections, add one or more of the packages as dependencies to your project.**\n\n`npm i @ui5/webcomponents-icons`\n`npm i @ui5/webcomponents-icons-tnt`\n`npm i @ui5/webcomponents-icons-business-suite`\n\n3. **Then, import the desired icon**.\n\n`import \"@ui5/\\{package_name\\}/dist/\\{icon_name\\}.js\";`\n\n**For Example**:\n\nFor the standard \"SAP-icons\" icon collection, import an icon from the `@ui5/webcomponents-icons` package:\n\n`import \"@ui5/webcomponents-icons/dist/employee.js\";`\n\nFor the \"tnt\" (SAP Fiori Tools) icon collection, import an icon from the `@ui5/webcomponents-icons-tnt` package:\n\n`import \"@ui5/webcomponents-icons-tnt/dist/antenna.js\";`\n\nFor the \"business-suite\" (SAP Business Suite) icon collection, import an icon from the `@ui5/webcomponents-icons-business-suite` package:\n\n`import \"@ui5/webcomponents-icons-business-suite/dist/ab-testing.js\";`\n\n4. **Display the icon using the `ui5-icon` web component.**\nSet the icon collection (\"SAP-icons\", \"tnt\" or \"business-suite\" - \"SAP-icons\" is the default icon collection and can be skipped)\nand the icon name to the `name` property.\n\n`<ui5-icon name=\"employee\"></ui5-icon>`\n`<ui5-icon name=\"tnt/antenna\"></ui5-icon>`\n`<ui5-icon name=\"business-suite/ab-testing\"></ui5-icon>`\n\n### Keyboard Handling\n\n- [Space] / [Enter] or [Return] - Fires the `click` event if the `interactive` property is set to true.\n- [Shift] - If [Space] / [Enter] or [Return] is pressed, pressing [Shift] releases the ui5-icon without triggering the click event.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Icon.js\";`\n---\n\n\n### **CSS Parts:**\n - **root** - Used to style the outermost wrapper of the `ui5-icon`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the component semantic design.",
              "value": {
                "type": "\"Neutral\" | \"Information\" | \"Positive\" | \"Negative\" | \"Critical\" | \"Default\" | \"Contrast\" | \"NonInteractive\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "interactive",
              "description": "Defines if the icon is interactive (focusable and pressable)",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "name",
              "description": "Defines the unique identifier (icon name) of the component.\n\nTo browse all available icons, see the\n[SAP Icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html),\n[SAP Fiori Tools](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons-TNT) and\n[SAP Business Suite](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html)\n\nExample:\n`name='add'`, `name='delete'`, `name='employee'`.\n\n**Note:** To use the SAP Fiori Tools icons,\nyou need to set the `tnt` prefix in front of the icon's name.\n\nExample:\n`name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.\n\n**Note:** To use the SAP Business Suite icons,\nyou need to set the `business-suite` prefix in front of the icon's name.\n\nExample:\n`name='business-suite/3d'`, `name='business-suite/1x2-grid-layout'`, `name='business-suite/4x4-grid-layout'`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.\n\n**Note:** Every icon should have a text alternative in order to\ncalculate its accessible name.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-tooltip",
              "description": "Defines whether the component should have a tooltip.\n\n**Note:** The tooltip text should be provided via the `accessible-name` property.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-role",
              "description": "Defines the accessibility role of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the component semantic design.",
                "value": {
                  "type": "\"Neutral\" | \"Information\" | \"Positive\" | \"Negative\" | \"Critical\" | \"Default\" | \"Contrast\" | \"NonInteractive\""
                }
              },
              {
                "name": "interactive",
                "description": "Defines if the icon is interactive (focusable and pressable)",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "Defines the unique identifier (icon name) of the component.\n\nTo browse all available icons, see the\n[SAP Icons](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html),\n[SAP Fiori Tools](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html#/overview/SAP-icons-TNT) and\n[SAP Business Suite](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html)\n\nExample:\n`name='add'`, `name='delete'`, `name='employee'`.\n\n**Note:** To use the SAP Fiori Tools icons,\nyou need to set the `tnt` prefix in front of the icon's name.\n\nExample:\n`name='tnt/antenna'`, `name='tnt/actor'`, `name='tnt/api'`.\n\n**Note:** To use the SAP Business Suite icons,\nyou need to set the `business-suite` prefix in front of the icon's name.\n\nExample:\n`name='business-suite/3d'`, `name='business-suite/1x2-grid-layout'`, `name='business-suite/4x4-grid-layout'`.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\nIf not provided a default text alternative will be set, if present.\n\n**Note:** Every icon should have a text alternative in order to\ncalculate its accessible name.",
                "value": { "type": "string" }
              },
              {
                "name": "show-tooltip",
                "description": "Defines whether the component should have a tooltip.\n\n**Note:** The tooltip text should be provided via the `accessible-name` property.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-role",
                "description": "Defines the accessibility role of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-input",
          "description": "### Overview\n\nThe `ui5-input` component allows the user to enter and edit text or numeric values in one line.\n\nAdditionally, you can provide `suggestionItems`,\nthat are displayed in a popover right under the input.\n\nThe text field can be editable or read-only (`readonly` property),\nand it can be enabled or disabled (`disabled` property).\nTo visualize semantic states, such as \"error\" or \"warning\", the `valueState` property is provided.\nWhen the user makes changes to the text, the change event is fired,\nwhich enables you to react on any text change.\n\n**Note:** If you are using the `ui5-input` as a single npm module,\ndon't forget to import the `InputSuggestions` module from\n\"@ui5/webcomponents/dist/features/InputSuggestions.js\"\nto enable the suggestions functionality.\n\n### Keyboard Handling\nThe `ui5-input` provides the following keyboard shortcuts:\n\n- [Escape] - Closes the suggestion list, if open. If closed or not enabled, cancels changes and reverts to the value which the Input field had when it got the focus.\n- [Enter] or [Return] - If suggestion list is open takes over the current matching item and closes it. If value state or group header is focused, does nothing.\n- [Down] - Focuses the next matching item in the suggestion list.\n- [Up] - Focuses the previous matching item in the suggestion list.\n- [Home] - If focus is in the text input, moves caret before the first character. If focus is in the list, highlights the first item and updates the input accordingly.\n- [End] - If focus is in the text input, moves caret after the last character. If focus is in the list, highlights the last item and updates the input accordingly.\n- [Page Up] - If focus is in the list, moves highlight up by page size (10 items by default). If focus is in the input, does nothing.\n- [Page Down] - If focus is in the list, moves highlight down by page size (10 items by default). If focus is in the input, does nothing.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Input.js\";`\n\n`import \"@ui5/webcomponents/dist/features/InputSuggestions.js\";` (optional - for input suggestions support)\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected.\n- **suggestion-item-select** - Fired when a suggestion item, that is displayed in the suggestion popup, is selected.\n- **suggestion-item-preview** - Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection.\n\n### **Methods:**\n - **openPicker(): _void_** - Manually opens the suggestions popover, assuming suggestions are enabled. Items must be preloaded for it to open.\n\n### **Slots:**\n - **default** - Defines the suggestion items.\n\n**Note:** The suggestions would be displayed only if the `showSuggestions`\nproperty is set to `true`.\n\n**Note:** The `<ui5-suggestion-item>` and `<ui5-suggestion-group-item>` are recommended to be used as suggestion items.\n\n**Note:** Importing the Input Suggestions Support feature:\n\n`import \"@ui5/webcomponents/dist/features/InputSuggestions.js\";`\n\nautomatically imports the `<ui5-suggestion-item>` and `<ui5-suggestion-group-item>` for your convenience.\n- **icon** - Defines the icon to be displayed in the component.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.",
          "doc-url": "",
          "attributes": [
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "no-typeahead",
              "description": "Defines whether the value will be autcompleted to match an item",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "type",
              "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- Due to browser constraints, certain keyboard interactions may not be available\nfor the 'Number' and 'Email' types.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
              "value": {
                "type": "\"Text\" | \"Email\" | \"Number\" | \"Password\" | \"Tel\" | \"URL\"",
                "default": "\"Text\""
              }
            },
            {
              "name": "value",
              "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-suggestions",
              "description": "Defines whether the component should show suggestions, if such are present.\n\n**Note:** You need to import the `InputSuggestions` module\nfrom `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "maxlength",
              "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
              "value": { "type": "number | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the input.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-clear-icon",
              "description": "Defines whether the clear icon of the input will be shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "preview-item",
              "description": "The suggestion item on preview.",
              "value": { "type": "any", "default": "null" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the suggestion items.\n\n**Note:** The suggestions would be displayed only if the `showSuggestions`\nproperty is set to `true`.\n\n**Note:** The `<ui5-suggestion-item>` and `<ui5-suggestion-group-item>` are recommended to be used as suggestion items.\n\n**Note:** Importing the Input Suggestions Support feature:\n\n`import \"@ui5/webcomponents/dist/features/InputSuggestions.js\";`\n\nautomatically imports the `<ui5-suggestion-item>` and `<ui5-suggestion-group-item>` for your convenience."
            },
            {
              "name": "icon",
              "description": "Defines the icon to be displayed in the component."
            },
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected."
            },
            {
              "name": "suggestion-item-select",
              "description": "Fired when a suggestion item, that is displayed in the suggestion popup, is selected."
            },
            {
              "name": "suggestion-item-preview",
              "description": "Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "no-typeahead",
                "description": "Defines whether the value will be autcompleted to match an item",
                "value": { "type": "boolean" }
              },
              {
                "name": "type",
                "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- Due to browser constraints, certain keyboard interactions may not be available\nfor the 'Number' and 'Email' types.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
                "value": {
                  "type": "\"Text\" | \"Email\" | \"Number\" | \"Password\" | \"Tel\" | \"URL\""
                }
              },
              {
                "name": "value",
                "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "show-suggestions",
                "description": "Defines whether the component should show suggestions, if such are present.\n\n**Note:** You need to import the `InputSuggestions` module\nfrom `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.",
                "value": { "type": "boolean" }
              },
              {
                "name": "maxlength",
                "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
                "value": { "type": "number | undefined" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the input.",
                "value": { "type": "string" }
              },
              {
                "name": "show-clear-icon",
                "description": "Defines whether the clear icon of the input will be shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "preview-item",
                "description": "The suggestion item on preview.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected."
              },
              {
                "name": "suggestion-item-select",
                "description": "Fired when a suggestion item, that is displayed in the suggestion popup, is selected."
              },
              {
                "name": "suggestion-item-preview",
                "description": "Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection."
              }
            ]
          }
        },
        {
          "name": "ui5-label",
          "description": "### Overview\n\nThe `ui5-label` is a component used to represent a label for elements like input, textarea, select.\nThe `for` property of the `ui5-label` must be the same as the id attribute of the related input element.\nScreen readers read out the label, when the user focuses the labelled control.\n\nThe `ui5-label` appearance can be influenced by properties,\nsuch as `required` and `wrappingType`.\nThe appearance of the Label can be configured in a limited way by using the design property.\nFor a broader choice of designs, you can use custom styles.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Label\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "for",
              "description": "Defines the labeled input by providing its ID.\n\n**Note:** Can be used with both `ui5-input` and native input.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-colon",
              "description": "Defines whether colon is added to the component text.\n\n**Note:** Usually used in forms.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether an asterisk character is added to the component text.\n\n**Note:** Usually indicates that user input (bound with the `for` property) is required.\nIn that case the `required` property of\nthe corresponding input should also be set.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "wrapping-type",
              "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "for",
                "description": "Defines the labeled input by providing its ID.\n\n**Note:** Can be used with both `ui5-input` and native input.",
                "value": { "type": "string" }
              },
              {
                "name": "show-colon",
                "description": "Defines whether colon is added to the component text.\n\n**Note:** Usually used in forms.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether an asterisk character is added to the component text.\n\n**Note:** Usually indicates that user input (bound with the `for` property) is required.\nIn that case the `required` property of\nthe corresponding input should also be set.",
                "value": { "type": "boolean" }
              },
              {
                "name": "wrapping-type",
                "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-link",
          "description": "### Overview\nThe `ui5-link` is a hyperlink component that is used to navigate to other\napps and web pages, or to trigger actions.\nIt is a clickable text element, visualized in such a way that it stands out\nfrom the standard text.\nOn hover, it changes its style to an underlined text to provide additional feedback to the user.\n\n### Usage\n\nYou can set the `ui5-link` to be enabled or disabled.\n\nTo create a visual hierarchy in large lists of links, you can set the less important links as\n`Subtle` or the more important ones as `Emphasized`,\nby using the `design` property.\n\nIf the `href` property is set, the link behaves as the HTML\nanchor tag (`<a></a>`) and opens the specified URL in the given target frame (`target` property).\nTo specify where the linked content is opened, you can use the `target` property.\n\n### Responsive behavior\n\nIf there is not enough space, the text of the `ui5-link` becomes truncated.\nIf the `wrappingType` property is set to `\"Normal\"`, the text is displayed\non several lines instead of being truncated.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Link\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is triggered either with a mouse/tap\nor by using the Enter key.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\n\n**Note:** When disabled, the click event cannot be triggered by the user.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "href",
              "description": "Defines the component href.\n\n**Note:** Standard hyperlink behavior is supported.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "target",
              "description": "Defines the component target.\n\n**Notes:**\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**This property must only be used when the `href` property is set.**",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "design",
              "description": "Defines the component design.\n\n**Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.",
              "value": {
                "type": "\"Default\" | \"Emphasized\" | \"Subtle\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "wrapping-type",
              "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the input",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-role",
              "description": "Defines the ARIA role of the component.\n\n**Note:** Use the \"button\" role in cases when navigation is not expected to occur and the href property is not defined.",
              "value": { "type": "string", "default": "\"link\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is triggered either with a mouse/tap\nor by using the Enter key."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\n\n**Note:** When disabled, the click event cannot be triggered by the user.",
                "value": { "type": "boolean" }
              },
              {
                "name": "href",
                "description": "Defines the component href.\n\n**Note:** Standard hyperlink behavior is supported.",
                "value": { "type": "string" }
              },
              {
                "name": "target",
                "description": "Defines the component target.\n\n**Notes:**\n\n- `_self`\n- `_top`\n- `_blank`\n- `_parent`\n- `_search`\n\n**This property must only be used when the `href` property is set.**",
                "value": { "type": "string" }
              },
              {
                "name": "design",
                "description": "Defines the component design.\n\n**Note:** Avaialble options are `Default`, `Subtle`, and `Emphasized`.",
                "value": { "type": "\"Default\" | \"Emphasized\" | \"Subtle\"" }
              },
              {
                "name": "wrapping-type",
                "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the input",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-role",
                "description": "Defines the ARIA role of the component.\n\n**Note:** Use the \"button\" role in cases when navigation is not expected to occur and the href property is not defined.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is triggered either with a mouse/tap\nor by using the Enter key."
              }
            ]
          }
        },
        {
          "name": "ui5-list",
          "description": "### Overview\n\nThe `ui5-list` component allows displaying a list of items, advanced keyboard\nhandling support for navigating between items, and predefined modes to improve the development efficiency.\n\nThe `ui5-list` is a container for the available list items:\n\n- `ui5-li`\n- `ui5-li-custom`\n- `ui5-li-groupheader`\n\nTo benefit from the built-in selection mechanism, you can use the available\nselection modes, such as\n`SingleSelect`, `MultiSelect` and `Delete`.\n\nAdditionally, the `ui5-list` provides header, footer, and customization for the list item separators.\n\n### Keyboard Handling\n\n#### Basic Navigation\nThe `ui5-list` provides advanced keyboard handling.\nWhen a list is focused the user can use the following keyboard\nshortcuts in order to perform a navigation:\n\n- [Up] or [Down] - Navigates up and down the items\n- [Home] - Navigates to first item\n- [End] - Navigates to the last item\n\nThe user can use the following keyboard shortcuts to perform actions (such as select, delete),\nwhen the `mode` property is in use:\n\n- [Space] - Select an item (if `type` is 'Active') when `mode` is selection\n- [Delete] - Delete an item if `mode` property is `Delete`\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/List.js\";`\n\n`import \"@ui5/webcomponents/dist/StandardListItem.js\";` (for `ui5-li`)\n\n`import \"@ui5/webcomponents/dist/CustomListItem.js\";` (for `ui5-li-custom`)\n\n`import \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";` (for `ui5-li-groupheader`)\n---\n\n\n### **Events:**\n - **item-click** - Fired when an item is activated, unless the item's `type` property\nis set to `Inactive`.\n- **item-close** - Fired when the `Close` button of any item is clicked\n\n**Note:** This event is only applicable to list items that can be closed (such as notification list items),\nnot to be confused with `item-delete`.\n- **item-toggle** - Fired when the `Toggle` button of any item is clicked.\n\n**Note:** This event is only applicable to list items that can be toggled (such as notification group list items).\n- **item-delete** - Fired when the Delete button of any item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`.\n- **selection-change** - Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes.\n- **load-more** - Fired when the user scrolls to the bottom of the list.\n\n**Note:** The event is fired when the `growing='Scroll'` property is enabled.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n\n**Note:** Use `ui5-li`, `ui5-li-custom`, and `ui5-li-groupheader` for the intended design.\n- **header** - Defines the component header.\n\n**Note:** When `header` is set, the\n`headerText` property is ignored.",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "Defines the component header text.\n\n**Note:** If `header` is set this property is ignored.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "footer-text",
              "description": "Defines the footer text.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "indent",
              "description": "Determines whether the component is indented.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "mode",
              "description": "Defines the mode of the component.",
              "value": {
                "type": "\"None\" | \"SingleSelect\" | \"SingleSelectBegin\" | \"SingleSelectEnd\" | \"SingleSelectAuto\" | \"MultiSelect\" | \"Delete\"",
                "default": "\"None\""
              }
            },
            {
              "name": "no-data-text",
              "description": "Defines the text that is displayed when the component contains no items.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "separators",
              "description": "Defines the item separator style that is used.",
              "value": {
                "type": "\"None\" | \"All\" | \"Inner\"",
                "default": "\"All\""
              }
            },
            {
              "name": "growing",
              "description": "Defines whether the component will have growing capability either by pressing a `More` button,\nor via user scroll. In both cases `load-more` event is fired.\n\n**Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer,\non IE the component will fallback to `growing=\"Button\"`.",
              "value": {
                "type": "\"None\" | \"Button\" | \"Scroll\"",
                "default": "\"None\""
              }
            },
            {
              "name": "growing-button-text",
              "description": "Defines the text that will be displayed inside the growing button.\n\n**Note:** If not specified a built-in text will be displayed.\n\n**Note:** This property takes effect if the `growing` property is set to the `Button`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "busy",
              "description": "Defines if the component would display a loading indicator over the list.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy-delay",
              "description": "Defines the delay in milliseconds, after which the busy indicator will show up for this component.",
              "value": { "type": "number", "default": "1000" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the input.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-role",
              "description": "Defines the accessible role of the component.",
              "value": { "type": "string", "default": "\"list\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of the component.\n\n**Note:** Use `ui5-li`, `ui5-li-custom`, and `ui5-li-groupheader` for the intended design."
            },
            {
              "name": "header",
              "description": "Defines the component header.\n\n**Note:** When `header` is set, the\n`headerText` property is ignored."
            }
          ],
          "events": [
            {
              "name": "item-click",
              "description": "Fired when an item is activated, unless the item's `type` property\nis set to `Inactive`."
            },
            {
              "name": "item-close",
              "description": "Fired when the `Close` button of any item is clicked\n\n**Note:** This event is only applicable to list items that can be closed (such as notification list items),\nnot to be confused with `item-delete`."
            },
            {
              "name": "item-toggle",
              "description": "Fired when the `Toggle` button of any item is clicked.\n\n**Note:** This event is only applicable to list items that can be toggled (such as notification group list items)."
            },
            {
              "name": "item-delete",
              "description": "Fired when the Delete button of any item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`."
            },
            {
              "name": "selection-change",
              "description": "Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes."
            },
            {
              "name": "load-more",
              "description": "Fired when the user scrolls to the bottom of the list.\n\n**Note:** The event is fired when the `growing='Scroll'` property is enabled."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "Defines the component header text.\n\n**Note:** If `header` is set this property is ignored.",
                "value": { "type": "string" }
              },
              {
                "name": "footer-text",
                "description": "Defines the footer text.",
                "value": { "type": "string" }
              },
              {
                "name": "indent",
                "description": "Determines whether the component is indented.",
                "value": { "type": "boolean" }
              },
              {
                "name": "mode",
                "description": "Defines the mode of the component.",
                "value": {
                  "type": "\"None\" | \"SingleSelect\" | \"SingleSelectBegin\" | \"SingleSelectEnd\" | \"SingleSelectAuto\" | \"MultiSelect\" | \"Delete\""
                }
              },
              {
                "name": "no-data-text",
                "description": "Defines the text that is displayed when the component contains no items.",
                "value": { "type": "string" }
              },
              {
                "name": "separators",
                "description": "Defines the item separator style that is used.",
                "value": { "type": "\"None\" | \"All\" | \"Inner\"" }
              },
              {
                "name": "growing",
                "description": "Defines whether the component will have growing capability either by pressing a `More` button,\nor via user scroll. In both cases `load-more` event is fired.\n\n**Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer,\non IE the component will fallback to `growing=\"Button\"`.",
                "value": { "type": "\"None\" | \"Button\" | \"Scroll\"" }
              },
              {
                "name": "growing-button-text",
                "description": "Defines the text that will be displayed inside the growing button.\n\n**Note:** If not specified a built-in text will be displayed.\n\n**Note:** This property takes effect if the `growing` property is set to the `Button`.",
                "value": { "type": "string" }
              },
              {
                "name": "busy",
                "description": "Defines if the component would display a loading indicator over the list.",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy-delay",
                "description": "Defines the delay in milliseconds, after which the busy indicator will show up for this component.",
                "value": { "type": "number" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the input.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-role",
                "description": "Defines the accessible role of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "item-click",
                "description": "Fired when an item is activated, unless the item's `type` property\nis set to `Inactive`."
              },
              {
                "name": "item-close",
                "description": "Fired when the `Close` button of any item is clicked\n\n**Note:** This event is only applicable to list items that can be closed (such as notification list items),\nnot to be confused with `item-delete`."
              },
              {
                "name": "item-toggle",
                "description": "Fired when the `Toggle` button of any item is clicked.\n\n**Note:** This event is only applicable to list items that can be toggled (such as notification group list items)."
              },
              {
                "name": "item-delete",
                "description": "Fired when the Delete button of any item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`."
              },
              {
                "name": "selection-change",
                "description": "Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes."
              },
              {
                "name": "load-more",
                "description": "Fired when the user scrolls to the bottom of the list.\n\n**Note:** The event is fired when the `growing='Scroll'` property is enabled."
              }
            ]
          }
        },
        {
          "name": "ui5-menu",
          "description": "### Overview\n\n`ui5-menu` component represents a hierarchical menu structure.\n\n### Usage\n\n`ui5-menu` contains `ui5-menu-item` components.\nAn arbitrary hierarchy structure can be represented by recursively nesting menu items.\n\n### Keyboard Handling\n\nThe `ui5-menu` provides advanced keyboard handling.\nThe user can use the following keyboard shortcuts in order to navigate trough the tree:\n\n- `Arrow Up` / `Arrow Down` - Navigates up and down the menu items that are currently visible.\n- `Arrow Right`, `Space` or `Enter` - Opens a sub-menu if there are menu items nested\nin the currently clicked menu item.\n- `Arrow Left` or `Escape` - Closes the currently opened sub-menu.\n\nNote: if the text ditrection is set to Right-to-left (RTL), `Arrow Right` and `Arrow Left` functionality is swapped.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Menu.js\";`\n---\n\n\n### **Events:**\n - **item-click** - Fired when an item is being clicked.\n\n**Note:** Since 1.17.0 the event is preventable, allowing the menu to remain open after an item is pressed.\n- **before-open** - Fired before the menu is opened. This event can be cancelled, which will prevent the menu from opening. **This event does not bubble.**\n\n**Note:** Since 1.14.0 the event is also fired before a sub-menu opens.\n- **after-open** - Fired after the menu is opened. **This event does not bubble.**\n- **before-close** - Fired before the menu is closed. This event can be cancelled, which will prevent the menu from closing. **This event does not bubble.**\n- **after-close** - Fired after the menu is closed. **This event does not bubble.**\n- **item-focus** - Fired when a menu item receives focus.\n\n### **Methods:**\n - **showAt(opener: _HTMLElement_): _Promise<void>_** - Shows the Menu near the opener element.\n- **close(): _void_** - Closes the Menu.\n\n### **Slots:**\n - **default** - Defines the items of this component.\n\n**Note:** Use `ui5-menu-item` for the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "Defines the header text of the menu (displayed on mobile).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "open",
              "description": "Indicates if the menu is open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy",
              "description": "Defines if a loading indicator would be displayed inside the corresponding ui5-menu popover.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy-delay",
              "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover..",
              "value": { "type": "number", "default": "1000" }
            },
            {
              "name": "opener",
              "description": "Defines the ID or DOM Reference of the element that the menu is shown at",
              "value": { "type": "string | HTMLElement", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of this component.\n\n**Note:** Use `ui5-menu-item` for the intended design."
            }
          ],
          "events": [
            {
              "name": "item-click",
              "description": "Fired when an item is being clicked.\n\n**Note:** Since 1.17.0 the event is preventable, allowing the menu to remain open after an item is pressed."
            },
            {
              "name": "before-open",
              "description": "Fired before the menu is opened. This event can be cancelled, which will prevent the menu from opening. **This event does not bubble.**\n\n**Note:** Since 1.14.0 the event is also fired before a sub-menu opens."
            },
            {
              "name": "after-open",
              "description": "Fired after the menu is opened. **This event does not bubble.**"
            },
            {
              "name": "before-close",
              "description": "Fired before the menu is closed. This event can be cancelled, which will prevent the menu from closing. **This event does not bubble.**"
            },
            {
              "name": "after-close",
              "description": "Fired after the menu is closed. **This event does not bubble.**"
            },
            {
              "name": "item-focus",
              "description": "Fired when a menu item receives focus."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "Defines the header text of the menu (displayed on mobile).",
                "value": { "type": "string" }
              },
              {
                "name": "open",
                "description": "Indicates if the menu is open",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy",
                "description": "Defines if a loading indicator would be displayed inside the corresponding ui5-menu popover.",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy-delay",
                "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover..",
                "value": { "type": "number" }
              },
              {
                "name": "opener",
                "description": "Defines the ID or DOM Reference of the element that the menu is shown at",
                "value": { "type": "string | HTMLElement" }
              }
            ],
            "events": [
              {
                "name": "item-click",
                "description": "Fired when an item is being clicked.\n\n**Note:** Since 1.17.0 the event is preventable, allowing the menu to remain open after an item is pressed."
              },
              {
                "name": "before-open",
                "description": "Fired before the menu is opened. This event can be cancelled, which will prevent the menu from opening. **This event does not bubble.**\n\n**Note:** Since 1.14.0 the event is also fired before a sub-menu opens."
              },
              {
                "name": "after-open",
                "description": "Fired after the menu is opened. **This event does not bubble.**"
              },
              {
                "name": "before-close",
                "description": "Fired before the menu is closed. This event can be cancelled, which will prevent the menu from closing. **This event does not bubble.**"
              },
              {
                "name": "after-close",
                "description": "Fired after the menu is closed. **This event does not bubble.**"
              },
              {
                "name": "item-focus",
                "description": "Fired when a menu item receives focus."
              }
            ]
          }
        },
        {
          "name": "ui5-menu-item",
          "description": "### Overview\n\n`ui5-menu-item` is the item to use inside a `ui5-menu`.\nAn arbitrary hierarchy structure can be represented by recursively nesting menu items.\n\n### Usage\n\n`ui5-menu-item` is an abstract element, representing a node in a `ui5-menu`. The menu itself is rendered as a list,\nand each `ui5-menu-item` is represented by a list item (`ui5-li`) in that list. Therefore, you should only use\n`ui5-menu-item` directly in your apps. The `ui5-li` list item is internal for the list, and not intended for public use.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MenuItem.js\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the items of this component.",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the tree item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the `additionalText`, displayed in the end of the menu item.\n\n**Note:** The additional text would not be displayed if the item has a submenu.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon",
              "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\n**Example:**\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "starts-section",
              "description": "Defines whether a visual separator should be rendered before the item.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether `ui5-menu-item` is in disabled state.\n\n**Note:** A disabled `ui5-menu-item` is noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy",
              "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover.\n\n**Note:** If set to `true` a `ui5-busy-indicator` component will be displayed into the related one to the current `ui5-menu-item` sub-menu popover.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy-delay",
              "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover.",
              "value": { "type": "number", "default": "1000" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip for the menu item.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of this component."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the tree item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the `additionalText`, displayed in the end of the menu item.\n\n**Note:** The additional text would not be displayed if the item has a submenu.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\n**Example:**\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "starts-section",
                "description": "Defines whether a visual separator should be rendered before the item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether `ui5-menu-item` is in disabled state.\n\n**Note:** A disabled `ui5-menu-item` is noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy",
                "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover.\n\n**Note:** If set to `true` a `ui5-busy-indicator` component will be displayed into the related one to the current `ui5-menu-item` sub-menu popover.",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy-delay",
                "description": "Defines the delay in milliseconds, after which the busy indicator will be displayed inside the corresponding ui5-menu popover.",
                "value": { "type": "number" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip for the menu item.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-message-strip",
          "description": "### Overview\n\nThe `ui5-message-strip` component enables the embedding of app-related messages.\nIt displays 4 designs of messages, each with corresponding semantic color and icon: Information, Positive, Warning and Negative.\nEach message can have a Close button, so that it can be removed from the UI, if needed.\n\n### Usage\n\nFor the `ui5-message-strip` component, you can define whether it displays\nan icon in the beginning and a close button. Moreover, its size and background\ncan be controlled with CSS.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MessageStrip.js\";`\n---\n\n\n### **Events:**\n - **close** - Fired when the close button is pressed either with a\nclick/tap or by using the Enter or Space key.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **icon** - Defines the content to be displayed as graphical element within the component.\n\n**Note:** If no icon is given, the default icon for the component type will be used.\nThe SAP-icons font provides numerous options.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the component type.",
              "value": {
                "type": "\"Information\" | \"Positive\" | \"Negative\" | \"Warning\"",
                "default": "\"Information\""
              }
            },
            {
              "name": "hide-icon",
              "description": "Defines whether the MessageStrip will show an icon in the beginning.\nYou can directly provide an icon with the `icon` slot. Otherwise, the default icon for the type will be used.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-close-button",
              "description": "Defines whether the MessageStrip renders close button.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            },
            {
              "name": "icon",
              "description": "Defines the content to be displayed as graphical element within the component.\n\n**Note:** If no icon is given, the default icon for the component type will be used.\nThe SAP-icons font provides numerous options.\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html)."
            }
          ],
          "events": [
            {
              "name": "close",
              "description": "Fired when the close button is pressed either with a\nclick/tap or by using the Enter or Space key."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the component type.",
                "value": {
                  "type": "\"Information\" | \"Positive\" | \"Negative\" | \"Warning\""
                }
              },
              {
                "name": "hide-icon",
                "description": "Defines whether the MessageStrip will show an icon in the beginning.\nYou can directly provide an icon with the `icon` slot. Otherwise, the default icon for the type will be used.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-close-button",
                "description": "Defines whether the MessageStrip renders close button.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "close",
                "description": "Fired when the close button is pressed either with a\nclick/tap or by using the Enter or Space key."
              }
            ]
          }
        },
        {
          "name": "ui5-multi-combobox",
          "description": "### Overview\n\nThe `ui5-multi-combobox` component consists of a list box with items and a text field allowing the user to either type a value directly into the text field, or choose from the list of existing items.\n\nThe drop-down list is used for selecting and filtering values, it enables users to select one or more options from a predefined list. The control provides an editable input field to filter the list, and a dropdown arrow to expand/collapse the list of available options.\nThe options in the list have checkboxes that permit multi-selection. Entered values are displayed as tokens.\n### Structure\nThe `ui5-multi-combobox` consists of the following elements:\n\n-  Tokenizer - a list of tokens with selected options.\n-  Input field - displays the selected option/s as token/s. Users can type to filter the list.\n-  Drop-down arrow - expands\\collapses the option list.\n-  Option list - the list of available options.\n\n### Keyboard Handling\n\nThe `ui5-multi-combobox` provides advanced keyboard handling.\n\n#### Picker\nIf the `ui5-multi-combobox` is focused,\nyou can open or close the drop-down by pressing [F4], [Alt] + [Up] or [Alt] + [Down] keys.\nOnce the drop-down is opened, you can use the `UP` and `DOWN` arrow keys\nto navigate through the available options and select one by pressing the `Space` or `Enter` keys.\n\n#### Tokens\n\n-  Left/Right arrow keys - moves the focus selection form the currently focused token to the previous/next one (if available).\n-  Delete -  deletes the token and focuses the previous token.\n-  Backspace -  deletes the token and focus the next token.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MultiComboBox.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke or clear icon is pressed.\n- **open-change** - Fired when the dropdown is opened or closed.\n- **selection-change** - Fired when selection is changed by user interaction.\n\n### **Slots:**\n - **default** - Defines the component items.\n- **icon** - Defines the icon to be displayed in the component.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.\n\n### **CSS Parts:**\n - **token-\\{index\\}** - Used to style each token(where `token-0` corresponds to the first item)",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "no-typeahead",
              "description": "Defines whether the value will be autcompleted to match an item",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "allow-custom-values",
              "description": "Defines if the user input will be prevented, if no matching item has been found",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "filter",
              "description": "Defines the filter type of the component.",
              "value": {
                "type": "\"None\" | \"StartsWithPerTerm\" | \"StartsWith\" | \"Contains\"",
                "default": "\"StartsWithPerTerm\""
              }
            },
            {
              "name": "show-clear-icon",
              "description": "Defines whether the clear icon of the multi-combobox will be shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-select-all",
              "description": "Determines if the select all checkbox is visible on top of suggestions.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "description": "Indicates whether the dropdown is open. True if the dropdown is open, false otherwise.",
              "value": { "type": "any", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component items."
            },
            {
              "name": "icon",
              "description": "Defines the icon to be displayed in the component."
            },
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component changes at each keystroke or clear icon is pressed."
            },
            {
              "name": "open-change",
              "description": "Fired when the dropdown is opened or closed."
            },
            {
              "name": "selection-change",
              "description": "Fired when selection is changed by user interaction."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
                "value": { "type": "string" }
              },
              {
                "name": "no-typeahead",
                "description": "Defines whether the value will be autcompleted to match an item",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "allow-custom-values",
                "description": "Defines if the user input will be prevented, if no matching item has been found",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "filter",
                "description": "Defines the filter type of the component.",
                "value": {
                  "type": "\"None\" | \"StartsWithPerTerm\" | \"StartsWith\" | \"Contains\""
                }
              },
              {
                "name": "show-clear-icon",
                "description": "Defines whether the clear icon of the multi-combobox will be shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "show-select-all",
                "description": "Determines if the select all checkbox is visible on top of suggestions.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Indicates whether the dropdown is open. True if the dropdown is open, false otherwise.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component changes at each keystroke or clear icon is pressed."
              },
              {
                "name": "open-change",
                "description": "Fired when the dropdown is opened or closed."
              },
              {
                "name": "selection-change",
                "description": "Fired when selection is changed by user interaction."
              }
            ]
          }
        },
        {
          "name": "ui5-mcb-group-item",
          "description": "The `ui5-mcb-group-item` is type of suggestion item,\nthat can be used to split the `ui5-multi-combobox` suggestions into groups.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-mcb-item",
          "description": "The `ui5-mcb-item` represents the item for a `ui5-multi-combobox`.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "selected",
              "description": "Defines the selected state of the component.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the additional text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "selected",
                "description": "Defines the selected state of the component.",
                "value": { "type": "boolean" }
              },
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the additional text of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-multi-input",
          "description": "### Overview\nA `ui5-multi-input` field allows the user to enter multiple values, which are displayed as `ui5-token`.\n\nUser can choose interaction for creating tokens.\nFiori Guidelines say that user should create tokens when:\n\n- Type a value in the input and press enter or focus out the input field (`change` event is fired)\n- Select a value from the suggestion list (`suggestion-item-select` event is fired)\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/MultiInput.js\";`\n---\n\n\n### **Events:**\n - **value-help-trigger** - Fired when the value help icon is pressed\nand F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are used.\n- **token-delete** - Fired when a token is about to be deleted.\n- **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **input** - Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected.\n- **suggestion-item-select** - Fired when a suggestion item, that is displayed in the suggestion popup, is selected.\n- **suggestion-item-preview** - Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection.\n\n### **Methods:**\n - **openPicker(): _void_** - Manually opens the suggestions popover, assuming suggestions are enabled. Items must be preloaded for it to open.\n\n### **Slots:**\n - **tokens** - Defines the component tokens.",
          "doc-url": "",
          "attributes": [
            {
              "name": "show-value-help-icon",
              "description": "Determines whether a value help icon will be visualized in the end of the input.\nPressing the icon will fire `value-help-trigger` event.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "no-typeahead",
              "description": "Defines whether the value will be autcompleted to match an item",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "type",
              "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- Due to browser constraints, certain keyboard interactions may not be available\nfor the 'Number' and 'Email' types.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
              "value": {
                "type": "\"Text\" | \"Email\" | \"Number\" | \"Password\" | \"Tel\" | \"URL\"",
                "default": "\"Text\""
              }
            },
            {
              "name": "value",
              "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-suggestions",
              "description": "Defines whether the component should show suggestions, if such are present.\n\n**Note:** You need to import the `InputSuggestions` module\nfrom `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "maxlength",
              "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
              "value": { "type": "number | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the input.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "show-clear-icon",
              "description": "Defines whether the clear icon of the input will be shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "preview-item",
              "description": "The suggestion item on preview.",
              "value": { "type": "any", "default": "null" }
            }
          ],
          "slots": [
            { "name": "tokens", "description": "Defines the component tokens." }
          ],
          "events": [
            {
              "name": "value-help-trigger",
              "description": "Fired when the value help icon is pressed\nand F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are used."
            },
            {
              "name": "token-delete",
              "description": "Fired when a token is about to be deleted."
            },
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected."
            },
            {
              "name": "suggestion-item-select",
              "description": "Fired when a suggestion item, that is displayed in the suggestion popup, is selected."
            },
            {
              "name": "suggestion-item-preview",
              "description": "Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "show-value-help-icon",
                "description": "Determines whether a value help icon will be visualized in the end of the input.\nPressing the icon will fire `value-help-trigger` event.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the\ncomponent has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "no-typeahead",
                "description": "Defines whether the value will be autcompleted to match an item",
                "value": { "type": "boolean" }
              },
              {
                "name": "type",
                "description": "Defines the HTML type of the component.\n\n**Notes:**\n\n- The particular effect of this property differs depending on the browser\nand the current language settings, especially for type `Number`.\n- Due to browser constraints, certain keyboard interactions may not be available\nfor the 'Number' and 'Email' types.\n- The property is mostly intended to be used with touch devices\nthat use different soft keyboard layouts depending on the given input type.",
                "value": {
                  "type": "\"Text\" | \"Email\" | \"Number\" | \"Password\" | \"Tel\" | \"URL\""
                }
              },
              {
                "name": "value",
                "description": "Defines the value of the component.\n\n**Note:** The property is updated upon typing.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "show-suggestions",
                "description": "Defines whether the component should show suggestions, if such are present.\n\n**Note:** You need to import the `InputSuggestions` module\nfrom `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.",
                "value": { "type": "boolean" }
              },
              {
                "name": "maxlength",
                "description": "Sets the maximum number of characters available in the input field.\n\n**Note:** This property is not compatible with the ui5-input type InputType.Number. If the ui5-input type is set to Number, the maxlength value is ignored.",
                "value": { "type": "number | undefined" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the input.",
                "value": { "type": "string" }
              },
              {
                "name": "show-clear-icon",
                "description": "Defines whether the clear icon of the input will be shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "preview-item",
                "description": "The suggestion item on preview.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "value-help-trigger",
                "description": "Fired when the value help icon is pressed\nand F4 or ALT/OPTION + ARROW_UP/ARROW_DOWN keyboard keys are used."
              },
              {
                "name": "token-delete",
                "description": "Fired when a token is about to be deleted."
              },
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component changes at each keystroke,\nand when a suggestion item has been selected."
              },
              {
                "name": "suggestion-item-select",
                "description": "Fired when a suggestion item, that is displayed in the suggestion popup, is selected."
              },
              {
                "name": "suggestion-item-preview",
                "description": "Fired when the user navigates to a suggestion item via the ARROW keys,\nas a preview, before the final selection."
              }
            ]
          }
        },
        {
          "name": "ui5-option",
          "description": "### Overview\n\nThe `ui5-option` component defines the content of an option in the `ui5-select`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Option.js\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "selected",
              "description": "Defines the selected state of the component.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is hidden.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": {
                "type": "string | null | undefined",
                "default": "null"
              }
            },
            {
              "name": "value",
              "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the additional text displayed at the end of the option element.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "selected",
                "description": "Defines the selected state of the component.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string | null | undefined" }
              },
              {
                "name": "value",
                "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the additional text displayed at the end of the option element.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-panel",
          "description": "### Overview\n\nThe `ui5-panel` component is a container which has a header and a\ncontent area and is used\nfor grouping and displaying information. It can be collapsed to save space on the screen.\n\n### Guidelines:\n\n- Nesting two or more panels is not recommended.\n- Do not stack too many panels on one page.\n\n### Structure\nThe panel's header area consists of a title bar with a header text or custom header.\n\nThe header is clickable and can be used to toggle between the expanded and collapsed state. It includes an icon which rotates depending on the state.\n\nThe custom header can be set through the `header` slot and it may contain arbitraray content, such as: title, buttons or any other HTML elements.\n\nThe content area can contain an arbitrary set of controls.\n\n**Note:** The custom header is not clickable out of the box, but in this case the icon is interactive and allows to show/hide the content area.\n\n### Responsive Behavior\n\n- If the width of the panel is set to 100% (default), the panel and its children are\nresized responsively,\ndepending on its parent container.\n- If the panel has a fixed height, it will take up the space even if the panel is\ncollapsed.\n- When the panel is expandable (the `fixed` property is set to `false`),\nan arrow icon (pointing to the right) appears in front of the header.\n- When the animation is activated, expand/collapse uses a smooth animation to open or\nclose the content area.\n- When the panel expands/collapses, the arrow icon rotates 90 degrees\nclockwise/counter-clockwise.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Panel.js\";`\n---\n\n\n### **Events:**\n - **toggle** - Fired when the component is expanded/collapsed by user interaction.\n\n### **Slots:**\n - **default** - Defines the content of the component. The content is visible only when the component is expanded.\n- **header** - Defines the component header area.\n\n**Note:** When a header is provided, the `headerText` property is ignored.\n\n### **CSS Parts:**\n - **header** - Used to style the wrapper of the header.\n- **content** - Used to style the wrapper of the content.",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "This property is used to set the header text of the component.\nThe text is visible in both expanded and collapsed states.\n\n**Note:** This property is overridden by the `header` slot.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "fixed",
              "description": "Determines whether the component is in a fixed state that is not\nexpandable/collapsible by user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "collapsed",
              "description": "Indicates whether the component is collapsed and only the header is displayed.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "no-animation",
              "description": "Indicates whether the transition between the expanded and the collapsed state of the component is animated. By default the animation is enabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-role",
              "description": "Sets the accessible ARIA role of the component.\nDepending on the usage, you can change the role from the default `Form`\nto `Region` or `Complementary`.",
              "value": {
                "type": "\"Complementary\" | \"Form\" | \"Region\"",
                "default": "\"Form\""
              }
            },
            {
              "name": "header-level",
              "description": "Defines the \"aria-level\" of component heading,\nset by the `headerText`.",
              "value": {
                "type": "\"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\"",
                "default": "\"H2\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "sticky-header",
              "description": "Indicates whether the Panel header is sticky or not.\nIf stickyHeader is set to true, then whenever you scroll the content or\nthe application, the header of the panel will be always visible and\na solid color will be used for its design.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component. The content is visible only when the component is expanded."
            },
            {
              "name": "header",
              "description": "Defines the component header area.\n\n**Note:** When a header is provided, the `headerText` property is ignored."
            }
          ],
          "events": [
            {
              "name": "toggle",
              "description": "Fired when the component is expanded/collapsed by user interaction."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "This property is used to set the header text of the component.\nThe text is visible in both expanded and collapsed states.\n\n**Note:** This property is overridden by the `header` slot.",
                "value": { "type": "string" }
              },
              {
                "name": "fixed",
                "description": "Determines whether the component is in a fixed state that is not\nexpandable/collapsible by user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "collapsed",
                "description": "Indicates whether the component is collapsed and only the header is displayed.",
                "value": { "type": "boolean" }
              },
              {
                "name": "no-animation",
                "description": "Indicates whether the transition between the expanded and the collapsed state of the component is animated. By default the animation is enabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-role",
                "description": "Sets the accessible ARIA role of the component.\nDepending on the usage, you can change the role from the default `Form`\nto `Region` or `Complementary`.",
                "value": { "type": "\"Complementary\" | \"Form\" | \"Region\"" }
              },
              {
                "name": "header-level",
                "description": "Defines the \"aria-level\" of component heading,\nset by the `headerText`.",
                "value": {
                  "type": "\"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "sticky-header",
                "description": "Indicates whether the Panel header is sticky or not.\nIf stickyHeader is set to true, then whenever you scroll the content or\nthe application, the header of the panel will be always visible and\na solid color will be used for its design.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "toggle",
                "description": "Fired when the component is expanded/collapsed by user interaction."
              }
            ]
          }
        },
        {
          "name": "ui5-popover",
          "description": "### Overview\n\nThe `ui5-popover` component displays additional information for an object\nin a compact way and without leaving the page.\nThe Popover can contain various UI elements, such as fields, tables, images, and charts.\nIt can also include actions in the footer.\n\n### Structure\n\nThe popover has three main areas:\n\n- Header (optional)\n- Content\n- Footer (optional)\n\n**Note:** The `ui5-popover` is closed when the user clicks\nor taps outside the popover\nor selects an action within the popover. You can prevent this with the\n`modal` property.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Popover.js\";`\n\n**Note: ** We recommend placing popup-like components (`ui5-dialog` and `ui5-popover`)\noutside any other components. Preferably, the popup-like components should be placed\nin an upper level HTML element. Otherwise, in some cases the parent HTML elements can break\nthe position and/or z-index management of the popup-like components.\n\n**Note:** We don't recommend nesting popup-like components (`ui5-dialog`, `ui5-popover`).\n---\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**\n- **after-open** - Fired after the component is opened. **This event does not bubble.**\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**\n- **after-close** - Fired after the component is closed. **This event does not bubble.**\n\n### **Methods:**\n - **showAt(opener: _HTMLElement_, preventInitialFocus: _boolean_): _Promise<void>_** - Shows the popover.\n- **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n- **isOpen(): _boolean_** - Tells if the component is opened\n- **close(): _void_** - Closes the popup.\n\n### **Slots:**\n - **header** - Defines the header HTML Element.\n- **footer** - Defines the footer HTML Element.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "placement-type",
              "description": "Determines on which side the component is placed at.",
              "value": {
                "type": "\"Top\" | \"Bottom\" | \"Left\" | \"Right\"",
                "default": "\"Right\""
              }
            },
            {
              "name": "horizontal-align",
              "description": "Determines the horizontal alignment of the component.",
              "value": {
                "type": "\"Left\" | \"Right\" | \"Center\" | \"Stretch\"",
                "default": "\"Center\""
              }
            },
            {
              "name": "vertical-align",
              "description": "Determines the vertical alignment of the component.",
              "value": {
                "type": "\"Top\" | \"Bottom\" | \"Center\" | \"Stretch\"",
                "default": "\"Center\""
              }
            },
            {
              "name": "modal",
              "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-backdrop",
              "description": "Defines whether the block layer will be shown if modal property is set to true.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-arrow",
              "description": "Determines whether the component arrow is hidden.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "allow-target-overlap",
              "description": "Determines if there is no enough space, the component can be placed\nover the target.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "opener",
              "description": "Defines the ID or DOM Reference of the element that the popover is shown at",
              "value": {
                "type": "string | HTMLElement | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "initial-focus",
              "description": "Defines the ID of the HTML Element, which will get the initial focus.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "prevent-focus-restore",
              "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "description": "Indicates if the element is open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-role",
              "description": "Allows setting a custom role.",
              "value": {
                "type": "\"None\" | \"Dialog\" | \"AlertDialog\"",
                "default": "\"Dialog\""
              }
            }
          ],
          "slots": [
            {
              "name": "header",
              "description": "Defines the header HTML Element."
            },
            {
              "name": "footer",
              "description": "Defines the footer HTML Element."
            }
          ],
          "events": [
            {
              "name": "before-open",
              "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
            },
            {
              "name": "after-open",
              "description": "Fired after the component is opened. **This event does not bubble.**"
            },
            {
              "name": "before-close",
              "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
            },
            {
              "name": "after-close",
              "description": "Fired after the component is closed. **This event does not bubble.**"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
                "value": { "type": "string" }
              },
              {
                "name": "placement-type",
                "description": "Determines on which side the component is placed at.",
                "value": {
                  "type": "\"Top\" | \"Bottom\" | \"Left\" | \"Right\""
                }
              },
              {
                "name": "horizontal-align",
                "description": "Determines the horizontal alignment of the component.",
                "value": {
                  "type": "\"Left\" | \"Right\" | \"Center\" | \"Stretch\""
                }
              },
              {
                "name": "vertical-align",
                "description": "Determines the vertical alignment of the component.",
                "value": {
                  "type": "\"Top\" | \"Bottom\" | \"Center\" | \"Stretch\""
                }
              },
              {
                "name": "modal",
                "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-backdrop",
                "description": "Defines whether the block layer will be shown if modal property is set to true.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-arrow",
                "description": "Determines whether the component arrow is hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "allow-target-overlap",
                "description": "Determines if there is no enough space, the component can be placed\nover the target.",
                "value": { "type": "boolean" }
              },
              {
                "name": "opener",
                "description": "Defines the ID or DOM Reference of the element that the popover is shown at",
                "value": { "type": "string | HTMLElement | undefined" }
              },
              {
                "name": "initial-focus",
                "description": "Defines the ID of the HTML Element, which will get the initial focus.",
                "value": { "type": "string" }
              },
              {
                "name": "prevent-focus-restore",
                "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Indicates if the element is open",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-role",
                "description": "Allows setting a custom role.",
                "value": { "type": "\"None\" | \"Dialog\" | \"AlertDialog\"" }
              }
            ],
            "events": [
              {
                "name": "before-open",
                "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
              },
              {
                "name": "after-open",
                "description": "Fired after the component is opened. **This event does not bubble.**"
              },
              {
                "name": "before-close",
                "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
              },
              {
                "name": "after-close",
                "description": "Fired after the component is closed. **This event does not bubble.**"
              }
            ]
          }
        },
        {
          "name": "ui5-progress-indicator",
          "description": "### Overview\nShows the progress of a process in a graphical way. To indicate the progress,\nthe inside of the component is filled with a color.\n\n### Responsive Behavior\nYou can change the size of the Progress Indicator by changing its `width` or `height` CSS properties.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ProgressIndicator.js\";`\n---\n\n\n### **CSS Parts:**\n - **bar** - Used to style the main bar of the `ui5-progress-indicator`\n- **remaining-bar** - Used to style the remaining bar of the `ui5-progress-indicator`",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Defines whether component is in disabled state.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-value",
              "description": "Defines whether the component value is shown.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "value",
              "description": "Specifies the numerical value in percent for the length of the component.\n\n**Note:**\nIf a value greater than 100 is provided, the percentValue is set to 100. In other cases of invalid value, percentValue is set to its default of 0.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "display-value",
              "description": "Specifies the text value to be displayed in the bar.\n\n**Note:**\n\n- If there is no value provided or the value is empty, the default percentage value is shown.\n- If `hideValue` property is `true` both the `displayValue` and `value` property values are not shown.",
              "value": {
                "type": "string | null | undefined",
                "default": "null"
              }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Defines whether component is in disabled state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-value",
                "description": "Defines whether the component value is shown.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "Specifies the numerical value in percent for the length of the component.\n\n**Note:**\nIf a value greater than 100 is provided, the percentValue is set to 100. In other cases of invalid value, percentValue is set to its default of 0.",
                "value": { "type": "number" }
              },
              {
                "name": "display-value",
                "description": "Specifies the text value to be displayed in the bar.\n\n**Note:**\n\n- If there is no value provided or the value is empty, the default percentage value is shown.\n- If `hideValue` property is `true` both the `displayValue` and `value` property values are not shown.",
                "value": { "type": "string | null | undefined" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-radio-button",
          "description": "### Overview\n\nThe `ui5-radio-button` component enables users to select a single option from a set of options.\nWhen a `ui5-radio-button` is selected by the user, the\n`change` event is fired.\nWhen a `ui5-radio-button` that is within a group is selected, the one\nthat was previously selected gets automatically deselected. You can group radio buttons by using the `name` property.\n\n**Note:** If `ui5-radio-button` is not part of a group, it can be selected once, but can not be deselected back.\n\n### Keyboard Handling\n\nOnce the `ui5-radio-button` is on focus, it might be selected by pressing the Space and Enter keys.\n\nThe Arrow Down/Arrow Up and Arrow Left/Arrow Right keys can be used to change selection between next/previous radio buttons in one group,\nwhile TAB and SHIFT + TAB can be used to enter or leave the radio button group.\n\n**Note:** On entering radio button group, the focus goes to the currently selected radio button.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RadioButton\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **outer-ring** - Used to style the outer ring of the `ui5-radio-button`.\n- **inner-ring** - Used to style the inner ring of the `ui5-radio-button`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component isn't editable or selectable.\nHowever, because it's focusable, it still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "checked",
              "description": "Defines whether the component is checked or not.\n\n**Note:** The property value can be changed with user interaction,\neither by clicking/tapping on the component,\nor by using the Space or Enter key.\n\n**Note:** Only enabled radio buttons can be checked.\nRead-only radio buttons are not selectable, and therefore are always unchecked.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "name",
              "description": "Defines the name of the component.\nRadio buttons with the same `name` will form a radio button group.\n\n**Note:**\nThe selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio buttons in same group.\n\n**Note:**\nOnly one radio button can be selected per group.\n\n**Important:** For the `name` property to have effect when submitting forms, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value",
              "description": "Defines the form value of the component.\nWhen a form with a radio button group is submitted, the group's value\nwill be the value of the currently selected radio button.\n\n**Important:** For the `value` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "wrapping-type",
              "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the component checked state changes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component isn't editable or selectable.\nHowever, because it's focusable, it still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "checked",
                "description": "Defines whether the component is checked or not.\n\n**Note:** The property value can be changed with user interaction,\neither by clicking/tapping on the component,\nor by using the Space or Enter key.\n\n**Note:** Only enabled radio buttons can be checked.\nRead-only radio buttons are not selectable, and therefore are always unchecked.",
                "value": { "type": "boolean" }
              },
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "name",
                "description": "Defines the name of the component.\nRadio buttons with the same `name` will form a radio button group.\n\n**Note:**\nThe selection can be changed with `ARROW_UP/DOWN` and `ARROW_LEFT/RIGHT` keys between radio buttons in same group.\n\n**Note:**\nOnly one radio button can be selected per group.\n\n**Important:** For the `name` property to have effect when submitting forms, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "Defines the form value of the component.\nWhen a form with a radio button group is submitted, the group's value\nwill be the value of the currently selected radio button.\n\n**Important:** For the `value` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
                "value": { "type": "string" }
              },
              {
                "name": "wrapping-type",
                "description": "Defines whether the component text wraps when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the component checked state changes."
              }
            ]
          }
        },
        {
          "name": "ui5-range-slider",
          "description": "### Overview\nRepresents a numerical interval and two handles (grips) to select a sub-range within it.\nThe purpose of the component to enable visual selection of sub-ranges within a given interval.\n\n### Structure\nThe most important properties of the Range Slider are:\n\n- min - The minimum value of the slider range.\n- max - The maximum value of the slider range.\n- value - The current value of the slider.\n- step - Determines the increments in which the slider will move.\n- showTooltip - Determines if a tooltip should be displayed above the handle.\n- showTickmarks - Displays a visual divider between the step values.\n- labelInterval - Labels some or all of the tickmarks with their values.\n\n#### Notes:\n\n- The right and left handle can be moved individually and their positions could therefore switch.\n- The entire range can be moved along the interval.\n\n### Usage\nThe most common use case is to select and move sub-ranges on a continuous numerical scale.\n\n### Responsive Behavior\nYou can move the currently selected range by clicking on it and dragging it along the interval.\n\n### Keyboard Handling\n\n- `Left or Down Arrow` - Moves a component's handle or the entire selection one step to the left;\n- `Right or Up Arrow` - Moves a component's handle or the entire selection one step to the right;\n- `Left or Down Arrow + Ctrl/Cmd` - Moves a component's handle to the left or the entire range with step equal to 1/10th of the entire range;\n- `Right or Up Arrow + Ctrl/Cmd` - Moves a component's handle to the right or the entire range with step equal to 1/10th of the entire range;\n- `Plus` - Same as `Right or Up Arrow`;\n- `Minus` - Same as `Left or Down Arrow`;\n- `Home` - Moves the entire selection or the selected handle to the beginning of the component's range;\n- `End` - Moves the entire selection or the selected handle to the end of the component's range;\n- `Page Up` - Same as `Right or Up Arrow + Ctrl/Cmd`;\n- `Page Down` - Same as `Left or Down Arrow + Ctrl/Cmd`;\n- `Escape` - Resets the `startValue` and `endValue` properties to the values prior the component focusing;\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RangeSlider.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the value changes and the user has finished interacting with the slider.\n- **input** - Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.\n\n### **CSS Parts:**\n - **progress-container** - Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-range-slider`.\n- **progress-bar** - Used to style the progress bar, which shows the progress of the `ui5-range-slider`.\n- **handle** - Used to style the handles of the `ui5-range-slider`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "start-value",
              "description": "Defines start point of a selection - position of a first handle on the slider.",
              "value": { "type": "number", "default": "undefined" }
            },
            {
              "name": "end-value",
              "description": "Defines end point of a selection - position of a second handle on the slider.",
              "value": { "type": "number", "default": "undefined" }
            },
            {
              "name": "min",
              "description": "Defines the minimum value of the slider.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "max",
              "description": "Defines the maximum value of the slider.",
              "value": { "type": "number", "default": "100" }
            },
            {
              "name": "step",
              "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "label-interval",
              "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "show-tickmarks",
              "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "show-tooltip",
              "description": "Enables handle tooltip displaying the current value.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the slider is in disabled state.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the value changes and the user has finished interacting with the slider."
            },
            {
              "name": "input",
              "description": "Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "start-value",
                "description": "Defines start point of a selection - position of a first handle on the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "end-value",
                "description": "Defines end point of a selection - position of a second handle on the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "min",
                "description": "Defines the minimum value of the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "max",
                "description": "Defines the maximum value of the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "step",
                "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
                "value": { "type": "number" }
              },
              {
                "name": "label-interval",
                "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
                "value": { "type": "number" }
              },
              {
                "name": "show-tickmarks",
                "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
                "value": { "type": "boolean" }
              },
              {
                "name": "show-tooltip",
                "description": "Enables handle tooltip displaying the current value.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the slider is in disabled state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the value changes and the user has finished interacting with the slider."
              },
              {
                "name": "input",
                "description": "Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging."
              }
            ]
          }
        },
        {
          "name": "ui5-rating-indicator",
          "description": "### Overview\nThe Rating Indicator is used to display a specific number of icons that are used to rate an item.\nAdditionally, it is also used to display the average and overall ratings.\n\n### Usage\nThe recommended number of icons is between 5 and 7.\n\n### Responsive Behavior\nYou can change the size of the Rating Indicator by changing its `font-size` CSS property.\n\nExample: `<ui5-rating-indicator style=\"font-size: 3rem;\"></ui5-rating-indicator>`\n\n### Keyboard Handling\nWhen the `ui5-rating-indicator` is focused, the user can change the rating\nwith the following keyboard shortcuts:\n\n- [RIGHT/UP] - Increases the value of the rating by one step. If the highest value is reached, does nothing\n- [LEFT/DOWN] - Decreases the value of the rating by one step. If the lowest value is reached, does nothing.\n- [Home] - Sets the lowest value.\n- [End] - Sets the highest value.\n- [SPACE/ENTER/RETURN] - Increases the value of the rating by one step. If the highest value is reached, sets the rating to the lowest value.\n- Any number - Changes value to the corresponding number. If typed number is larger than the number of values, sets the highest value.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/RatingIndicator.js\";`\n---\n\n\n### **Events:**\n - **change** - The event is fired when the value changes.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "The indicated value of the rating.\n\n**Note:** If you set a number which is not round, it would be shown as follows:\n\n- 1.0 - 1.2 -> 1\n- 1.3 - 1.7 -> 1.5\n- 1.8 - 1.9 -> 2",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "max",
              "description": "The number of displayed rating symbols.",
              "value": { "type": "number", "default": "5" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "The event is fired when the value changes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "The indicated value of the rating.\n\n**Note:** If you set a number which is not round, it would be shown as follows:\n\n- 1.0 - 1.2 -> 1\n- 1.3 - 1.7 -> 1.5\n- 1.8 - 1.9 -> 2",
                "value": { "type": "number" }
              },
              {
                "name": "max",
                "description": "The number of displayed rating symbols.",
                "value": { "type": "number" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "The event is fired when the value changes."
              }
            ]
          }
        },
        {
          "name": "ui5-responsive-popover",
          "description": "### Overview\nThe `ui5-responsive-popover` acts as a Popover on desktop and tablet, while on phone it acts as a Dialog.\nThe component improves tremendously the user experience on mobile.\n\n### Usage\nUse it when you want to make sure that all the content is visible on any device.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ResponsivePopover.js\";`\n---\n\n\n### **Events:**\n - **before-open** - Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**\n- **after-open** - Fired after the component is opened. **This event does not bubble.**\n- **before-close** - Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**\n- **after-close** - Fired after the component is closed. **This event does not bubble.**\n\n### **Methods:**\n - **showAt(opener: _HTMLElement_, preventInitialFocus: _boolean_): _Promise<void>_** - Shows popover on desktop and dialog on mobile.\n- **close(): _void_** - Closes the popover/dialog.\n- **isOpen(): _boolean_** - Tells if the responsive popover is open.\n- **applyFocus(): _Promise<void>_** - Focuses the element denoted by `initialFocus`, if provided,\nor the first focusable element otherwise.\n\n### **CSS Parts:**\n - **header** - Used to style the header of the component\n- **content** - Used to style the content of the component\n- **footer** - Used to style the footer of the component",
          "doc-url": "",
          "attributes": [
            {
              "name": "header-text",
              "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "placement-type",
              "description": "Determines on which side the component is placed at.",
              "value": {
                "type": "\"Top\" | \"Bottom\" | \"Left\" | \"Right\"",
                "default": "\"Right\""
              }
            },
            {
              "name": "horizontal-align",
              "description": "Determines the horizontal alignment of the component.",
              "value": {
                "type": "\"Left\" | \"Right\" | \"Center\" | \"Stretch\"",
                "default": "\"Center\""
              }
            },
            {
              "name": "vertical-align",
              "description": "Determines the vertical alignment of the component.",
              "value": {
                "type": "\"Top\" | \"Bottom\" | \"Center\" | \"Stretch\"",
                "default": "\"Center\""
              }
            },
            {
              "name": "modal",
              "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-backdrop",
              "description": "Defines whether the block layer will be shown if modal property is set to true.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "hide-arrow",
              "description": "Determines whether the component arrow is hidden.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "allow-target-overlap",
              "description": "Determines if there is no enough space, the component can be placed\nover the target.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "opener",
              "description": "Defines the ID or DOM Reference of the element that the popover is shown at",
              "value": {
                "type": "string | HTMLElement | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "initial-focus",
              "description": "Defines the ID of the HTML Element, which will get the initial focus.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "prevent-focus-restore",
              "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "open",
              "description": "Indicates if the element is open",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-role",
              "description": "Allows setting a custom role.",
              "value": {
                "type": "\"None\" | \"Dialog\" | \"AlertDialog\"",
                "default": "\"Dialog\""
              }
            }
          ],
          "events": [
            {
              "name": "before-open",
              "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
            },
            {
              "name": "after-open",
              "description": "Fired after the component is opened. **This event does not bubble.**"
            },
            {
              "name": "before-close",
              "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
            },
            {
              "name": "after-close",
              "description": "Fired after the component is closed. **This event does not bubble.**"
            }
          ],
          "js": {
            "properties": [
              {
                "name": "header-text",
                "description": "Defines the header text.\n\n**Note:** If `header` slot is provided, the `headerText` is ignored.",
                "value": { "type": "string" }
              },
              {
                "name": "placement-type",
                "description": "Determines on which side the component is placed at.",
                "value": {
                  "type": "\"Top\" | \"Bottom\" | \"Left\" | \"Right\""
                }
              },
              {
                "name": "horizontal-align",
                "description": "Determines the horizontal alignment of the component.",
                "value": {
                  "type": "\"Left\" | \"Right\" | \"Center\" | \"Stretch\""
                }
              },
              {
                "name": "vertical-align",
                "description": "Determines the vertical alignment of the component.",
                "value": {
                  "type": "\"Top\" | \"Bottom\" | \"Center\" | \"Stretch\""
                }
              },
              {
                "name": "modal",
                "description": "Defines whether the component should close when\nclicking/tapping outside of the popover.\nIf enabled, it blocks any interaction with the background.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-backdrop",
                "description": "Defines whether the block layer will be shown if modal property is set to true.",
                "value": { "type": "boolean" }
              },
              {
                "name": "hide-arrow",
                "description": "Determines whether the component arrow is hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "allow-target-overlap",
                "description": "Determines if there is no enough space, the component can be placed\nover the target.",
                "value": { "type": "boolean" }
              },
              {
                "name": "opener",
                "description": "Defines the ID or DOM Reference of the element that the popover is shown at",
                "value": { "type": "string | HTMLElement | undefined" }
              },
              {
                "name": "initial-focus",
                "description": "Defines the ID of the HTML Element, which will get the initial focus.",
                "value": { "type": "string" }
              },
              {
                "name": "prevent-focus-restore",
                "description": "Defines if the focus should be returned to the previously focused element,\nwhen the popup closes.",
                "value": { "type": "boolean" }
              },
              {
                "name": "open",
                "description": "Indicates if the element is open",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-role",
                "description": "Allows setting a custom role.",
                "value": { "type": "\"None\" | \"Dialog\" | \"AlertDialog\"" }
              }
            ],
            "events": [
              {
                "name": "before-open",
                "description": "Fired before the component is opened. This event can be cancelled, which will prevent the popup from opening. **This event does not bubble.**"
              },
              {
                "name": "after-open",
                "description": "Fired after the component is opened. **This event does not bubble.**"
              },
              {
                "name": "before-close",
                "description": "Fired before the component is closed. This event can be cancelled, which will prevent the popup from closing. **This event does not bubble.**"
              },
              {
                "name": "after-close",
                "description": "Fired after the component is closed. **This event does not bubble.**"
              }
            ]
          }
        },
        {
          "name": "ui5-segmented-button",
          "description": "### Overview\n\nThe `ui5-segmented-button` shows a group of items. When the user clicks or taps\none of the items, it stays in a pressed state. It automatically resizes the items\nto fit proportionally within the component. When no width is set, the component uses the available width.\n\n**Note:** There can be just one selected `item` at a time.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SegmentedButton.js\";`\n---\n\n\n### **Events:**\n - **selection-change** - Fired when the selected item changes.\n\n### **Slots:**\n - **default** - Defines the items of `ui5-segmented-button`.\n\n**Note:** Multiple items are allowed.\n\n**Note:** Use the `ui5-segmented-button-item` for the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "mode",
              "description": "Defines the component selection mode.",
              "value": {
                "type": "\"SingleSelect\" | \"MultiSelect\"",
                "default": "\"SingleSelect\""
              }
            },
            {
              "name": "selected-item",
              "description": "Currently selected item.",
              "value": { "type": "any", "default": "undefined" }
            },
            {
              "name": "selected-items",
              "description": "Returns an array of the currently selected items.",
              "value": { "type": "any", "default": "[]" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of `ui5-segmented-button`.\n\n**Note:** Multiple items are allowed.\n\n**Note:** Use the `ui5-segmented-button-item` for the intended design."
            }
          ],
          "events": [
            {
              "name": "selection-change",
              "description": "Fired when the selected item changes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "mode",
                "description": "Defines the component selection mode.",
                "value": { "type": "\"SingleSelect\" | \"MultiSelect\"" }
              },
              {
                "name": "selected-item",
                "description": "Currently selected item.",
                "value": { "type": "any" }
              },
              {
                "name": "selected-items",
                "description": "Returns an array of the currently selected items.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "selection-change",
                "description": "Fired when the selected item changes."
              }
            ]
          }
        },
        {
          "name": "ui5-segmented-button-item",
          "description": "### Overview\n\nUsers can use the `ui5-segmented-button-item` as part of a `ui5-segmented-button`.\n\nClicking or tapping on a `ui5-segmented-button-item` changes its state to `pressed`.\nThe item returns to its initial state when the user clicks or taps on it again.\nBy applying additional custom CSS-styling classes, apps can give a different style to any\n`ui5-segmented-button-item`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": {
                "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "icon-end",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "submits",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "type",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": {
                "type": "\"Button\" | \"Submit\" | \"Reset\"",
                "default": "\"Button\""
              }
            },
            {
              "name": "accessible-role",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": {
                "type": "\"Button\" | \"Link\"",
                "default": "\"Button\""
              }
            },
            {
              "name": "pressed",
              "description": "Determines whether the component is displayed as pressed.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": {
                  "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\""
                }
              },
              {
                "name": "icon-end",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": { "type": "boolean" }
              },
              {
                "name": "submits",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": { "type": "boolean" }
              },
              {
                "name": "type",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": { "type": "\"Button\" | \"Submit\" | \"Reset\"" }
              },
              {
                "name": "accessible-role",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": { "type": "\"Button\" | \"Link\"" }
              },
              {
                "name": "pressed",
                "description": "Determines whether the component is displayed as pressed.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
              }
            ]
          }
        },
        {
          "name": "ui5-select",
          "description": "### Overview\n\nThe `ui5-select` component is used to create a drop-down list.\n\n### Usage\n\nThere are two main usages of the `ui5-select>`.\n\n1. With Option (`ui5-option`) web component:\n\nThe available options of the Select are defined by using the Option component.\nThe Option comes with predefined design and layout, including `icon`, `text` and `additional-text`.\n\n2. With SelectMenu (`ui5-select-menu`) and SelectMenuOption (`ui5-select-menu-option`) web components:\n\nThe SelectMenu can be used as alternative to define the Select's dropdown\nand can be used via the `menu` property of the Select to reference SelectMenu by its ID.\nThe component gives the possibility to customize the Select's dropdown\nby slotting entirely custom options (via the SelectMenuOption component) and adding custom styles.\n\n**Note:** SelectMenu is a popover and placing it top-level in the HTML page is recommended,\nbecause some page styles (for example transitions) can misplace the SelectMenu.\n\n### Keyboard Handling\nThe `ui5-select` provides advanced keyboard handling.\n\n- [F4] / [Alt] + [Up] / [Alt] + [Down] / [Space] or [Enter] - Opens/closes the drop-down.\n- [Up] or [Down] - If the drop-down is closed - changes selection to the next or the previous option. If the drop-down is opened - moves focus to the next or the previous option.\n- [Space], [Enter] - If the drop-down is opened - selects the focused option.\n- [Escape] - Closes the drop-down without changing the selection.\n- [Home] - Navigates to first option\n- [End] - Navigates to the last option\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Select\";`\n\n`import \"@ui5/webcomponents/dist/Option\";` (comes with `ui5-select`)\n---\n\n\n### **Events:**\n - **change** - Fired when the selected option changes.\n- **live-change** - Fired when the user navigates through the options, but the selection is not finalized,\nor when pressing the ESC key to revert the current selection.\n- **open** - Fired after the component's dropdown menu opens.\n- **close** - Fired after the component's dropdown menu closes.\n\n### **Slots:**\n - **default** - Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-option` component to define the desired options.\n- **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n- **label** - Defines the HTML element that will be displayed in the component input part,\nrepresenting the selected option.\n\n**Note:** If not specified and `ui5-select-menu-option` is used,\neither the option's `display-text` or its textContent will be displayed.\n\n**Note:** If not specified and `ui5-option` is used,\nthe option's textContent will be displayed.",
          "doc-url": "",
          "attributes": [
            {
              "name": "menu",
              "description": "Defines a reference (ID or DOM element) of component's menu of options\nas alternative to define the select's dropdown.\n\n**Note:** Usage of `ui5-select-menu` is recommended.",
              "value": {
                "type": "string | HTMLElement | undefined",
                "default": "undefined"
              }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\nThe value of the component will be the value of the currently selected `ui5-option`.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the `ui5-select` so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the select.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value",
              "description": "Defines the value of the component:\n\n- when get - returns the value of the component, e.g. the `value` property of the selected option or its text content.\n\n- when set - selects the option with matching `value` property or text content.\n\n**Note:** If the given value does not match any existing option,\nthe first option will get selected.",
              "value": { "type": "any", "default": "\"\"" }
            },
            {
              "name": "selected-option",
              "description": "Currently selected `ui5-option` element.",
              "value": { "type": "any", "default": "undefined" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-option` component to define the desired options."
            },
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.\n\n**Note:** If the component has `suggestionItems`,\nthe `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone."
            },
            {
              "name": "label",
              "description": "Defines the HTML element that will be displayed in the component input part,\nrepresenting the selected option.\n\n**Note:** If not specified and `ui5-select-menu-option` is used,\neither the option's `display-text` or its textContent will be displayed.\n\n**Note:** If not specified and `ui5-option` is used,\nthe option's textContent will be displayed."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the selected option changes."
            },
            {
              "name": "live-change",
              "description": "Fired when the user navigates through the options, but the selection is not finalized,\nor when pressing the ESC key to revert the current selection."
            },
            {
              "name": "open",
              "description": "Fired after the component's dropdown menu opens."
            },
            {
              "name": "close",
              "description": "Fired after the component's dropdown menu closes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "menu",
                "description": "Defines a reference (ID or DOM element) of component's menu of options\nas alternative to define the select's dropdown.\n\n**Note:** Usage of `ui5-select-menu` is recommended.",
                "value": { "type": "string | HTMLElement | undefined" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\nThe value of the component will be the value of the currently selected `ui5-option`.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the `ui5-select` so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the select.",
                "value": { "type": "string" }
              },
              {
                "name": "value",
                "description": "Defines the value of the component:\n\n- when get - returns the value of the component, e.g. the `value` property of the selected option or its text content.\n\n- when set - selects the option with matching `value` property or text content.\n\n**Note:** If the given value does not match any existing option,\nthe first option will get selected.",
                "value": { "type": "any" }
              },
              {
                "name": "selected-option",
                "description": "Currently selected `ui5-option` element.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the selected option changes."
              },
              {
                "name": "live-change",
                "description": "Fired when the user navigates through the options, but the selection is not finalized,\nor when pressing the ESC key to revert the current selection."
              },
              {
                "name": "open",
                "description": "Fired after the component's dropdown menu opens."
              },
              {
                "name": "close",
                "description": "Fired after the component's dropdown menu closes."
              }
            ]
          }
        },
        {
          "name": "ui5-select-menu",
          "description": "### Overview\n\nThe `ui5-select-menu` is meant to be used together with the `ui5-select` component as alternative\nto define the select's dropdown. It acts as a popover on desktop and tablet, and as a Dialog on phone.\n\nThe component gives the possibility to the user to customize the `ui5-select`'s dropdown\nby slotting custom options and adding custom styles.\n\n### Usage\n\nTo use `ui5-select` with a `ui5-select-menu`,\nyou need to set the `ui5-select` `menu` property to reference `ui5-select-menu` either by ID or DOM reference.\n\nFor the `ui5-select-menu`\n### ES6 Module Import\n\n`import @ui5/webcomponents/dist/SelectMenu.js\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the options of the component.",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Defines the options of the component."
            }
          ],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "ui5-select-menu-option",
          "description": "### Overview\nThe `ui5-select-menu-option` component represents an option in the `ui5-select-menu`.\n\n### Usage\n\nFor the `ui5-select-menu-option`\n### ES6 Module Import\n\n`import @ui5/webcomponents/dist/SelectMenuOption.js\";`\n---\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the content of the component.\n- **deleteButton** - **Note:** The slot is inherited and not supported. If set, it won't take any effect.",
          "doc-url": "",
          "attributes": [
            {
              "name": "display-text",
              "description": "Defines the text, displayed inside the `ui5-select` input filed\nwhen the option gets selected.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is hidden.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "value",
              "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "navigated",
              "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\n\n**Note**: If not provided a default text alternative will be set, if present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip that would be displayed for the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "highlight",
              "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the component."
            },
            {
              "name": "deleteButton",
              "description": "**Note:** The slot is inherited and not supported. If set, it won't take any effect."
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "description": "Fired when the user clicks on the detail button when type is `Detail`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "display-text",
                "description": "Defines the text, displayed inside the `ui5-select` input filed\nwhen the option gets selected.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is hidden.",
                "value": { "type": "boolean" }
              },
              {
                "name": "value",
                "description": "Defines the value of the `ui5-select` inside an HTML Form element when this component is selected.\nFor more information on HTML Form support, see the `name` property of `ui5-select`.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "navigated",
                "description": "**Note:** The property is inherited and not supported. If set, it won't take any effect.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\n\n**Note**: If not provided a default text alternative will be set, if present.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip that would be displayed for the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "highlight",
                "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "detail-click",
                "description": "Fired when the user clicks on the detail button when type is `Detail`."
              }
            ]
          }
        },
        {
          "name": "ui5-slider",
          "description": "### Overview\nThe Slider component represents a numerical range and a handle (grip).\nThe purpose of the component is to enable visual selection of a value in\na continuous numerical range by moving an adjustable handle.\n\n### Structure\nThe most important properties of the Slider are:\n\n- min - The minimum value of the slider range.\n- max - The maximum value of the slider range.\n- value - The current value of the slider range.\n- step - Determines the increments in which the slider will move.\n- showTooltip - Determines if a tooltip should be displayed above the handle.\n- showTickmarks - Displays a visual divider between the step values.\n- labelInterval - Labels some or all of the tickmarks with their values.\n\n### Usage\nThe most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n\n### Responsive Behavior\nThe `ui5-slider` component adjusts to the size of its parent container by recalculating and\nresizing the width of the control. You can move the slider handle in several different ways:\n\n- Drag and drop the handle to the desired value.\n- Click/tap on the range bar to move the handle to that location.\n\n### Keyboard Handling\n\n- `Left or Down Arrow` - Moves the handle one step to the left, effectively decreasing the component's value by `step` amount;\n- `Right or Up Arrow` - Moves the handle one step to the right, effectively increasing the component's value by `step` amount;\n- `Left or Down Arrow + Ctrl/Cmd` - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;\n- `Right or Up Arrow + Ctrl/Cmd` - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;\n- `Plus` - Same as `Right or Up Arrow`;\n- `Minus` - Same as `Left or Down Arrow`;\n- `Home` - Moves the handle to the beginning of the range;\n- `End` - Moves the handle to the end of the range;\n- `Page Up` - Same as `Right or Up + Ctrl/Cmd`;\n- `Page Down` - Same as `Left or Down + Ctrl/Cmd`;\n- `Escape` - Resets the value property after interaction, to the position prior the component's focusing;\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Slider.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the value changes and the user has finished interacting with the slider.\n- **input** - Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging.\n\n### **CSS Parts:**\n - **progress-container** - Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-slider`.\n- **progress-bar** - Used to style the progress bar, which shows the progress of the `ui5-slider`.\n- **handle** - Used to style the handle of the `ui5-slider`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Current value of the slider",
              "value": { "type": "number", "default": "undefined" }
            },
            {
              "name": "min",
              "description": "Defines the minimum value of the slider.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "max",
              "description": "Defines the maximum value of the slider.",
              "value": { "type": "number", "default": "100" }
            },
            {
              "name": "step",
              "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "label-interval",
              "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "show-tickmarks",
              "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "show-tooltip",
              "description": "Enables handle tooltip displaying the current value.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the slider is in disabled state.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the value changes and the user has finished interacting with the slider."
            },
            {
              "name": "input",
              "description": "Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Current value of the slider",
                "value": { "type": "number" }
              },
              {
                "name": "min",
                "description": "Defines the minimum value of the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "max",
                "description": "Defines the maximum value of the slider.",
                "value": { "type": "number" }
              },
              {
                "name": "step",
                "description": "Defines the size of the slider's selection intervals (e.g. min = 0, max = 10, step = 5 would result in possible selection of the values 0, 5, 10).\n\n**Note:** If set to 0 the slider handle movement is disabled. When negative number or value other than a number, the component fallbacks to its default value.",
                "value": { "type": "number" }
              },
              {
                "name": "label-interval",
                "description": "Displays a label with a value on every N-th step.\n\n**Note:** The step and tickmarks properties must be enabled.\nExample - if the step value is set to 2 and the label interval is also specified to 2 - then every second\ntickmark will be labelled, which means every 4th value number.",
                "value": { "type": "number" }
              },
              {
                "name": "show-tickmarks",
                "description": "Enables tickmarks visualization for each step.\n\n**Note:** The step must be a positive number.",
                "value": { "type": "boolean" }
              },
              {
                "name": "show-tooltip",
                "description": "Enables handle tooltip displaying the current value.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the slider is in disabled state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the value changes and the user has finished interacting with the slider."
              },
              {
                "name": "input",
                "description": "Fired when the value changes due to user interaction that is not yet finished - during mouse/touch dragging."
              }
            ]
          }
        },
        {
          "name": "ui5-special-date",
          "description": "### Overview\n\nThe `ui5-special-date` component defines a special calendar date to be used inside `ui5-calendar`,\nwhich is visually distinguished from the rest of the dates.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "type",
              "description": "Defines the type of the special date.",
              "value": {
                "type": "\"None\" | \"Today\" | \"Selected\" | \"Working\" | \"NonWorking\" | \"Type01\" | \"Type02\" | \"Type03\" | \"Type04\" | \"Type05\" | \"Type06\" | \"Type07\" | \"Type08\" | \"Type09\" | \"Type10\" | \"Type11\" | ... 8 more ... | \"Type20\"",
                "default": "\"None\""
              }
            },
            {
              "name": "value",
              "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "type",
                "description": "Defines the type of the special date.",
                "value": {
                  "type": "\"None\" | \"Today\" | \"Selected\" | \"Working\" | \"NonWorking\" | \"Type01\" | \"Type02\" | \"Type03\" | \"Type04\" | \"Type05\" | \"Type06\" | \"Type07\" | \"Type08\" | \"Type09\" | \"Type10\" | \"Type11\" | ... 8 more ... | \"Type20\""
                }
              },
              {
                "name": "value",
                "description": "The date formatted according to the `formatPattern` property\nof the `ui5-calendar` that hosts the component.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-split-button",
          "description": "### Overview\n\n`ui5-split-button` enables users to trigger actions. It is constructed of two separate actions -\ndefault action and arrow action that can be activated by clicking or tapping, or by\npressing certain keyboard keys - `Space` or `Enter` for default action,\nand `Arrow Down` or `Arrow Up` for arrow action.\n\n### Usage\n\n`ui5-split-button` consists two separate buttons:\n\n- for the first one (default action) you can define some `text` or an `icon`, or both.\nAlso, it is possible to define different icon for active state of this button - `activeIcon`.\n- the second one (arrow action) contains only `slim-arrow-down` icon.\n\nYou can choose a `design` from a set of predefined types (the same as for ui5-button) that offer\ndifferent styling to correspond to the triggered action. Both text and arrow actions have the same design.\n\nYou can set the `ui5-split-button` as enabled or disabled. Both parts of an enabled\n`ui5-split-button` can be pressed by clicking or tapping it, or by certain keys, which changes\nthe style to provide visual feedback to the user that it is pressed or hovered over with\nthe mouse cursor. A disabled `ui5-split-button` appears inactive and any of the two buttons\ncannot be pressed.\n\n### Keyboard Handling\n\n- `Space` or `Enter` - triggers the default action\n- `Shift` or `Escape` - if `Space` is pressed, releases the default action button without triggering the click event.\n- `Arrow Down`, `Arrow Up`, `Alt`+`Arrow Down`, `Alt`+`Arrow Up`, or `F4` - triggers the arrow action\nThere are separate events that are fired on activating of `ui5-split-button` parts:\n\n- `click` for the first button (default action)\n- `arrow-click` for the second button (arrow action)\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/SplitButton.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the user clicks on the default action.\n- **arrow-click** - Fired when the user clicks on the arrow action.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "icon",
              "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "active-icon",
              "description": "Defines the icon to be displayed in active state as graphical element within the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "active-arrow-button",
              "description": "Defines whether the arrow button should have the active state styles or not.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "design",
              "description": "Defines the component design.",
              "value": {
                "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the user clicks on the default action."
            },
            {
              "name": "arrow-click",
              "description": "Fired when the user clicks on the arrow action."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "icon",
                "description": "Defines the icon to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\n\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "active-icon",
                "description": "Defines the icon to be displayed in active state as graphical element within the component.",
                "value": { "type": "string" }
              },
              {
                "name": "active-arrow-button",
                "description": "Defines whether the arrow button should have the active state styles or not.",
                "value": { "type": "boolean" }
              },
              {
                "name": "design",
                "description": "Defines the component design.",
                "value": {
                  "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\""
                }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the user clicks on the default action."
              },
              {
                "name": "arrow-click",
                "description": "Fired when the user clicks on the arrow action."
              }
            ]
          }
        },
        {
          "name": "ui5-li",
          "description": "The `ui5-li` represents the simplest type of item for a `ui5-list`.\n\nThis is a list item,\nproviding the most common use cases such as `text`,\n`image` and `icon`.\n---\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n- **imageContent** - **Note:** While the slot allows option for setting custom avatar, to match the\ndesign guidelines, please use the `ui5-avatar` with it's default size - S.\n\n**Note:** If bigger `ui5-avatar` needs to be used, then the size of the\n`ui5-li` should be customized in order to fit.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the list item\n- **description** - Used to style the description of the list item\n- **additional-text** - Used to style the additionalText of the list item\n- **icon** - Used to style the icon of the list item\n- **native-li** - Used to style the main li tag of the list item\n- **content** - Used to style the content area of the list item\n- **detail-button** - Used to style the button rendered when the list item is of type detail\n- **delete-button** - Used to style the button rendered when the list item is in delete mode\n- **radio** - Used to style the radio button rendered when the list item is in single selection mode\n- **checkbox** - Used to style the checkbox rendered when the list item is in multiple selection mode",
          "doc-url": "",
          "attributes": [
            {
              "name": "description",
              "description": "Defines the description displayed right under the item text, if such is present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon",
              "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon-end",
              "description": "Defines whether the `icon` should be displayed in the beginning of the list item or in the end.\n\n**Note:** If `image` is set, the `icon` would be displayed after the `image`.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "image",
              "description": "Defines the `image` source URI.\n\n**Note:** The `image` would be displayed in the beginning of the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the `additionalText`, displayed in the end of the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text-state",
              "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the text alternative of the component.\nNote: If not provided a default text alternative will be set, if present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "navigated",
              "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip that would be displayed for the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "highlight",
              "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            },
            {
              "name": "imageContent",
              "description": "**Note:** While the slot allows option for setting custom avatar, to match the\ndesign guidelines, please use the `ui5-avatar` with it's default size - S.\n\n**Note:** If bigger `ui5-avatar` needs to be used, then the size of the\n`ui5-li` should be customized in order to fit."
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "description": "Fired when the user clicks on the detail button when type is `Detail`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "description",
                "description": "Defines the description displayed right under the item text, if such is present.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "icon-end",
                "description": "Defines whether the `icon` should be displayed in the beginning of the list item or in the end.\n\n**Note:** If `image` is set, the `icon` would be displayed after the `image`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "image",
                "description": "Defines the `image` source URI.\n\n**Note:** The `image` would be displayed in the beginning of the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the `additionalText`, displayed in the end of the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text-state",
                "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the text alternative of the component.\nNote: If not provided a default text alternative will be set, if present.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "navigated",
                "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip that would be displayed for the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "highlight",
                "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "detail-click",
                "description": "Fired when the user clicks on the detail button when type is `Detail`."
              }
            ]
          }
        },
        {
          "name": "ui5-step-input",
          "description": "### Overview\n\nThe `ui5-step-input` consists of an input field and buttons with icons to increase/decrease the value\nwith the predefined step.\n\nThe user can change the value of the component by pressing the increase/decrease buttons,\nby typing a number directly, by using the keyboard up/down and page up/down,\nor by using the mouse scroll wheel. Decimal values are supported.\n\n### Usage\n\nThe default step is 1 but the app developer can set a different one.\n\nApp developers can set a maximum and minimum value for the `StepInput`.\nThe increase/decrease button and the up/down keyboard navigation become disabled when\nthe value reaches the max/min or a new value is entered from the input which is greater/less than the max/min.\n\n#### When to use:\n\n- To adjust amounts, quantities, or other values quickly.\n- To adjust values for a specific step.\n\n#### When not to use:\n\n- To enter a static number (for example, postal code, phone number, or ID). In this case,\nuse the regular `ui5-input` instead.\n- To display a value that rarely needs to be adjusted and does not pertain to a particular step.\nIn this case, use the regular `ui5-input` instead.\n- To enter dates and times. In this case, use date/time related components instead.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/StepInput.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by pressing Enter or on focusout.\n- **value-state-change** - Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state.",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines a value of the component.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "min",
              "description": "Defines a minimum value of the component.",
              "value": { "type": "number | undefined", "default": "undefined" }
            },
            {
              "name": "max",
              "description": "Defines a maximum value of the component.",
              "value": { "type": "number | undefined", "default": "undefined" }
            },
            {
              "name": "step",
              "description": "Defines a step of increasing/decreasing the value of the component.",
              "value": { "type": "number", "default": "1" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Determines whether the component is displayed as disabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Determines whether the component is displayed as read-only.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-precision",
              "description": "Determines the number of digits after the decimal point of the component.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\n\n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed,\nwhen the component is in `Information`, `Warning` or `Error` value state."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by pressing Enter or on focusout."
            },
            {
              "name": "value-state-change",
              "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines a value of the component.",
                "value": { "type": "number" }
              },
              {
                "name": "min",
                "description": "Defines a minimum value of the component.",
                "value": { "type": "number | undefined" }
              },
              {
                "name": "max",
                "description": "Defines a maximum value of the component.",
                "value": { "type": "number | undefined" }
              },
              {
                "name": "step",
                "description": "Defines a step of increasing/decreasing the value of the component.",
                "value": { "type": "number" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Determines whether the component is displayed as disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Determines whether the component is displayed as read-only.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "value-precision",
                "description": "Determines the number of digits after the decimal point of the component.",
                "value": { "type": "number" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by pressing Enter or on focusout."
              },
              {
                "name": "value-state-change",
                "description": "Fired before the value state of the component is updated internally.\nThe event is preventable, meaning that if it's default action is\nprevented, the component will not update the value state."
              }
            ]
          }
        },
        {
          "name": "ui5-suggestion-group-item",
          "description": "The `ui5-suggestion-group-item` is type of suggestion item,\nthat can be used to split the `ui5-input` suggestions into groups.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the `ui5-suggestion-group-item`.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the `ui5-suggestion-group-item`.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-suggestion-item",
          "description": "The `ui5-suggestion-item` represents the suggestion item of the `ui5-input`.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the item.\nAvailable options are `Active` (by default), `Inactive` and `Detail`.\n\n**Note:** When set to `Active`, the item will provide visual response upon press and hover,\nwhile when `Inactive` or `Detail` - will not.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "description",
              "description": "Defines the description displayed right under the item text, if such is present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon",
              "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon-end",
              "description": "Defines whether the `icon` should be displayed in the beginning of the item or in the end.\n\n**Note:** If `image` is set, the `icon` would be displayed after the `image`.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "image",
              "description": "Defines the `image` source URI.\n\n**Note:** The `image` would be displayed in the beginning of the item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the `additionalText`, displayed in the end of the item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text-state",
              "description": "Defines the state of the `additionalText`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the item.\nAvailable options are `Active` (by default), `Inactive` and `Detail`.\n\n**Note:** When set to `Active`, the item will provide visual response upon press and hover,\nwhile when `Inactive` or `Detail` - will not.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "description",
                "description": "Defines the description displayed right under the item text, if such is present.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "Defines the `icon` source URI.\n\n**Note:**\nSAP-icons font provides numerous built-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "icon-end",
                "description": "Defines whether the `icon` should be displayed in the beginning of the item or in the end.\n\n**Note:** If `image` is set, the `icon` would be displayed after the `image`.",
                "value": { "type": "boolean" }
              },
              {
                "name": "image",
                "description": "Defines the `image` source URI.\n\n**Note:** The `image` would be displayed in the beginning of the item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the `additionalText`, displayed in the end of the item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text-state",
                "description": "Defines the state of the `additionalText`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-switch",
          "description": "### Overview\nThe `ui5-switch` component is used for changing between binary states.\n\nThe component can display texts, that will be switched, based on the component state, via the `textOn` and `textOff` properties,\nbut texts longer than 3 letters will be cutted off.\n\nHowever, users are able to customize the width of `ui5-switch` with pure CSS (`<ui5-switch style=\"width: 200px\">`), and set widths, depending on the texts they would use.\n\nNote: the component would not automatically stretch to fit the whole text width.\n\n### Keyboard Handling\nThe state can be changed by pressing the Space and Enter keys.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Switch\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the component checked state changes.\n\n### **CSS Parts:**\n - **slider** - Used to style the track, where the handle is being slid\n- **text-on** - Used to style the `textOn` property text\n- **text-off** - Used to style the `textOff` property text\n- **handle** - Used to style the handle of the switch",
          "doc-url": "",
          "attributes": [
            {
              "name": "design",
              "description": "Defines the component design.\n\n**Note:** If `Graphical` type is set,\npositive and negative icons will replace the `textOn` and `textOff`.",
              "value": {
                "type": "\"Textual\" | \"Graphical\"",
                "default": "\"Textual\""
              }
            },
            {
              "name": "checked",
              "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking the component, or by pressing the `Enter` or `Space` key.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "text-on",
              "description": "Defines the text, displayed when the component is checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "text-off",
              "description": "Defines the text, displayed when the component is not checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Sets the accessible ARIA name of the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.\n\n**Note:** If applicable an external label reference should always be the preferred option to provide context to the `ui5-switch` component over a tooltip.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the component checked state changes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "design",
                "description": "Defines the component design.\n\n**Note:** If `Graphical` type is set,\npositive and negative icons will replace the `textOn` and `textOff`.",
                "value": { "type": "\"Textual\" | \"Graphical\"" }
              },
              {
                "name": "checked",
                "description": "Defines if the component is checked.\n\n**Note:** The property can be changed with user interaction,\neither by cliking the component, or by pressing the `Enter` or `Space` key.",
                "value": { "type": "boolean" }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\n\n**Note:** A disabled component is noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "text-on",
                "description": "Defines the text, displayed when the component is checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
                "value": { "type": "string" }
              },
              {
                "name": "text-off",
                "description": "Defines the text, displayed when the component is not checked.\n\n**Note:** We recommend using short texts, up to 3 letters (larger texts would be cut off).",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Sets the accessible ARIA name of the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.\n\n**Note**: We recommend that you set an accessibleNameRef pointing to an external label or at least an `accessibleName`.\nProviding an `accessibleNameRef` or an `accessibleName` is mandatory in the cases when `textOn` and `textOff` properties aren't set.",
                "value": { "type": "string" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.\n\n**Note:** If applicable an external label reference should always be the preferred option to provide context to the `ui5-switch` component over a tooltip.",
                "value": { "type": "string" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the component checked state changes."
              }
            ]
          }
        },
        {
          "name": "ui5-tab",
          "description": "The `ui5-tab` represents a selectable item inside a `ui5-tabcontainer`.\nIt defines both the item in the tab strip (top part of the `ui5-tabcontainer`) and the\ncontent that is presented to the user once the tab is selected.\n---\n\n\n### **Methods:**\n - **getTabInStripDomRef(): _ITab | null_** - Returns the DOM reference of the tab that is placed in the header.\n\n**Note:** Tabs, placed in the `subTabs` slot of other tabs are not shown in the header. Calling this method on such tabs will return `null`.\n\n**Note:** If you need a DOM ref to the tab content please use the `getDomRef` method.\n\n### **Slots:**\n - **default** - Holds the content associated with this tab.\n- **subTabs** - Defines hierarchies with nested sub tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "The text to be displayed for the item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Disabled tabs can't be selected.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "additional-text",
              "description": "Represents the \"additionalText\" text, which is displayed in the tab. In the cases when in the same time there are tabs with icons and tabs without icons, if a tab has no icon the \"additionalText\" is displayed larger.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon",
              "description": "Defines the icon source URI to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous built-in icons.\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "design",
              "description": "Defines the component's design color.\n\nThe design is applied to:\n\n- the component icon\n- the `text` when the component overflows\n- the tab selection line\n\nAvailable designs are: `\"Default\"`, `\"Neutral\"`, `\"Positive\"`, `\"Critical\"` and `\"Negative\"`.\n\n**Note:** The design depends on the current theme.",
              "value": {
                "type": "\"Neutral\" | \"Positive\" | \"Negative\" | \"Critical\" | \"Default\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "selected",
              "description": "Specifies if the component is selected.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Holds the content associated with this tab."
            },
            {
              "name": "subTabs",
              "description": "Defines hierarchies with nested sub tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "The text to be displayed for the item.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Disabled tabs can't be selected.",
                "value": { "type": "boolean" }
              },
              {
                "name": "additional-text",
                "description": "Represents the \"additionalText\" text, which is displayed in the tab. In the cases when in the same time there are tabs with icons and tabs without icons, if a tab has no icon the \"additionalText\" is displayed larger.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "Defines the icon source URI to be displayed as graphical element within the component.\nThe SAP-icons font provides numerous built-in icons.\nSee all the available icons in the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "design",
                "description": "Defines the component's design color.\n\nThe design is applied to:\n\n- the component icon\n- the `text` when the component overflows\n- the tab selection line\n\nAvailable designs are: `\"Default\"`, `\"Neutral\"`, `\"Positive\"`, `\"Critical\"` and `\"Negative\"`.\n\n**Note:** The design depends on the current theme.",
                "value": {
                  "type": "\"Neutral\" | \"Positive\" | \"Negative\" | \"Critical\" | \"Default\""
                }
              },
              {
                "name": "selected",
                "description": "Specifies if the component is selected.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-tabcontainer",
          "description": "### Overview\n\nThe `ui5-tabcontainer` represents a collection of tabs with associated content.\nNavigation through the tabs changes the content display of the currently active content area.\nA tab can be labeled with text only, or icons with text.\n\n### Structure\n\nThe `ui5-tabcontainer` can hold two types of entities:\n\n- `ui5-tab` - contains all the information on an item (text and icon)\n- `ui5-tab-separator` - used to separate tabs with a line\n\n### Hierarchies\nMultiple sub tabs could be placed underneath one main tab. Nesting allows deeper hierarchies with indentations\nto indicate the level of each nested tab. When a tab has both sub tabs and own content its click area is split\nto allow the user to display the content or alternatively to expand / collapse the list of sub tabs.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TabContainer.js\";`\n\n`import \"@ui5/webcomponents/dist/Tab.js\";` (for `ui5-tab`)\n\n`import \"@ui5/webcomponents/dist/TabSeparator.js\";` (for `ui5-tab-separator`)\n---\n\n\n### **Events:**\n - **tab-select** - Fired when a tab is selected.\n\n### **Slots:**\n - **default** - Defines the tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design.\n- **overflowButton** - Defines the button which will open the overflow menu. If nothing is provided to this slot,\nthe default button will be used.\n- **startOverflowButton** - Defines the button which will open the start overflow menu if available. If nothing is provided to this slot,\nthe default button will be used.\n\n### **CSS Parts:**\n - **content** - Used to style the content of the component\n- **tabstrip** - Used to style the tabstrip of the component",
          "doc-url": "",
          "attributes": [
            {
              "name": "fixed",
              "description": "Defines whether the tabs are in a fixed state that is not\nexpandable/collapsible by user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "collapsed",
              "description": "Defines whether the tab content is collapsed.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "show-overflow",
              "description": "Defines whether the overflow select list is displayed.\n\nThe overflow select list represents a list, where all tabs are displayed\nso that it's easier for the user to select a specific tab.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tab-layout",
              "description": "Defines the alignment of the content and the `additionalText` of a tab.\n\n**Note:**\nThe content and the `additionalText` would be displayed vertically by default,\nbut when set to `Inline`, they would be displayed horizontally.",
              "value": {
                "type": "\"Standard\" | \"Inline\"",
                "default": "\"Standard\""
              }
            },
            {
              "name": "tabs-overflow-mode",
              "description": "Defines the overflow mode of the header (the tab strip). If you have a large number of tabs, only the tabs that can fit on screen will be visible.\nAll other tabs that can 't fit on the screen are available in an overflow tab \"More\".\n\n**Note:**\nOnly one overflow at the end would be displayed by default,\nbut when set to `StartAndEnd`, there will be two overflows on both ends, and tab order will not change on tab selection.",
              "value": {
                "type": "\"End\" | \"StartAndEnd\"",
                "default": "\"End\""
              }
            },
            {
              "name": "header-background-design",
              "description": "Sets the background color of the Tab Container's header as `Solid`, `Transparent`, or `Translucent`.",
              "value": {
                "type": "\"Transparent\" | \"Solid\" | \"Translucent\"",
                "default": "\"Solid\""
              }
            },
            {
              "name": "content-background-design",
              "description": "Sets the background color of the Tab Container's content as `Solid`, `Transparent`, or `Translucent`.",
              "value": {
                "type": "\"Transparent\" | \"Solid\" | \"Translucent\"",
                "default": "\"Solid\""
              }
            },
            {
              "name": "all-items",
              "description": "Returns all slotted tabs and their subTabs in a flattened array.\nThe order of tabs is depth-first.",
              "value": { "type": "any", "default": "[]" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the tabs.\n\n**Note:** Use `ui5-tab` and `ui5-tab-separator` for the intended design."
            },
            {
              "name": "overflowButton",
              "description": "Defines the button which will open the overflow menu. If nothing is provided to this slot,\nthe default button will be used."
            },
            {
              "name": "startOverflowButton",
              "description": "Defines the button which will open the start overflow menu if available. If nothing is provided to this slot,\nthe default button will be used."
            }
          ],
          "events": [
            {
              "name": "tab-select",
              "description": "Fired when a tab is selected."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "fixed",
                "description": "Defines whether the tabs are in a fixed state that is not\nexpandable/collapsible by user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "collapsed",
                "description": "Defines whether the tab content is collapsed.",
                "value": { "type": "boolean" }
              },
              {
                "name": "show-overflow",
                "description": "Defines whether the overflow select list is displayed.\n\nThe overflow select list represents a list, where all tabs are displayed\nso that it's easier for the user to select a specific tab.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tab-layout",
                "description": "Defines the alignment of the content and the `additionalText` of a tab.\n\n**Note:**\nThe content and the `additionalText` would be displayed vertically by default,\nbut when set to `Inline`, they would be displayed horizontally.",
                "value": { "type": "\"Standard\" | \"Inline\"" }
              },
              {
                "name": "tabs-overflow-mode",
                "description": "Defines the overflow mode of the header (the tab strip). If you have a large number of tabs, only the tabs that can fit on screen will be visible.\nAll other tabs that can 't fit on the screen are available in an overflow tab \"More\".\n\n**Note:**\nOnly one overflow at the end would be displayed by default,\nbut when set to `StartAndEnd`, there will be two overflows on both ends, and tab order will not change on tab selection.",
                "value": { "type": "\"End\" | \"StartAndEnd\"" }
              },
              {
                "name": "header-background-design",
                "description": "Sets the background color of the Tab Container's header as `Solid`, `Transparent`, or `Translucent`.",
                "value": {
                  "type": "\"Transparent\" | \"Solid\" | \"Translucent\""
                }
              },
              {
                "name": "content-background-design",
                "description": "Sets the background color of the Tab Container's content as `Solid`, `Transparent`, or `Translucent`.",
                "value": {
                  "type": "\"Transparent\" | \"Solid\" | \"Translucent\""
                }
              },
              {
                "name": "all-items",
                "description": "Returns all slotted tabs and their subTabs in a flattened array.\nThe order of tabs is depth-first.",
                "value": { "type": "any" }
              }
            ],
            "events": [
              {
                "name": "tab-select",
                "description": "Fired when a tab is selected."
              }
            ]
          }
        },
        {
          "name": "ui5-tab-separator",
          "description": "The `ui5-tab-separator` represents a vertical line to separate tabs inside a `ui5-tabcontainer`.\n---\n\n\n### **Methods:**\n - **getTabInStripDomRef(): _ITab | null_** - Returns the DOM reference of the separator that is placed in the header.\n\n**Note:** Tabs and separators, placed in the `subTabs` slot of other tabs are not shown in the header. Calling this method on such tabs or separators will return `null`.",
          "doc-url": "",
          "attributes": [],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "getTabInStripDomRef",
                "description": "Returns the DOM reference of the separator that is placed in the header.\n\n**Note:** Tabs and separators, placed in the `subTabs` slot of other tabs are not shown in the header. Calling this method on such tabs or separators will return `null`.",
                "value": {}
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-table",
          "description": "### Overview\n\nThe `ui5-table` component provides a set of sophisticated and convenient functions for responsive table design.\nIt provides a comprehensive set of features for displaying and dealing with vast amounts of data.\n\nTo render the `Table` properly, the order of the `columns` should match with the\norder of the item `cells` in the `rows`.\n\nDesktop and tablet devices are supported.\nOn tablets, special consideration should be given to the number of visible columns\nand rows due to the limited performance of some devices.\n\n### Selection\nTo benefit from the selection mechanism of `ui5-table` component, you can use the available selection modes:\n`SingleSelect` and `MultiSelect`.\n\nIn additition to the used mode, you can also specify the `ui5-table-row` type choosing between\n`Active` or `Inactive`.\n\nIn `SingleSelect` mode, you can select both an `Active` and `Inactive` row via mouse or\nby pressing the `Space` or `Enter` keys.\n\nIn `MultiSelect` mode, you can select both an `Active` and `Inactive` row by pressing the\n`Space` key when a row is on focus or via mouse click over the selection checkbox of the row.\nIn order to select all the available rows at once, you can use the selection checkbox presented in the table's header.\n\n**Note:** Currently, when a column is shown as a pop-in, the visual indication for selection is not presented over it.\n\n### Keyboard Handling\n\n#### Fast Navigation\nThis component provides a build in fast navigation group which can be used via [F6] / [Shift] + [F6] / [Ctrl] + [Alt/Option] / [Down] or [Ctrl] + [Alt/Option] + [Up].\nIn order to use this functionality, you need to import the following module:\n`import \"@ui5/webcomponents-base/dist/features/F6Navigation.js\"`\n\nFurthermore, you can interact with `ui5-table` via the following keys.\n\n- [F7] - If focus is on an interactive control inside an item, moves focus to the corresponding item.\n- [Ctrl]+[A] - Selects all items, if MultiSelect mode is enabled.\n- [Home]/[End] - Focuses the first/last item.\n- [Page Up]/[Page Down] - Moves focus up/down by page size (20 items by default).\n- [Alt]+[Down]/[Up] - Switches focus between header, last focused item, and More button (if applies) in either direction.\n- [Shift]+[Down]/[Up] - Selects the next/previous item in a MultiSelect table, if the current item is selected (Range selection). Otherwise, deselects them (Range deselection).\n- [Shift]+[Home]/[End] - Range selection to the first/last item of the List.\n- [Ctrl]+[Home]/[End] - Same behavior as HOME & END.\n\n### ES6 Module Import\n\n- `import \"@ui5/webcomponents/dist/Table.js\";`\n- `import \"@ui5/webcomponents/dist/TableColumn.js\";` (`ui5-table-column`)\n- `import \"@ui5/webcomponents/dist/TableRow.js\";` (`ui5-table-row`)\n- `import \"@ui5/webcomponents/dist/TableGroupRow.js\";` (`ui5-table-group-row`)\n- `import \"@ui5/webcomponents/dist/TableCell.js\";` (`ui5-table-cell`)\n---\n\n\n### **Events:**\n - **row-click** - Fired when a row in `Active` mode is clicked or `Enter` key is pressed.\n- **popin-change** - Fired when `ui5-table-column` is shown as a pop-in instead of hiding it.\n- **load-more** - Fired when the user presses the `More` button or scrolls to the table's end.\n\n**Note:** The event will be fired if `growing` is set to `Button` or `Scroll`.\n- **selection-change** - Fired when selection is changed by user interaction\nin `SingleSelect` and `MultiSelect` modes.\n\n### **Slots:**\n - **default** - Defines the component rows.\n\n**Note:** Use `ui5-table-row` for the intended design.\n- **columns** - Defines the configuration for the columns of the component.\n\n**Note:** Use `ui5-table-column` for the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "no-data-text",
              "description": "Defines the text that will be displayed when there is no data and `hideNoData` is not present.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "growing-button-text",
              "description": "Defines the text that will be displayed inside the growing button at the bottom of the table,\nmeant for loading more rows upon press.\n\n**Note:** If not specified a built-in text will be displayed.\n\n**Note:** This property takes effect if `growing` is set to `Button`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "growing-button-subtext",
              "description": "Defines the subtext that will be displayed under the `growingButtonText`.\n\n**Note:** This property takes effect if `growing` is set to `Button`.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "hide-no-data",
              "description": "Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "growing",
              "description": "Defines whether the table will have growing capability either by pressing a `More` button,\nor via user scroll. In both cases `load-more` event is fired.\n\nAvailable options:\n\n`Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more` event.\n\n`Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;\n\n`None` (default) - The growing is off.\n\n**Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer,\nand the component will fallback to `growing=\"Button\"`.",
              "value": {
                "type": "\"None\" | \"Button\" | \"Scroll\"",
                "default": "\"None\""
              }
            },
            {
              "name": "busy",
              "description": "Defines if the table is in busy state.\n\nIn this state the component's opacity is reduced\nand busy indicator is displayed at the bottom of the table.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "busy-delay",
              "description": "Defines the delay in milliseconds, after which the busy indicator will show up for this component.",
              "value": { "type": "number", "default": "1000" }
            },
            {
              "name": "sticky-column-header",
              "description": "Determines whether the column headers remain fixed at the top of the page during\nvertical scrolling as long as the Web Component is in the viewport.\n\n**Restrictions:**\n\n- Browsers that do not support this feature:\n\n- Internet Explorer\n- Microsoft Edge lower than version 41 (EdgeHTML 16)\n- Mozilla Firefox lower than version 59\n\n- Scrolling behavior:\n\n- If the Web Component is placed in layout containers that have the `overflow: hidden`\nor `overflow: auto` style definition, this can\nprevent the sticky elements of the Web Component from becoming fixed at the top of the viewport.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "mode",
              "description": "Defines the mode of the component.",
              "value": {
                "type": "\"None\" | \"SingleSelect\" | \"MultiSelect\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component rows.\n\n**Note:** Use `ui5-table-row` for the intended design."
            },
            {
              "name": "columns",
              "description": "Defines the configuration for the columns of the component.\n\n**Note:** Use `ui5-table-column` for the intended design."
            }
          ],
          "events": [
            {
              "name": "row-click",
              "description": "Fired when a row in `Active` mode is clicked or `Enter` key is pressed."
            },
            {
              "name": "popin-change",
              "description": "Fired when `ui5-table-column` is shown as a pop-in instead of hiding it."
            },
            {
              "name": "load-more",
              "description": "Fired when the user presses the `More` button or scrolls to the table's end.\n\n**Note:** The event will be fired if `growing` is set to `Button` or `Scroll`."
            },
            {
              "name": "selection-change",
              "description": "Fired when selection is changed by user interaction\nin `SingleSelect` and `MultiSelect` modes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "no-data-text",
                "description": "Defines the text that will be displayed when there is no data and `hideNoData` is not present.",
                "value": { "type": "string" }
              },
              {
                "name": "growing-button-text",
                "description": "Defines the text that will be displayed inside the growing button at the bottom of the table,\nmeant for loading more rows upon press.\n\n**Note:** If not specified a built-in text will be displayed.\n\n**Note:** This property takes effect if `growing` is set to `Button`.",
                "value": { "type": "string" }
              },
              {
                "name": "growing-button-subtext",
                "description": "Defines the subtext that will be displayed under the `growingButtonText`.\n\n**Note:** This property takes effect if `growing` is set to `Button`.",
                "value": { "type": "string" }
              },
              {
                "name": "hide-no-data",
                "description": "Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.",
                "value": { "type": "boolean" }
              },
              {
                "name": "growing",
                "description": "Defines whether the table will have growing capability either by pressing a `More` button,\nor via user scroll. In both cases `load-more` event is fired.\n\nAvailable options:\n\n`Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more` event.\n\n`Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;\n\n`None` (default) - The growing is off.\n\n**Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer,\nand the component will fallback to `growing=\"Button\"`.",
                "value": { "type": "\"None\" | \"Button\" | \"Scroll\"" }
              },
              {
                "name": "busy",
                "description": "Defines if the table is in busy state.\n\nIn this state the component's opacity is reduced\nand busy indicator is displayed at the bottom of the table.",
                "value": { "type": "boolean" }
              },
              {
                "name": "busy-delay",
                "description": "Defines the delay in milliseconds, after which the busy indicator will show up for this component.",
                "value": { "type": "number" }
              },
              {
                "name": "sticky-column-header",
                "description": "Determines whether the column headers remain fixed at the top of the page during\nvertical scrolling as long as the Web Component is in the viewport.\n\n**Restrictions:**\n\n- Browsers that do not support this feature:\n\n- Internet Explorer\n- Microsoft Edge lower than version 41 (EdgeHTML 16)\n- Mozilla Firefox lower than version 59\n\n- Scrolling behavior:\n\n- If the Web Component is placed in layout containers that have the `overflow: hidden`\nor `overflow: auto` style definition, this can\nprevent the sticky elements of the Web Component from becoming fixed at the top of the viewport.",
                "value": { "type": "boolean" }
              },
              {
                "name": "mode",
                "description": "Defines the mode of the component.",
                "value": {
                  "type": "\"None\" | \"SingleSelect\" | \"MultiSelect\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "row-click",
                "description": "Fired when a row in `Active` mode is clicked or `Enter` key is pressed."
              },
              {
                "name": "popin-change",
                "description": "Fired when `ui5-table-column` is shown as a pop-in instead of hiding it."
              },
              {
                "name": "load-more",
                "description": "Fired when the user presses the `More` button or scrolls to the table's end.\n\n**Note:** The event will be fired if `growing` is set to `Button` or `Scroll`."
              },
              {
                "name": "selection-change",
                "description": "Fired when selection is changed by user interaction\nin `SingleSelect` and `MultiSelect` modes."
              }
            ]
          }
        },
        {
          "name": "ui5-table-cell",
          "description": "### Overview\n\nThe `ui5-table-cell` component defines the structure of the data in a single `ui5-table` cell.\n---\n\n\n### **Slots:**\n - **default** - Specifies the content of the component.\n\n### **CSS Parts:**\n - **cell** - Used to style the native `td` element",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Specifies the content of the component."
            }
          ],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "ui5-table-column",
          "description": "### Overview\n\nThe `ui5-table-column` component allows to define column specific properties that are applied\nwhen rendering the `ui5-table` component.\n---\n\n\n### **Slots:**\n - **default** - Defines the content of the column header\n\n### **CSS Parts:**\n - **column** - Used to style the native `th` element",
          "doc-url": "",
          "attributes": [
            {
              "name": "min-width",
              "description": "Defines the minimum table width required to display this column. By default it is always displayed.\n\nThe responsive behavior of the `ui5-table` is determined by this property. As an example, by setting\n`minWidth` property to `400` sets the minimum width to 400 pixels, and\tshows this column on tablet (and desktop) but hides it on mobile.\n\nFor further responsive design options, see `demandPopin` property.",
              "value": { "type": "number", "default": "Infinity" }
            },
            {
              "name": "popin-text",
              "description": "The text for the column when it pops in.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "demand-popin",
              "description": "According to your `minWidth` settings, the component can be hidden\nin different screen sizes.\n\nSetting this property to `true`, shows this column as pop-in instead of hiding it.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "popin-display",
              "description": "Defines how the popin row is displayed.\n\n**The available values are:**\n\n- `Block`\n- `Inline`",
              "value": {
                "type": "\"Inline\" | \"Block\"",
                "default": "\"Block\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the content of the column header"
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "min-width",
                "description": "Defines the minimum table width required to display this column. By default it is always displayed.\n\nThe responsive behavior of the `ui5-table` is determined by this property. As an example, by setting\n`minWidth` property to `400` sets the minimum width to 400 pixels, and\tshows this column on tablet (and desktop) but hides it on mobile.\n\nFor further responsive design options, see `demandPopin` property.",
                "value": { "type": "number" }
              },
              {
                "name": "popin-text",
                "description": "The text for the column when it pops in.",
                "value": { "type": "string" }
              },
              {
                "name": "demand-popin",
                "description": "According to your `minWidth` settings, the component can be hidden\nin different screen sizes.\n\nSetting this property to `true`, shows this column as pop-in instead of hiding it.",
                "value": { "type": "boolean" }
              },
              {
                "name": "popin-display",
                "description": "Defines how the popin row is displayed.\n\n**The available values are:**\n\n- `Block`\n- `Inline`",
                "value": { "type": "\"Inline\" | \"Block\"" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-table-group-row",
          "description": "### Overview\n\nThe `ui5-table-group-row` component represents a group row in the `ui5-table`.\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n\n### **CSS Parts:**\n - **group-row** - Used to style the native `tr` element",
          "doc-url": "",
          "attributes": [],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": { "properties": [], "events": [] }
        },
        {
          "name": "ui5-table-row",
          "description": "### Overview\n\nThe `ui5-table-row` component represents a row in the `ui5-table`.\n---\n\n\n### **Slots:**\n - **default** - Defines the cells of the component.\n\n**Note:** Use `ui5-table-cell` for the intended design.\n\n### **CSS Parts:**\n - **row** - Used to style the native `tr` element\n- **popin-row** - Used to style the `tr` element when a row pops in",
          "doc-url": "",
          "attributes": [
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the component.\n\n**Note:** When set to `Active`, the item will provide visual response upon press,\nwhile with type `Inactive`-will not.",
              "value": {
                "type": "\"Inactive\" | \"Active\"",
                "default": "\"Inactive\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the row's selected state.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "navigated",
              "description": "Indicates if the table row is navigated.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the cells of the component.\n\n**Note:** Use `ui5-table-cell` for the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the component.\n\n**Note:** When set to `Active`, the item will provide visual response upon press,\nwhile with type `Inactive`-will not.",
                "value": { "type": "\"Inactive\" | \"Active\"" }
              },
              {
                "name": "selected",
                "description": "Defines the row's selected state.",
                "value": { "type": "boolean" }
              },
              {
                "name": "navigated",
                "description": "Indicates if the table row is navigated.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-textarea",
          "description": "### Overview\n\nThe `ui5-textarea` component is used to enter multiple lines of text.\n\nWhen empty, it can hold a placeholder similar to a `ui5-input`.\nYou can define the rows of the `ui5-textarea` and also determine specific behavior when handling long texts.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TextArea.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the text has changed and the focus leaves the component.\n- **input** - Fired when the value of the component changes at each keystroke or when\nsomething is pasted.\n- **select** - Fired when some text has been selected.\n- **scroll** - Fired when textarea is scrolled.\n\n### **Slots:**\n - **valueStateMessage** - Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n \n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed if the component has\n`valueState` of type `Information`, `Warning` or `Error`.\n\n### **CSS Parts:**\n - **textarea** - Used to style the native textarea",
          "doc-url": "",
          "attributes": [
            {
              "name": "value",
              "description": "Defines the value of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "disabled",
              "description": "Indicates whether the user can interact with the component or not.\n\n**Note:** A disabled component is completely noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "required",
              "description": "Defines whether the component is required.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "placeholder",
              "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.\n\n**Note:** If `maxlength` property is set,\nthe component turns into \"Warning\" state once the characters exceeds the limit.\nIn this case, only the \"Error\" state is considered and can be applied.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "rows",
              "description": "Defines the number of visible text lines for the component.\n\n**Notes:**\n\n- If the `growing` property is enabled, this property defines the minimum rows to be displayed\nin the textarea.\n- The CSS `height` property wins over the `rows` property, if both are set.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "maxlength",
              "description": "Defines the maximum number of characters that the `value` can have.",
              "value": { "type": "number | undefined", "default": "undefined" }
            },
            {
              "name": "show-exceeded-text",
              "description": "Determines whether the characters exceeding the maximum allowed character count are visible\nin the component.\n\nIf set to `false`, the user is not allowed to enter more characters than what is set in the\n`maxlength` property.\nIf set to `true` the characters exceeding the `maxlength` value are selected on\npaste and the counter below the component displays their number.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "growing",
              "description": "Enables the component to automatically grow and shrink dynamically with its content.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "growing-max-lines",
              "description": "Defines the maximum number of lines that the component can grow.",
              "value": { "type": "number", "default": "0" }
            },
            {
              "name": "name",
              "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the textarea.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "valueStateMessage",
              "description": "Defines the value state message that will be displayed as pop up under the component.\nThe value state message slot should contain only one root element.\n \n**Note:** If not specified, a default text (in the respective language) will be displayed.\n\n**Note:** The `valueStateMessage` would be displayed if the component has\n`valueState` of type `Information`, `Warning` or `Error`."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the text has changed and the focus leaves the component."
            },
            {
              "name": "input",
              "description": "Fired when the value of the component changes at each keystroke or when\nsomething is pasted."
            },
            {
              "name": "select",
              "description": "Fired when some text has been selected."
            },
            {
              "name": "scroll",
              "description": "Fired when textarea is scrolled."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "value",
                "description": "Defines the value of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "disabled",
                "description": "Indicates whether the user can interact with the component or not.\n\n**Note:** A disabled component is completely noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component is not editable,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "required",
                "description": "Defines whether the component is required.",
                "value": { "type": "boolean" }
              },
              {
                "name": "placeholder",
                "description": "Defines a short hint intended to aid the user with data entry when the component has no value.",
                "value": { "type": "string" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.\n\n**Note:** If `maxlength` property is set,\nthe component turns into \"Warning\" state once the characters exceeds the limit.\nIn this case, only the \"Error\" state is considered and can be applied.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "rows",
                "description": "Defines the number of visible text lines for the component.\n\n**Notes:**\n\n- If the `growing` property is enabled, this property defines the minimum rows to be displayed\nin the textarea.\n- The CSS `height` property wins over the `rows` property, if both are set.",
                "value": { "type": "number" }
              },
              {
                "name": "maxlength",
                "description": "Defines the maximum number of characters that the `value` can have.",
                "value": { "type": "number | undefined" }
              },
              {
                "name": "show-exceeded-text",
                "description": "Determines whether the characters exceeding the maximum allowed character count are visible\nin the component.\n\nIf set to `false`, the user is not allowed to enter more characters than what is set in the\n`maxlength` property.\nIf set to `true` the characters exceeding the `maxlength` value are selected on\npaste and the counter below the component displays their number.",
                "value": { "type": "boolean" }
              },
              {
                "name": "growing",
                "description": "Enables the component to automatically grow and shrink dynamically with its content.",
                "value": { "type": "boolean" }
              },
              {
                "name": "growing-max-lines",
                "description": "Defines the maximum number of lines that the component can grow.",
                "value": { "type": "number" }
              },
              {
                "name": "name",
                "description": "Determines the name with which the component will be submitted in an HTML form.\n\n**Important:** For the `name` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n\n**Note:** When set, a native `input` HTML element\nwill be created inside the component so that it can be submitted as\npart of an HTML form. Do not use this property unless you need to submit a form.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the textarea.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the text has changed and the focus leaves the component."
              },
              {
                "name": "input",
                "description": "Fired when the value of the component changes at each keystroke or when\nsomething is pasted."
              },
              {
                "name": "select",
                "description": "Fired when some text has been selected."
              },
              {
                "name": "scroll",
                "description": "Fired when textarea is scrolled."
              }
            ]
          }
        },
        {
          "name": "ui5-time-picker",
          "description": "### Overview\nThe `ui5-time-picker` component provides an input field with assigned clocks which are opened on user action.\nThe `ui5-time-picker` allows users to select a localized time using touch, mouse, or keyboard input.\nIt consists of two parts: the time input field and the clocks.\n\n### Usage\nThe user can enter a time by:\n\n- Using the clocks that are displayed in a popup\n- Typing it in directly in the input field\n\nWhen the user makes an entry and chooses the enter key, the clocks show the corresponding time (hours, minutes and seconds separately).\nWhen the user directly triggers the clocks display, the actual time is displayed.\nFor the `ui5-time-picker`\n\n### Formatting\n\nIf a time is entered by typing it into\nthe input field, it must fit to the used time format.\n\nSupported format options are pattern-based on Unicode LDML Date Format notation.\nFor more information, see [UTS #35: Unicode Locale Data Markup Language](http://unicode.org/reports/tr35/#Date_Field_Symbol_Table).\n\nFor example, if the `format-pattern` is \"HH:mm:ss\",\na valid value string is \"11:42:35\" and the same is displayed in the input.\n\n### Keyboard handling\n[F4], [Alt]+[Up], [Alt]+[Down] Open/Close picker dialog and move focus to it.\n\nWhen closed:\n\n- [Page Up] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.\n- [Page Down] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am and vice versa.\n- [Shift]+[Page Up] - Increments minutes by 1.\n- [Shift]+[Page Down] - Decrements minutes by 1.\n- [Shift]+[Ctrl]+[Page Up] - Increments seconds by 1.\n- [Shift]+[Ctrl]+[Page Down] - Decrements seconds by 1.\n-\n\nWhen opened:\n\n- [Page Up] - Increments hours by 1. If 12 am is reached, increment hours to 1 pm and vice versa.\n- [Page Down] - Decrements the corresponding field by 1. If 1 pm is reached, decrement hours to 12 am and vice versa.\n- [Shift]+[Page Up] - Increments minutes by 1.\n- [Shift]+[Page Down] - Decrements minutes by 1.\n- [Shift]+[Ctrl]+[Page Up] - Increments seconds by 1.\n- [Shift]+[Ctrl]+[Page Down] - Decrements seconds by 1.\n- [A] or [P] - Selects AM or PM respectively.\n- [0]-[9] - Allows direct time selecting (hours/minutes/seconds).\n- [:] - Allows switching between hours/minutes/seconds clocks. If the last clock is displayed and [:] is pressed, the first clock is beind displayed.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/TimePicker.js\";`\n---\n\n\n### **Events:**\n - **change** - Fired when the input operation has finished by clicking the \"OK\" button or\nwhen the text in the input field has changed and the focus leaves the input field.\n- **input** - Fired when the value of the `ui5-time-picker` is changed at each key stroke.\n\n### **Methods:**\n - **openPicker(): _Promise<void>_** - Opens the picker.\n- **closePicker(): _Promise<void>_** - Closes the picker\n- **isOpen(): _boolean_** - Checks if the picker is open\n- **formatValue(date: _Date_): _string_** - Formats a Java Script date object into a string representing a locale date and time\naccording to the `formatPattern` property of the TimePicker instance\n- **isValid(value: _string | undefined_): _boolean_** - Checks if a value is valid against the current `formatPattern` value.\n\n**Note:** an empty string is considered as valid value.",
          "doc-url": "",
          "attributes": [
            {
              "name": "placeholder",
              "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "format-pattern",
              "description": "Determines the format, displayed in the input field.\n\nExample:\nHH:mm:ss -> 11:42:35\nhh:mm:ss a -> 2:23:15 PM\nmm:ss -> 12:04 (only minutes and seconds)",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "date-value",
              "description": "Currently selected time represented as JavaScript Date instance",
              "value": { "type": "any", "default": "null" }
            },
            {
              "name": "value",
              "description": "Defines a formatted time value.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the `ui5-time-picker`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "disabled",
              "description": "Determines whether the `ui5-time-picker` is displayed as disabled.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "readonly",
              "description": "Determines whether the `ui5-time-picker` is displayed as readonly.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the input operation has finished by clicking the \"OK\" button or\nwhen the text in the input field has changed and the focus leaves the input field."
            },
            {
              "name": "input",
              "description": "Fired when the value of the `ui5-time-picker` is changed at each key stroke."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "placeholder",
                "description": "Defines a short hint, intended to aid the user with data entry when the\ncomponent has no value.\n\n**Note:** When no placeholder is set, the format pattern is displayed as a placeholder.\nPassing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "format-pattern",
                "description": "Determines the format, displayed in the input field.\n\nExample:\nHH:mm:ss -> 11:42:35\nhh:mm:ss a -> 2:23:15 PM\nmm:ss -> 12:04 (only minutes and seconds)",
                "value": { "type": "string" }
              },
              {
                "name": "date-value",
                "description": "Currently selected time represented as JavaScript Date instance",
                "value": { "type": "any" }
              },
              {
                "name": "value",
                "description": "Defines a formatted time value.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the `ui5-time-picker`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "disabled",
                "description": "Determines whether the `ui5-time-picker` is displayed as disabled.",
                "value": { "type": "boolean" }
              },
              {
                "name": "readonly",
                "description": "Determines whether the `ui5-time-picker` is displayed as readonly.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the input operation has finished by clicking the \"OK\" button or\nwhen the text in the input field has changed and the focus leaves the input field."
              },
              {
                "name": "input",
                "description": "Fired when the value of the `ui5-time-picker` is changed at each key stroke."
              }
            ]
          }
        },
        {
          "name": "ui5-title",
          "description": "### Overview\n\nThe `ui5-title` component is used to display titles inside a page.\nIt is a simple, large-sized text with explicit header/title semantics.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Title.js\";`\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\nThis component supports nesting a `Link` component inside.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "wrapping-type",
              "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
              "value": {
                "type": "\"None\" | \"Normal\"",
                "default": "\"None\""
              }
            },
            {
              "name": "level",
              "description": "Defines the component level.\nAvailable options are: `\"H6\"` to `\"H1\"`.",
              "value": {
                "type": "\"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\"",
                "default": "\"H2\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\nThis component supports nesting a `Link` component inside.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "wrapping-type",
                "description": "Defines how the text of a component will be displayed when there is not enough space.\n\n**Note:** for option \"Normal\" the text will wrap and the words will not be broken based on hyphenation.",
                "value": { "type": "\"None\" | \"Normal\"" }
              },
              {
                "name": "level",
                "description": "Defines the component level.\nAvailable options are: `\"H6\"` to `\"H1\"`.",
                "value": {
                  "type": "\"H1\" | \"H2\" | \"H3\" | \"H4\" | \"H5\" | \"H6\""
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-toast",
          "description": "### Overview\n\nThe `ui5-toast` is a small, non-disruptive popup for success or information messages that\ndisappears automatically after a few seconds.\n\n### Usage\n\n#### When to use:\n\n- You want to display a short success or information message.\n- You do not want to interrupt users while they are performing an action.\n- You want to confirm a successful action.\n\n#### When not to use:\n\n- You want to display error or warning message.\n- You want to interrupt users while they are performing an action.\n- You want to make sure that users read the message before they leave the page.\n- You want users to be able to copy some part of the message text.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Toast.js\";`\n---\n\n\n### **Methods:**\n - **show(): _void_** - Shows the component.\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "duration",
              "description": "Defines the duration in milliseconds for which component\nremains on the screen before it's automatically closed.\n\n**Note:** The minimum supported value is `500` ms\nand even if a lower value is set, the duration would remain `500` ms.",
              "value": { "type": "number", "default": "3000" }
            },
            {
              "name": "placement",
              "description": "Defines the placement of the component.",
              "value": {
                "type": "\"TopStart\" | \"TopCenter\" | \"TopEnd\" | \"MiddleStart\" | \"MiddleCenter\" | \"MiddleEnd\" | \"BottomStart\" | \"BottomCenter\" | \"BottomEnd\"",
                "default": "\"BottomCenter\""
              }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "duration",
                "description": "Defines the duration in milliseconds for which component\nremains on the screen before it's automatically closed.\n\n**Note:** The minimum supported value is `500` ms\nand even if a lower value is set, the duration would remain `500` ms.",
                "value": { "type": "number" }
              },
              {
                "name": "placement",
                "description": "Defines the placement of the component.",
                "value": {
                  "type": "\"TopStart\" | \"TopCenter\" | \"TopEnd\" | \"MiddleStart\" | \"MiddleCenter\" | \"MiddleEnd\" | \"BottomStart\" | \"BottomCenter\" | \"BottomEnd\""
                }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-toggle-button",
          "description": "### Overview\n\nThe `ui5-toggle-button` component is an enhanced `ui5-button`\nthat can be toggled between pressed and normal states.\nUsers can use the `ui5-toggle-button` as a switch to turn a setting on or off.\nIt can also be used to represent an independent choice similar to a check box.\n\nClicking or tapping on a `ui5-toggle-button` changes its state to `pressed`. The button returns to\nits initial state when the user clicks or taps on it again.\nBy applying additional custom CSS-styling classes, apps can give a different style to any `ui5-toggle-button`.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/ToggleButton.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "pressed",
              "description": "Determines whether the component is displayed as pressed.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "design",
              "description": "Defines the component design.",
              "value": {
                "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon-end",
              "description": "Defines whether the icon should be displayed after the component text.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "submits",
              "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** For the `submits` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines whether the button has special form-related functionality.\n\n**Note:** For the `type` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
              "value": {
                "type": "\"Button\" | \"Submit\" | \"Reset\"",
                "default": "\"Button\""
              }
            },
            {
              "name": "accessible-role",
              "description": "Describes the accessibility role of the button.\n\n**Note:** Use link role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
              "value": {
                "type": "\"Button\" | \"Link\"",
                "default": "\"Button\""
              }
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "pressed",
                "description": "Determines whether the component is displayed as pressed.",
                "value": { "type": "boolean" }
              },
              {
                "name": "design",
                "description": "Defines the component design.",
                "value": {
                  "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\""
                }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is disabled.\nA disabled component can't be pressed or\nfocused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "Defines the icon, displayed as graphical element within the component.\nThe SAP-icons font provides numerous options.\n\nExample:\nSee all the available icons within the [Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "icon-end",
                "description": "Defines whether the icon should be displayed after the component text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "submits",
                "description": "When set to `true`, the component will\nautomatically submit the nearest HTML form element on `press`.\n\n**Note:** For the `submits` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines whether the button has special form-related functionality.\n\n**Note:** For the `type` property to have effect, you must add the following import to your project:\n`import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`",
                "value": { "type": "\"Button\" | \"Submit\" | \"Reset\"" }
              },
              {
                "name": "accessible-role",
                "description": "Describes the accessibility role of the button.\n\n**Note:** Use link role only with a press handler, which performs a navigation. In all other scenarios the default button semantics are recommended.",
                "value": { "type": "\"Button\" | \"Link\"" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
              }
            ]
          }
        },
        {
          "name": "ui5-token",
          "description": "### Overview\n\nTokens are small items of information (similar to tags) that mainly serve to visualize previously selected items.\n\n### ES6 Module Import\n\n`import \"@ui5/webcomponents/dist/Token.js\";`\n---\n\n\n### **Events:**\n - **select** - Fired when the the component is selected by user interaction with mouse or by clicking space.\n\n### **Slots:**\n - **closeIcon** - Defines the close icon for the token. If nothing is provided to this slot, the default close icon will be used.\nAccepts `ui5-icon`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the token.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "readonly",
              "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component can not be deleted or selected,\nbut still provides visual feedback upon user interaction.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "selected",
              "description": "Defines whether the component is selected or not.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "closeIcon",
              "description": "Defines the close icon for the token. If nothing is provided to this slot, the default close icon will be used.\nAccepts `ui5-icon`."
            }
          ],
          "events": [
            {
              "name": "select",
              "description": "Fired when the the component is selected by user interaction with mouse or by clicking space."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the token.",
                "value": { "type": "string" }
              },
              {
                "name": "readonly",
                "description": "Defines whether the component is read-only.\n\n**Note:** A read-only component can not be deleted or selected,\nbut still provides visual feedback upon user interaction.",
                "value": { "type": "boolean" }
              },
              {
                "name": "selected",
                "description": "Defines whether the component is selected or not.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "select",
                "description": "Fired when the the component is selected by user interaction with mouse or by clicking space."
              }
            ]
          }
        },
        {
          "name": "ui5-toolbar",
          "description": "### Overview\n\nThe `ui5-toolbar` component is used to create a horizontal layout with items.\nThe items can be overflowing in a popover, when the space is not enough to show all of them.\n\n### Keyboard Handling\nThe `ui5-toolbar` provides advanced keyboard handling.\n\n- The control is not interactive, but can contain of interactive elements\n- [Tab] - iterates through elements\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Toolbar.js\";`\n---\n\n\n### **Methods:**\n - **isOverflowOpen(): _Promise<boolean>_** - Returns if the overflow popup is open.\n\n### **Slots:**\n - **default** - Defines the items of the component.\n \n  **Note:** Currently only `ui5-toolbar-button`, `ui5-toolbar-select`, `ui5-toolbar-separator` and `ui5-toolbar-spacer` are allowed here.",
          "doc-url": "",
          "attributes": [
            {
              "name": "align-content",
              "description": "Indicated the direction in which the Toolbar items will be aligned.",
              "value": { "type": "\"End\" | \"Start\"", "default": "\"End\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the input.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of the component.\n \n  **Note:** Currently only `ui5-toolbar-button`, `ui5-toolbar-select`, `ui5-toolbar-separator` and `ui5-toolbar-spacer` are allowed here."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "align-content",
                "description": "Indicated the direction in which the Toolbar items will be aligned.",
                "value": { "type": "\"End\" | \"Start\"" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the input.",
                "value": { "type": "string" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-toolbar-button",
          "description": "### Overview\nThe `ui5-toolbar-button` represents an abstract action,\nused in the `ui5-toolbar`.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/ToolbarButton.js\";`\n---\n\n\n### **Events:**\n - **click** - Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`.",
          "doc-url": "",
          "attributes": [
            {
              "name": "disabled",
              "description": "Defines if the action is disabled.\n\n**Note:** a disabled action can't be pressed or focused, and it is not in the tab chain.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "design",
              "description": "Defines the action design.",
              "value": {
                "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "icon",
              "description": "Defines the `icon` source URI.\n\n**Note:** SAP-icons font provides numerous buil-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon-end",
              "description": "Defines whether the icon should be displayed after the component text.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "text",
              "description": "Button text",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "width",
              "description": "Defines the width of the button.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "overflow-priority",
              "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
              "value": {
                "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "prevent-overflow-closing",
              "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [
            {
              "name": "click",
              "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "disabled",
                "description": "Defines if the action is disabled.\n\n**Note:** a disabled action can't be pressed or focused, and it is not in the tab chain.",
                "value": { "type": "boolean" }
              },
              {
                "name": "design",
                "description": "Defines the action design.",
                "value": {
                  "type": "\"Positive\" | \"Negative\" | \"Default\" | \"Transparent\" | \"Emphasized\" | \"Attention\""
                }
              },
              {
                "name": "icon",
                "description": "Defines the `icon` source URI.\n\n**Note:** SAP-icons font provides numerous buil-in icons. To find all the available icons, see the\n[Icon Explorer](https://sdk.openui5.org/test-resources/sap/m/demokit/iconExplorer/webapp/index.html).",
                "value": { "type": "string" }
              },
              {
                "name": "icon-end",
                "description": "Defines whether the icon should be displayed after the component text.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the tooltip of the component.\n\n**Note:** A tooltip attribute should be provided for icon-only buttons, in order to represent their exact meaning/function.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the component.",
                "value": { "type": "string" }
              },
              {
                "name": "text",
                "description": "Button text",
                "value": { "type": "string" }
              },
              {
                "name": "width",
                "description": "Defines the width of the button.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "overflow-priority",
                "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
                "value": {
                  "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\""
                }
              },
              {
                "name": "prevent-overflow-closing",
                "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "click",
                "description": "Fired when the component is activated either with a\nmouse/tap or by using the Enter or Space key.\n\n**Note:** The event will not be fired if the `disabled`\nproperty is set to `true`."
              }
            ]
          }
        },
        {
          "name": "ui5-toolbar-select",
          "description": "### Overview\nThe `ui5-toolbar-select` component is used to create a toolbar drop-down list.\nThe items inside the `ui5-toolbar-select` define the available options by using the `ui5-toolbar-select-option` component.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/ToolbarSelect.js\";`\n\n`import \"@ui5/webcomponents/dist/ToolbarSelectOption.js\";` (comes with `ui5-toolbar-select`)\n---\n\n\n### **Events:**\n - **change** - Fired when the selected option changes.\n- **open** - Fired after the component's dropdown menu opens.\n- **close** - Fired after the component's dropdown menu closes.\n\n### **Slots:**\n - **default** - Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-toolbar-select-option` component to define the desired options.",
          "doc-url": "",
          "attributes": [
            {
              "name": "width",
              "description": "Defines the width of the select.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "value-state",
              "description": "Defines the value state of the component.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "disabled",
              "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible ARIA name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Receives id(or many ids) of the elements that label the select.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "overflow-priority",
              "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
              "value": {
                "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "prevent-overflow-closing",
              "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the component options.\n\n**Note:** Only one selected option is allowed.\nIf more than one option is defined as selected, the last one would be considered as the selected one.\n\n**Note:** Use the `ui5-toolbar-select-option` component to define the desired options."
            }
          ],
          "events": [
            {
              "name": "change",
              "description": "Fired when the selected option changes."
            },
            {
              "name": "open",
              "description": "Fired after the component's dropdown menu opens."
            },
            {
              "name": "close",
              "description": "Fired after the component's dropdown menu closes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "width",
                "description": "Defines the width of the select.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "value-state",
                "description": "Defines the value state of the component.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "disabled",
                "description": "Defines whether the component is in disabled state.\n\n**Note:** A disabled component is noninteractive.",
                "value": { "type": "boolean" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible ARIA name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Receives id(or many ids) of the elements that label the select.",
                "value": { "type": "string" }
              },
              {
                "name": "overflow-priority",
                "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
                "value": {
                  "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\""
                }
              },
              {
                "name": "prevent-overflow-closing",
                "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "change",
                "description": "Fired when the selected option changes."
              },
              {
                "name": "open",
                "description": "Fired after the component's dropdown menu opens."
              },
              {
                "name": "close",
                "description": "Fired after the component's dropdown menu closes."
              }
            ]
          }
        },
        {
          "name": "ui5-toolbar-select-option",
          "description": "### Overview\n\nThe `ui5-toolbar-select-option` component defines the content of an option in the `ui5-toolbar-select`.\n---\n\n\n### **Slots:**\n - **default** - Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.",
          "doc-url": "",
          "attributes": [
            {
              "name": "selected",
              "description": "Defines the selected state of the component.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the text of the component.\n\n**Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design."
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "selected",
                "description": "Defines the selected state of the component.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-toolbar-separator",
          "description": "### Overview\nThe `ui5-toolbar-separator` is an element, used for visual separation between two elements.\nIt takes no space in calculating toolbar items width.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "overflow-priority",
              "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
              "value": {
                "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "prevent-overflow-closing",
              "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "overflow-priority",
                "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
                "value": {
                  "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\""
                }
              },
              {
                "name": "prevent-overflow-closing",
                "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-toolbar-spacer",
          "description": "### Overview\nThe `ui5-toolbar-spacer` is an element, used for taking needed space for toolbar items to take 100% width.\nIt takes no space in calculating toolbar items width.\n---\n",
          "doc-url": "",
          "attributes": [
            {
              "name": "width",
              "description": "Defines the width of the spacer.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
              "value": { "type": "string | undefined", "default": "undefined" }
            },
            {
              "name": "overflow-priority",
              "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
              "value": {
                "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\"",
                "default": "\"Default\""
              }
            },
            {
              "name": "prevent-overflow-closing",
              "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [],
          "js": {
            "properties": [
              {
                "name": "width",
                "description": "Defines the width of the spacer.\n\n**Note:** all CSS sizes are supported - 'percentage', 'px', 'rem', 'auto', etc.",
                "value": { "type": "string | undefined" }
              },
              {
                "name": "overflow-priority",
                "description": "Property used to define the access of the item to the overflow Popover. If \"NeverOverflow\" option is set,\nthe item never goes in the Popover, if \"AlwaysOverflow\" - it never comes out of it.",
                "value": {
                  "type": "\"Default\" | \"NeverOverflow\" | \"AlwaysOverflow\""
                }
              },
              {
                "name": "prevent-overflow-closing",
                "description": "Defines if the toolbar overflow popup should close upon intereaction with the item.\nIt will close by default.",
                "value": { "type": "boolean" }
              }
            ],
            "events": []
          }
        },
        {
          "name": "ui5-tree",
          "description": "### Overview\nThe `ui5-tree` component provides a tree structure for displaying data in a hierarchy.\n\n### Usage\n\n#### When to use:\n\n- To display hierarchically structured items.\n- To select one or more items out of a set of hierarchically structured items.\n\n#### When not to use:\n\n- To display items not hierarchically structured. In this case, use the List component.\n- To select one item from a very small number of non-hierarchical items. Select or ComboBox might be more appropriate.\n- The hierarchy turns out to have only two levels. In this case, use List with group items.\n\n### Keyboard Handling\n\nThe `ui5-tree` provides advanced keyboard handling.\nThe user can use the following keyboard shortcuts in order to navigate trough the tree:\n\n- [Up] or [Down] - Navigates up and down the tree items that are currently visible.\n- [Right] - Drills down the tree by expanding the tree nodes.\n- [Left] - Goes up the tree and collapses the tree nodes.\n\nThe user can use the following keyboard shortcuts to perform selection,\nwhen the `mode` property is in use:\n\n- [Space] - Selects the currently focused item upon keyup.\n- [Enter]  - Selects the currently focused item upon keydown.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/Tree.js\";`\n\n`import \"@ui5/webcomponents/dist/TreeItem.js\";`\n---\n\n\n### **Events:**\n - **item-toggle** - Fired when a tree item is expanded or collapsed.\n\n**Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\nThis may be handy for example if you want to dynamically load tree items upon the user expanding a node.\nEven if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n- **item-mouseover** - Fired when the mouse cursor enters the tree item borders.\n- **item-mouseout** - Fired when the mouse cursor leaves the tree item borders.\n- **item-click** - Fired when a tree item is activated.\n- **item-delete** - Fired when the Delete button of any tree item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`.\n- **selection-change** - Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes.\n\n### **Methods:**\n - **walk(callback: _WalkCallback_): _void_** - Perform Depth-First-Search walk on the tree and run a callback on each node\n\n### **Slots:**\n - **default** - Defines the items of the component. Tree items may have other tree items as children.\n\n**Note:** Use `ui5-tree-item` for the intended design.\n- **header** - Defines the component header.\n\n**Note:** When the `header` slot is set, the\n`headerText` property is ignored.",
          "doc-url": "",
          "attributes": [
            {
              "name": "mode",
              "description": "Defines the mode of the component. Since the tree uses a `ui5-list` to display its structure,\nthe tree modes are exactly the same as the list modes, and are all applicable.",
              "value": {
                "type": "\"None\" | \"SingleSelect\" | \"SingleSelectBegin\" | \"SingleSelectEnd\" | \"SingleSelectAuto\" | \"MultiSelect\" | \"Delete\"",
                "default": "\"None\""
              }
            },
            {
              "name": "no-data-text",
              "description": "Defines the text that is displayed when the component contains no items.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "header-text",
              "description": "Defines the component header text.\n\n**Note:** If the `header` slot is set, this property is ignored.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "footer-text",
              "description": "Defines the component footer text.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "accessible-name-ref",
              "description": "Defines the IDs of the elements that label the component.",
              "value": { "type": "string", "default": "\"\"" }
            }
          ],
          "slots": [
            {
              "name": "default",
              "description": "Defines the items of the component. Tree items may have other tree items as children.\n\n**Note:** Use `ui5-tree-item` for the intended design."
            },
            {
              "name": "header",
              "description": "Defines the component header.\n\n**Note:** When the `header` slot is set, the\n`headerText` property is ignored."
            }
          ],
          "events": [
            {
              "name": "item-toggle",
              "description": "Fired when a tree item is expanded or collapsed.\n\n**Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\nThis may be handy for example if you want to dynamically load tree items upon the user expanding a node.\nEven if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item."
            },
            {
              "name": "item-mouseover",
              "description": "Fired when the mouse cursor enters the tree item borders."
            },
            {
              "name": "item-mouseout",
              "description": "Fired when the mouse cursor leaves the tree item borders."
            },
            {
              "name": "item-click",
              "description": "Fired when a tree item is activated."
            },
            {
              "name": "item-delete",
              "description": "Fired when the Delete button of any tree item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`."
            },
            {
              "name": "selection-change",
              "description": "Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "mode",
                "description": "Defines the mode of the component. Since the tree uses a `ui5-list` to display its structure,\nthe tree modes are exactly the same as the list modes, and are all applicable.",
                "value": {
                  "type": "\"None\" | \"SingleSelect\" | \"SingleSelectBegin\" | \"SingleSelectEnd\" | \"SingleSelectAuto\" | \"MultiSelect\" | \"Delete\""
                }
              },
              {
                "name": "no-data-text",
                "description": "Defines the text that is displayed when the component contains no items.",
                "value": { "type": "string" }
              },
              {
                "name": "header-text",
                "description": "Defines the component header text.\n\n**Note:** If the `header` slot is set, this property is ignored.",
                "value": { "type": "string" }
              },
              {
                "name": "footer-text",
                "description": "Defines the component footer text.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "accessible-name-ref",
                "description": "Defines the IDs of the elements that label the component.",
                "value": { "type": "string" }
              }
            ],
            "events": [
              {
                "name": "item-toggle",
                "description": "Fired when a tree item is expanded or collapsed.\n\n**Note:** You can call `preventDefault()` on the event object to suppress the event, if needed.\nThis may be handy for example if you want to dynamically load tree items upon the user expanding a node.\nEven if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item."
              },
              {
                "name": "item-mouseover",
                "description": "Fired when the mouse cursor enters the tree item borders."
              },
              {
                "name": "item-mouseout",
                "description": "Fired when the mouse cursor leaves the tree item borders."
              },
              {
                "name": "item-click",
                "description": "Fired when a tree item is activated."
              },
              {
                "name": "item-delete",
                "description": "Fired when the Delete button of any tree item is pressed.\n\n**Note:** A Delete button is displayed on each item,\nwhen the component `mode` property is set to `Delete`."
              },
              {
                "name": "selection-change",
                "description": "Fired when selection is changed by user interaction\nin `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes."
              }
            ]
          }
        },
        {
          "name": "ui5-tree-item",
          "description": "### Overview\nThe `ui5-tree-item` represents a node in a tree structure, shown as a `ui5-list`.\n\nThis is the item to use inside a `ui5-tree`.\nYou can represent an arbitrary tree structure by recursively nesting tree items.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/TreeItem.js\";`\n---\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Methods:**\n - **toggle(): _void_** - Call this method to manually switch the `expanded` state of a tree item.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the tree list item\n- **additionalText** - Used to style the additionalText of the tree list item\n- **icon** - Used to style the icon of the tree list item",
          "doc-url": "",
          "attributes": [
            {
              "name": "text",
              "description": "Defines the text of the tree item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "additional-text",
              "description": "Defines the `additionalText`, displayed in the end of the tree item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "icon",
              "description": "If set, an icon will be displayed before the text of the tree list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "expanded",
              "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "indeterminate",
              "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `MultiSelect` mode.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "has-children",
              "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "additional-text-state",
              "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "navigated",
              "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip that would be displayed for the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "highlight",
              "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "description": "Fired when the user clicks on the detail button when type is `Detail`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "text",
                "description": "Defines the text of the tree item.",
                "value": { "type": "string" }
              },
              {
                "name": "additional-text",
                "description": "Defines the `additionalText`, displayed in the end of the tree item.",
                "value": { "type": "string" }
              },
              {
                "name": "icon",
                "description": "If set, an icon will be displayed before the text of the tree list item.",
                "value": { "type": "string" }
              },
              {
                "name": "expanded",
                "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "indeterminate",
                "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `MultiSelect` mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "has-children",
                "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
                "value": { "type": "boolean" }
              },
              {
                "name": "additional-text-state",
                "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "navigated",
                "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip that would be displayed for the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "highlight",
                "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "detail-click",
                "description": "Fired when the user clicks on the detail button when type is `Detail`."
              }
            ]
          }
        },
        {
          "name": "ui5-tree-item-custom",
          "description": "The `ui5-tree-item-custom` represents a node in a tree structure, shown as a `ui5-list`.\n\nThis is the item to use inside a `ui5-tree`.\nYou can represent an arbitrary tree structure by recursively nesting tree items.\n\nYou can use this item to put any custom content inside the tree item.\n\n### ES6 Module Import\n`import \"@ui5/webcomponents/dist/TreeItemCustom.js\";`\n---\n\n\n### **Events:**\n - **detail-click** - Fired when the user clicks on the detail button when type is `Detail`.\n\n### **Methods:**\n - **toggle(): _void_** - Call this method to manually switch the `expanded` state of a tree item.\n\n### **Slots:**\n - **content** - Defines the content of the `ui5-tree-item`.\n\n### **CSS Parts:**\n - **title** - Used to style the title of the tree list item\n- **additionalText** - Used to style the additionalText of the tree list item\n- **icon** - Used to style the icon of the tree list item",
          "doc-url": "",
          "attributes": [
            {
              "name": "hide-selection-element",
              "description": "Defines whether the tree list item should display the selection element.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "icon",
              "description": "If set, an icon will be displayed before the text of the tree list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "expanded",
              "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "indeterminate",
              "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `MultiSelect` mode.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "has-children",
              "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "additional-text-state",
              "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "accessible-name",
              "description": "Defines the accessible name of the component.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "type",
              "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
              "value": {
                "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\"",
                "default": "\"Active\""
              }
            },
            {
              "name": "navigated",
              "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
              "value": { "type": "boolean", "default": "false" }
            },
            {
              "name": "tooltip",
              "description": "Defines the text of the tooltip that would be displayed for the list item.",
              "value": { "type": "string", "default": "\"\"" }
            },
            {
              "name": "highlight",
              "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
              "value": {
                "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\"",
                "default": "\"None\""
              }
            },
            {
              "name": "selected",
              "description": "Defines the selected state of the `ListItem`.",
              "value": { "type": "boolean", "default": "false" }
            }
          ],
          "slots": [
            {
              "name": "content",
              "description": "Defines the content of the `ui5-tree-item`."
            }
          ],
          "events": [
            {
              "name": "detail-click",
              "description": "Fired when the user clicks on the detail button when type is `Detail`."
            }
          ],
          "js": {
            "properties": [
              {
                "name": "hide-selection-element",
                "description": "Defines whether the tree list item should display the selection element.",
                "value": { "type": "boolean" }
              },
              {
                "name": "icon",
                "description": "If set, an icon will be displayed before the text of the tree list item.",
                "value": { "type": "string" }
              },
              {
                "name": "expanded",
                "description": "Defines whether the tree list item will show a collapse or expand icon inside its toggle button.",
                "value": { "type": "boolean" }
              },
              {
                "name": "indeterminate",
                "description": "Defines whether the selection of a tree node is displayed as partially selected.\n\n**Note:** The indeterminate state can be set only programmatically and can’t be achieved by user\ninteraction, meaning that the resulting visual state depends on the values of the `indeterminate`\nand `selected` properties:\n\n-  If a tree node has both `selected` and `indeterminate` set to `true`, it is displayed as partially selected.\n-  If a tree node has `selected` set to `true` and `indeterminate` set to `false`, it is displayed as selected.\n-  If a tree node has `selected` set to `false`, it is displayed as not selected regardless of the value of the `indeterminate` property.\n\n**Note:** This property takes effect only when the `ui5-tree` is in `MultiSelect` mode.",
                "value": { "type": "boolean" }
              },
              {
                "name": "has-children",
                "description": "Defines whether the tree node has children, even if currently no other tree nodes are slotted inside.\n\n**Note:** This property is useful for showing big tree structures where not all nodes are initially loaded due to performance reasons.\nSet this to `true` for nodes you intend to load lazily, when the user clicks the expand button.\nIt is not necessary to set this property otherwise. If a tree item has children, the expand button will be displayed anyway.",
                "value": { "type": "boolean" }
              },
              {
                "name": "additional-text-state",
                "description": "Defines the state of the `additionalText`.\n\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "accessible-name",
                "description": "Defines the accessible name of the component.",
                "value": { "type": "string" }
              },
              {
                "name": "type",
                "description": "Defines the visual indication and behavior of the list items.\nAvailable options are `Active` (by default), `Inactive`, `Detail` and `Navigation`.\n\n**Note:** When set to `Active` or `Navigation`, the item will provide visual response upon press and hover,\nwhile with type `Inactive` and `Detail` - will not.",
                "value": {
                  "type": "\"Navigation\" | \"Inactive\" | \"Active\" | \"Detail\""
                }
              },
              {
                "name": "navigated",
                "description": "The navigated state of the list item.\nIf set to `true`, a navigation indicator is displayed at the end of the list item.",
                "value": { "type": "boolean" }
              },
              {
                "name": "tooltip",
                "description": "Defines the text of the tooltip that would be displayed for the list item.",
                "value": { "type": "string" }
              },
              {
                "name": "highlight",
                "description": "Defines the highlight state of the list items.\nAvailable options are: `\"None\"` (by default), `\"Success\"`, `\"Warning\"`, `\"Information\"` and `\"Error\"`.",
                "value": {
                  "type": "\"Information\" | \"None\" | \"Success\" | \"Warning\" | \"Error\""
                }
              },
              {
                "name": "selected",
                "description": "Defines the selected state of the `ListItem`.",
                "value": { "type": "boolean" }
              }
            ],
            "events": [
              {
                "name": "detail-click",
                "description": "Fired when the user clicks on the detail button when type is `Detail`."
              }
            ]
          }
        }
      ]
    },
    "css": {
      "properties": [],
      "pseudo-elements": [
        {
          "name": "part(button)",
          "description": "Used to style the native button element"
        },
        {
          "name": "part(root)",
          "description": "Used to style the root DOM element of the card component"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the card"
        },
        {
          "name": "part(root)",
          "description": "Used to style the root DOM element of the CardHeader"
        },
        {
          "name": "part(title)",
          "description": "Used to style the title of the CardHeader"
        },
        {
          "name": "part(subtitle)",
          "description": "Used to style the subtitle of the CardHeader"
        },
        {
          "name": "part(status)",
          "description": "Used to style the status of the CardHeader"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the component"
        },
        {
          "name": "part(root)",
          "description": "Used to style the outermost wrapper of the `ui5-checkbox`"
        },
        {
          "name": "part(label)",
          "description": "Used to style the label of the `ui5-checkbox`"
        },
        {
          "name": "part(icon)",
          "description": "Used to style the icon of the `ui5-checkbox`"
        },
        {
          "name": "part(native-li)",
          "description": "Used to style the main li tag of the list item"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content area of the list item"
        },
        {
          "name": "part(detail-button)",
          "description": "Used to style the button rendered when the list item is of type detail"
        },
        {
          "name": "part(delete-button)",
          "description": "Used to style the button rendered when the list item is in delete mode"
        },
        {
          "name": "part(radio)",
          "description": "Used to style the radio button rendered when the list item is in single selection mode"
        },
        {
          "name": "part(checkbox)",
          "description": "Used to style the checkbox rendered when the list item is in multiple selection mode"
        },
        {
          "name": "part(header)",
          "description": "Used to style the header of the component"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the component"
        },
        {
          "name": "part(footer)",
          "description": "Used to style the footer of the component"
        },
        {
          "name": "part(root)",
          "description": "Used to style the outermost wrapper of the `ui5-icon`."
        },
        {
          "name": "part(token-\\{index\\})",
          "description": "Used to style each token(where `token-0` corresponds to the first item)"
        },
        {
          "name": "part(header)",
          "description": "Used to style the wrapper of the header."
        },
        {
          "name": "part(content)",
          "description": "Used to style the wrapper of the content."
        },
        {
          "name": "part(header)",
          "description": "Used to style the header of the component"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the component"
        },
        {
          "name": "part(footer)",
          "description": "Used to style the footer of the component"
        },
        {
          "name": "part(bar)",
          "description": "Used to style the main bar of the `ui5-progress-indicator`"
        },
        {
          "name": "part(remaining-bar)",
          "description": "Used to style the remaining bar of the `ui5-progress-indicator`"
        },
        {
          "name": "part(outer-ring)",
          "description": "Used to style the outer ring of the `ui5-radio-button`."
        },
        {
          "name": "part(inner-ring)",
          "description": "Used to style the inner ring of the `ui5-radio-button`."
        },
        {
          "name": "part(progress-container)",
          "description": "Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-range-slider`."
        },
        {
          "name": "part(progress-bar)",
          "description": "Used to style the progress bar, which shows the progress of the `ui5-range-slider`."
        },
        {
          "name": "part(handle)",
          "description": "Used to style the handles of the `ui5-range-slider`."
        },
        {
          "name": "part(header)",
          "description": "Used to style the header of the component"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the component"
        },
        {
          "name": "part(footer)",
          "description": "Used to style the footer of the component"
        },
        {
          "name": "part(progress-container)",
          "description": "Used to style the progress container, the horizontal bar that visually represents the range between the minimum and maximum values, of the `ui5-slider`."
        },
        {
          "name": "part(progress-bar)",
          "description": "Used to style the progress bar, which shows the progress of the `ui5-slider`."
        },
        {
          "name": "part(handle)",
          "description": "Used to style the handle of the `ui5-slider`."
        },
        {
          "name": "part(title)",
          "description": "Used to style the title of the list item"
        },
        {
          "name": "part(description)",
          "description": "Used to style the description of the list item"
        },
        {
          "name": "part(additional-text)",
          "description": "Used to style the additionalText of the list item"
        },
        {
          "name": "part(icon)",
          "description": "Used to style the icon of the list item"
        },
        {
          "name": "part(native-li)",
          "description": "Used to style the main li tag of the list item"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content area of the list item"
        },
        {
          "name": "part(detail-button)",
          "description": "Used to style the button rendered when the list item is of type detail"
        },
        {
          "name": "part(delete-button)",
          "description": "Used to style the button rendered when the list item is in delete mode"
        },
        {
          "name": "part(radio)",
          "description": "Used to style the radio button rendered when the list item is in single selection mode"
        },
        {
          "name": "part(checkbox)",
          "description": "Used to style the checkbox rendered when the list item is in multiple selection mode"
        },
        {
          "name": "part(slider)",
          "description": "Used to style the track, where the handle is being slid"
        },
        {
          "name": "part(text-on)",
          "description": "Used to style the `textOn` property text"
        },
        {
          "name": "part(text-off)",
          "description": "Used to style the `textOff` property text"
        },
        {
          "name": "part(handle)",
          "description": "Used to style the handle of the switch"
        },
        {
          "name": "part(content)",
          "description": "Used to style the content of the component"
        },
        {
          "name": "part(tabstrip)",
          "description": "Used to style the tabstrip of the component"
        },
        {
          "name": "part(cell)",
          "description": "Used to style the native `td` element"
        },
        {
          "name": "part(column)",
          "description": "Used to style the native `th` element"
        },
        {
          "name": "part(group-row)",
          "description": "Used to style the native `tr` element"
        },
        {
          "name": "part(row)",
          "description": "Used to style the native `tr` element"
        },
        {
          "name": "part(popin-row)",
          "description": "Used to style the `tr` element when a row pops in"
        },
        {
          "name": "part(textarea)",
          "description": "Used to style the native textarea"
        },
        {
          "name": "part(title)",
          "description": "Used to style the title of the tree list item"
        },
        {
          "name": "part(additionalText)",
          "description": "Used to style the additionalText of the tree list item"
        },
        {
          "name": "part(icon)",
          "description": "Used to style the icon of the tree list item"
        },
        {
          "name": "part(title)",
          "description": "Used to style the title of the tree list item"
        },
        {
          "name": "part(additionalText)",
          "description": "Used to style the additionalText of the tree list item"
        },
        {
          "name": "part(icon)",
          "description": "Used to style the icon of the tree list item"
        }
      ]
    }
  }
}
