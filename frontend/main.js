import "@ui5/webcomponents/dist/Assets.js";
import "@ui5/webcomponents-fiori/dist/Assets.js";
import "@ui5/webcomponents-localization/dist/Assets.js";
import Chart from "chart.js/auto";
import "@ui5/webcomponents/dist/Select.js";
import "@ui5/webcomponents/dist/Option.js";
import "@ui5/webcomponents/dist/Button.js";
import "@ui5/webcomponents/dist/Card.js";
import "@ui5/webcomponents/dist/Label.js";

const materialSelect = document.getElementById("materialSelect");
const storeSelect = document.getElementById("storeSelect");
const forecastTableDiv = document.getElementById("forecastTableDiv");

fetch("/api/materials")
  .then(res => res.json())
  .then(materials => {
    materials.forEach(mat => {
      const option = document.createElement("ui5-option");
      option.value = mat.material_id;
      option.textContent = mat.description;
      materialSelect.appendChild(option);
    });
  });

fetch("/api/stores")
  .then(res => res.json())
  .then(stores => {
    stores.forEach(store => {
      const option = document.createElement("ui5-option");
      option.value = store.store_id;
      option.textContent = store.store_name;
      storeSelect.appendChild(option);
    });
  });

document.getElementById("submitBtn").addEventListener("click", async () => {
  const material_id = materialSelect.value;
  const store_id = storeSelect.value;
  const analysis_type = document.getElementById("analysisType").value;

  const response = await fetch("/api/forecast", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ material_id, store_id, analysis_type })
  });

  const result = await response.json();

  let message = `üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –Ω–∞ 7 –¥–Ω–µ–π:</b> ${result.predicted_demand}<br>
üì¶ <b>–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫:</b> ${result.current_stock}<br>
üöö <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b> ${result.suggested_qty}<br>`;

  if (result.model_used === false) {
    message += `<br>‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ –±—ã–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.`;
  }

  if (result.has_shortage) {
    message += `<br><span style="color:red;">‚ùó –í–æ–∑–º–æ–∂–µ–Ω –¥–µ—Ñ–∏—Ü–∏—Ç! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.</span>`;
  } else {
    message += `<br><span style="color:green;">‚úÖ –ó–∞–ø–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω.</span>`;
  }

  document.getElementById("forecastLabel").innerHTML = message;
  document.getElementById("resultCard").style.display = "block";

  // –û—á–∏—Å—Ç–∏–º –±–ª–æ–∫ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º
  forecastTableDiv.innerHTML = result.forecast_table_html || "";

  // ‚ûï –î–æ–±–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
  const dataUsed = result.data_used || {};
  let usedInfo = "<br><h4>üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4><ul>";
  if (dataUsed.weather_used) usedInfo += "<li>üå§ –ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>";
  if (dataUsed.holidays_used) usedInfo += "<li>üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏</li>";
  if (dataUsed.promotions_used) usedInfo += "<li>üè∑ –ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏</li>";
  if (!dataUsed.weather_used && !dataUsed.holidays_used && !dataUsed.promotions_used)
    usedInfo += "<li>üìà –¢–æ–ª—å–∫–æ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–∞–∂</li>";
  usedInfo += "</ul>";
  forecastTableDiv.insertAdjacentHTML("beforeend", usedInfo);

  // üìä –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
  const ctx = document.getElementById("forecastChart").getContext("2d");
  document.getElementById("forecastChart").style.display = "block";

  if (window.forecastChart instanceof Chart) {
    window.forecastChart.destroy();
  }

  window.forecastChart = new Chart(ctx, {
    type: "bar",
    data: {
      labels: ["–ü—Ä–æ–≥–Ω–æ–∑", "–û—Å—Ç–∞—Ç–æ–∫", "–ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é"],
      datasets: [{
        label: "–ó–Ω–∞—á–µ–Ω–∏—è",
        data: [
          result.predicted_demand,
          result.current_stock,
          result.suggested_qty
        ],
        backgroundColor: [
          "rgba(75, 192, 192, 0.6)",
          "rgba(255, 206, 86, 0.6)",
          "rgba(255, 99, 132, 0.6)"
        ],
        borderColor: [
          "rgba(75, 192, 192, 1)",
          "rgba(255, 206, 86, 1)",
          "rgba(255, 99, 132, 1)"
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false },
        title: {
          display: true,
          text: '–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'
        }
      },
      scales: {
        y: {
          beginAtZero: true
        }
      }
    }
  });

  // ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç
  const orderBtnId = "createOrderBtn";
  let orderBtn = document.getElementById(orderBtnId);

  if (!orderBtn) {
    orderBtn = document.createElement("ui5-button");
    orderBtn.id = orderBtnId;
    orderBtn.textContent = "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É";
    orderBtn.setAttribute("design", "Positive");
    orderBtn.style.marginTop = "1rem";
    forecastTableDiv.appendChild(orderBtn);
  }

  orderBtn.style.display = result.has_shortage ? "inline-block" : "none";
  orderBtn.onclick = async () => {
    const res = await fetch("/api/purchase-order", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        material_id,
        store_id,
        qty: result.suggested_qty
      })
    });
    const data = await res.json();
    alert(data.message || "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.");
  };
});

if (result.city) {
  message += `<br>üåç <b>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞:</b> ${result.city} (${result.latitude}, ${result.longitude})`;
}
if (result.data_used?.weather_used) {
  message += `<br>üå¶ <b>–ü–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ.</b>`;
}
